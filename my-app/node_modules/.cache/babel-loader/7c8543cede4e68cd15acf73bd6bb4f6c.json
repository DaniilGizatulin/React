{"ast":null,"code":"//import axios from 'axios';\nimport { LOGIN_USER, LOGOUT, LOADED, DELETED, ALL_USERS } from './types'; //const JWTToken = localStorage.getItem('token');\n//if (JWTToken) {\n//    axios.defaults.headers['Authorization'] = `Bearer ${JWTToken}`\n//}\n\nimport api from '../../services/api';\n\nconst authorizationUser = () => {\n  try {\n    const _res = api.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user');\n\n    return _res;\n  } catch (e) {\n    console.log(e.response);\n  }\n};\n\nfunction loginUser(email, password, setError, nav) {\n  return dispatch => api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n    email,\n    password\n  }).then(res => {\n    api.defaults.headers['Authorization'] = `Bearer ${res.data.token}`;\n\n    if (nav) {\n      nav(`/list/page${1}/?limit=10&skip=${0}`);\n    }\n\n    localStorage.setItem('token', res.data.token);\n\n    if (localStorage.getItem('token')) {\n      authorizationUser().then(res => {\n        dispatch({\n          type: LOGIN_USER,\n          payload: res.data\n        });\n        let saveUser = JSON.stringify(res.data);\n        localStorage.setItem('user', saveUser);\n      });\n    }\n  }).catch(e => {\n    e.response.status === 404 && setError({\n      error: true,\n      message: 'Такого пользователя не существует'\n    });\n\n    if (nav) {\n      nav('/login');\n    }\n  });\n}\n\nconst setUser = user => {\n  return dispatch => dispatch({\n    type: LOGIN_USER,\n    payload: user\n  });\n};\n\nconst logout = history => {\n  return dispatch => {\n    dispatch({\n      type: LOGOUT\n    });\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    history.push(\"/login\");\n  };\n};\n\nconst loaded = () => {\n  return dispatch => dispatch({\n    type: LOADED\n  });\n};\n\nconst deleteUser = (id, token, history) => {\n  return dispatch => {\n    api.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`).then(res => {\n      dispatch({\n        type: LOGOUT\n      });\n      dispatch({\n        type: DELETED,\n        payload: true\n      });\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      setTimeout(() => {\n        history.push(\"/login\");\n        dispatch({\n          type: DELETED,\n          payload: false\n        });\n      }, 500);\n    });\n  };\n};\n\nconst createNewUser = (email, password, name, history) => {\n  return dispatch => api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n    email,\n    password,\n    name\n  }).then(res => history.push('/login')).catch(e => {\n    console.log(e.response);\n  });\n};\n\nconst getUserAvatar = (ref, image, defaultImage, alt) => {\n  api.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n    if (res.statusText === 'OK') {\n      ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n    }\n  }).catch(e => {\n    if (e.status >= 400) {\n      ref.current.src = defaultImage;\n      ref.current.alt = alt;\n    }\n  });\n};\n\nconst getAllUsers = () => {\n  return dispatch => api.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users').then(res => {\n    dispatch({\n      type: ALL_USERS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  });\n}; //! Если все норм работает , не забыть удалить!\n//const authorizationUser = () => {\n//    try {\n//        const _res = axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user')\n//        return _res\n//    } catch (e) {\n//        console.log(e.response);\n//    }\n//}\n//function loginUser(email, password, setError, nav) {\n//    return (dispatch) =>\n//        axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n//            email,\n//            password,\n//        })\n//            .then(res => {\n//                axios.defaults.headers['Authorization'] = `Bearer ${res.data.token}`\n//                if (nav) {\n//                    nav(`/list/page${1}/?limit=10&skip=${0}`)\n//                }\n//                localStorage.setItem('token', res.data.token)\n//                if (localStorage.getItem('token')) {\n//                    authorizationUser()\n//                        .then(res => {\n//                            dispatch({ type: LOGIN_USER, payload: res.data })\n//                            let saveUser = JSON.stringify(res.data)\n//                            localStorage.setItem('user', saveUser)\n//                        })\n//                }\n//            })\n//            .catch(e => {\n//                e.response.status === 404\n//                    && setError({ error: true, message: 'Такого пользователя не существует' })\n//                if (nav) {\n//                    nav('/login')\n//                }\n//            })\n//}\n//const setUser = (user) => {\n//    return (dispatch) =>\n//        dispatch({ type: LOGIN_USER, payload: user })\n//}\n//const logout = (history) => {\n//    return (dispatch) => {\n//        dispatch({ type: LOGOUT })\n//        localStorage.removeItem('user');\n//        localStorage.removeItem('token');\n//        history.push(\"/login\");\n//    }\n//}\n//const loaded = () => {\n//    return (dispatch) =>\n//        dispatch({ type: LOADED })\n//}\n//const deleteUser = (id, token, history) => {\n//    return (dispatch) => {\n//        axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n//            .then(res => {\n//                dispatch({ type: LOGOUT })\n//                dispatch({ type: DELETED, payload: true })\n//                localStorage.removeItem('user');\n//                localStorage.removeItem('token');\n//                setTimeout(() => {\n//                    history.push(\"/login\")\n//                    dispatch({ type: DELETED, payload: false })\n//                }, 500)\n//            })\n//    }\n//}\n//const createNewUser = (email, password, name, history) => {\n//    return (dispatch) =>\n//        axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n//            email,\n//            password,\n//            name\n//        })\n//            .then(res => history.push('/login'))\n//            .catch(e => {\n//                console.log(e.response)\n//            })\n//}\n//const getUserAvatar = (ref, image, defaultImage, alt) => {\n//    axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n//        .then(res => {\n//            if (res.statusText === 'OK') {\n//                ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n//            }\n//        })\n//        .catch(e => {\n//            if (e.status >= 400) {\n//                ref.current.src = defaultImage;\n//                ref.current.alt = alt;\n//            }\n//        })\n//}\n//const getAllUsers = () => {\n//    return (dispatch) =>\n//        axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n//            .then(res => {\n//                dispatch({ type: ALL_USERS, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n//}\n\n\nexport { loginUser, setUser, logout, loaded, deleteUser, createNewUser, getUserAvatar, getAllUsers };","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/redux/user/actions.js"],"names":["LOGIN_USER","LOGOUT","LOADED","DELETED","ALL_USERS","api","authorizationUser","_res","get","e","console","log","response","loginUser","email","password","setError","nav","dispatch","post","then","res","defaults","headers","data","token","localStorage","setItem","getItem","type","payload","saveUser","JSON","stringify","catch","status","error","message","setUser","user","logout","history","removeItem","push","loaded","deleteUser","id","delete","setTimeout","createNewUser","name","getUserAvatar","ref","image","defaultImage","alt","statusText","current","src","getAllUsers"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,SAA9C,QAA+D,SAA/D,C,CAEA;AACA;AACA;AACA;;AAGA,OAAOC,GAAP,MAAgB,oBAAhB;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAC5B,MAAI;AACA,UAAMC,IAAI,GAAGF,GAAG,CAACG,GAAJ,CAAQ,6DAAR,CAAb;;AACA,WAAOD,IAAP;AACH,GAHD,CAGE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,QAAd;AACH;AACJ,CAPD;;AASA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCC,QAApC,EAA8CC,GAA9C,EAAmD;AAC/C,SAAQC,QAAD,IACHb,GAAG,CAACc,IAAJ,CAAS,wDAAT,EAAmE;AAC/DL,IAAAA,KAD+D;AAE/DC,IAAAA;AAF+D,GAAnE,EAIKK,IAJL,CAIUC,GAAG,IAAI;AACThB,IAAAA,GAAG,CAACiB,QAAJ,CAAaC,OAAb,CAAqB,eAArB,IAAyC,UAASF,GAAG,CAACG,IAAJ,CAASC,KAAM,EAAjE;;AACA,QAAIR,GAAJ,EAAS;AACLA,MAAAA,GAAG,CAAE,aAAY,CAAE,mBAAkB,CAAE,EAApC,CAAH;AACH;;AACDS,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BN,GAAG,CAACG,IAAJ,CAASC,KAAvC;;AACA,QAAIC,YAAY,CAACE,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AAC/BtB,MAAAA,iBAAiB,GACZc,IADL,CACUC,GAAG,IAAI;AACTH,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,IAAI,EAAE7B,UAAR;AAAoB8B,UAAAA,OAAO,EAAET,GAAG,CAACG;AAAjC,SAAD,CAAR;AACA,YAAIO,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeZ,GAAG,CAACG,IAAnB,CAAf;AACAE,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BI,QAA7B;AACH,OALL;AAMH;AACJ,GAlBL,EAmBKG,KAnBL,CAmBWzB,CAAC,IAAI;AACRA,IAAAA,CAAC,CAACG,QAAF,CAAWuB,MAAX,KAAsB,GAAtB,IACOnB,QAAQ,CAAC;AAAEoB,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAAD,CADf;;AAEA,QAAIpB,GAAJ,EAAS;AACLA,MAAAA,GAAG,CAAC,QAAD,CAAH;AACH;AACJ,GAzBL,CADJ;AA2BH;;AAED,MAAMqB,OAAO,GAAIC,IAAD,IAAU;AACtB,SAAQrB,QAAD,IACHA,QAAQ,CAAC;AAAEW,IAAAA,IAAI,EAAE7B,UAAR;AAAoB8B,IAAAA,OAAO,EAAES;AAA7B,GAAD,CADZ;AAEH,CAHD;;AAKA,MAAMC,MAAM,GAAIC,OAAD,IAAa;AACxB,SAAQvB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE5B;AAAR,KAAD,CAAR;AACAyB,IAAAA,YAAY,CAACgB,UAAb,CAAwB,MAAxB;AACAhB,IAAAA,YAAY,CAACgB,UAAb,CAAwB,OAAxB;AACAD,IAAAA,OAAO,CAACE,IAAR,CAAa,QAAb;AACH,GALD;AAMH,CAPD;;AASA,MAAMC,MAAM,GAAG,MAAM;AACjB,SAAQ1B,QAAD,IACHA,QAAQ,CAAC;AAAEW,IAAAA,IAAI,EAAE3B;AAAR,GAAD,CADZ;AAEH,CAHD;;AAKA,MAAM2C,UAAU,GAAG,CAACC,EAAD,EAAKrB,KAAL,EAAYgB,OAAZ,KAAwB;AACvC,SAAQvB,QAAD,IAAc;AACjBb,IAAAA,GAAG,CAAC0C,MAAJ,CAAY,2DAA0DD,EAAG,EAAzE,EACK1B,IADL,CACUC,GAAG,IAAI;AACTH,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE5B;AAAR,OAAD,CAAR;AACAiB,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE1B,OAAR;AAAiB2B,QAAAA,OAAO,EAAE;AAA1B,OAAD,CAAR;AACAJ,MAAAA,YAAY,CAACgB,UAAb,CAAwB,MAAxB;AACAhB,MAAAA,YAAY,CAACgB,UAAb,CAAwB,OAAxB;AACAM,MAAAA,UAAU,CAAC,MAAM;AACbP,QAAAA,OAAO,CAACE,IAAR,CAAa,QAAb;AACAzB,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,IAAI,EAAE1B,OAAR;AAAiB2B,UAAAA,OAAO,EAAE;AAA1B,SAAD,CAAR;AACH,OAHS,EAGP,GAHO,CAAV;AAIH,KAVL;AAWH,GAZD;AAaH,CAdD;;AAgBA,MAAMmB,aAAa,GAAG,CAACnC,KAAD,EAAQC,QAAR,EAAkBmC,IAAlB,EAAwBT,OAAxB,KAAoC;AACtD,SAAQvB,QAAD,IACHb,GAAG,CAACc,IAAJ,CAAS,yDAAT,EAAoE;AAChEL,IAAAA,KADgE;AAEhEC,IAAAA,QAFgE;AAGhEmC,IAAAA;AAHgE,GAApE,EAKK9B,IALL,CAKUC,GAAG,IAAIoB,OAAO,CAACE,IAAR,CAAa,QAAb,CALjB,EAMKT,KANL,CAMWzB,CAAC,IAAI;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,QAAd;AACH,GARL,CADJ;AAWH,CAZD;;AAcA,MAAMuC,aAAa,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAaC,YAAb,EAA2BC,GAA3B,KAAmC;AACrDlD,EAAAA,GAAG,CAACG,GAAJ,CAAS,6CAA4C6C,KAAM,EAA3D,EACKjC,IADL,CACUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACmC,UAAJ,KAAmB,IAAvB,EAA6B;AACzBJ,MAAAA,GAAG,CAACK,OAAJ,CAAYC,GAAZ,GAAmB,6CAA4CL,KAAM,EAArE;AACH;AACJ,GALL,EAMKnB,KANL,CAMWzB,CAAC,IAAI;AACR,QAAIA,CAAC,CAAC0B,MAAF,IAAY,GAAhB,EAAqB;AACjBiB,MAAAA,GAAG,CAACK,OAAJ,CAAYC,GAAZ,GAAkBJ,YAAlB;AACAF,MAAAA,GAAG,CAACK,OAAJ,CAAYF,GAAZ,GAAkBA,GAAlB;AACH;AACJ,GAXL;AAYH,CAbD;;AAeA,MAAMI,WAAW,GAAG,MAAM;AACtB,SAAQzC,QAAD,IACHb,GAAG,CAACG,GAAJ,CAAQ,yDAAR,EACKY,IADL,CACUC,GAAG,IAAI;AACTH,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAEzB,SAAR;AAAmB0B,MAAAA,OAAO,EAAET,GAAG,CAACG;AAAhC,KAAD,CAAR;AACAN,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE3B;AAAR,KAAD,CAAR;AACH,GAJL,CADJ;AAQH,CATD,C,CAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAEA,SAASW,SAAT,EAAoByB,OAApB,EAA6BE,MAA7B,EAAqCI,MAArC,EAA6CC,UAA7C,EAAyDI,aAAzD,EAAwEE,aAAxE,EAAuFQ,WAAvF","sourcesContent":["//import axios from 'axios';\nimport { LOGIN_USER, LOGOUT, LOADED, DELETED, ALL_USERS } from './types'\n\n//const JWTToken = localStorage.getItem('token');\n//if (JWTToken) {\n//    axios.defaults.headers['Authorization'] = `Bearer ${JWTToken}`\n//}\n\n\nimport api from '../../services/api';\n\nconst authorizationUser = () => {\n    try {\n        const _res = api.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user')\n        return _res\n    } catch (e) {\n        console.log(e.response);\n    }\n}\n\nfunction loginUser(email, password, setError, nav) {\n    return (dispatch) =>\n        api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n            email,\n            password,\n        })\n            .then(res => {\n                api.defaults.headers['Authorization'] = `Bearer ${res.data.token}`\n                if (nav) {\n                    nav(`/list/page${1}/?limit=10&skip=${0}`)\n                }\n                localStorage.setItem('token', res.data.token)\n                if (localStorage.getItem('token')) {\n                    authorizationUser()\n                        .then(res => {\n                            dispatch({ type: LOGIN_USER, payload: res.data })\n                            let saveUser = JSON.stringify(res.data)\n                            localStorage.setItem('user', saveUser)\n                        })\n                }\n            })\n            .catch(e => {\n                e.response.status === 404\n                    && setError({ error: true, message: 'Такого пользователя не существует' })\n                if (nav) {\n                    nav('/login')\n                }\n            })\n}\n\nconst setUser = (user) => {\n    return (dispatch) =>\n        dispatch({ type: LOGIN_USER, payload: user })\n}\n\nconst logout = (history) => {\n    return (dispatch) => {\n        dispatch({ type: LOGOUT })\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n        history.push(\"/login\");\n    }\n}\n\nconst loaded = () => {\n    return (dispatch) =>\n        dispatch({ type: LOADED })\n}\n\nconst deleteUser = (id, token, history) => {\n    return (dispatch) => {\n        api.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n            .then(res => {\n                dispatch({ type: LOGOUT })\n                dispatch({ type: DELETED, payload: true })\n                localStorage.removeItem('user');\n                localStorage.removeItem('token');\n                setTimeout(() => {\n                    history.push(\"/login\")\n                    dispatch({ type: DELETED, payload: false })\n                }, 500)\n            })\n    }\n}\n\nconst createNewUser = (email, password, name, history) => {\n    return (dispatch) =>\n        api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n            email,\n            password,\n            name\n        })\n            .then(res => history.push('/login'))\n            .catch(e => {\n                console.log(e.response)\n            })\n\n}\n\nconst getUserAvatar = (ref, image, defaultImage, alt) => {\n    api.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n        .then(res => {\n            if (res.statusText === 'OK') {\n                ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n            }\n        })\n        .catch(e => {\n            if (e.status >= 400) {\n                ref.current.src = defaultImage;\n                ref.current.alt = alt;\n            }\n        })\n}\n\nconst getAllUsers = () => {\n    return (dispatch) =>\n        api.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n            .then(res => {\n                dispatch({ type: ALL_USERS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n\n\n}\n\n\n//! Если все норм работает , не забыть удалить!\n\n//const authorizationUser = () => {\n//    try {\n//        const _res = axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user')\n//        return _res\n//    } catch (e) {\n//        console.log(e.response);\n//    }\n//}\n\n//function loginUser(email, password, setError, nav) {\n//    return (dispatch) =>\n//        axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n//            email,\n//            password,\n//        })\n//            .then(res => {\n//                axios.defaults.headers['Authorization'] = `Bearer ${res.data.token}`\n//                if (nav) {\n//                    nav(`/list/page${1}/?limit=10&skip=${0}`)\n//                }\n//                localStorage.setItem('token', res.data.token)\n//                if (localStorage.getItem('token')) {\n//                    authorizationUser()\n//                        .then(res => {\n//                            dispatch({ type: LOGIN_USER, payload: res.data })\n//                            let saveUser = JSON.stringify(res.data)\n//                            localStorage.setItem('user', saveUser)\n//                        })\n//                }\n//            })\n//            .catch(e => {\n//                e.response.status === 404\n//                    && setError({ error: true, message: 'Такого пользователя не существует' })\n//                if (nav) {\n//                    nav('/login')\n//                }\n//            })\n//}\n\n//const setUser = (user) => {\n//    return (dispatch) =>\n//        dispatch({ type: LOGIN_USER, payload: user })\n//}\n\n//const logout = (history) => {\n//    return (dispatch) => {\n//        dispatch({ type: LOGOUT })\n//        localStorage.removeItem('user');\n//        localStorage.removeItem('token');\n//        history.push(\"/login\");\n//    }\n//}\n\n//const loaded = () => {\n//    return (dispatch) =>\n//        dispatch({ type: LOADED })\n//}\n\n//const deleteUser = (id, token, history) => {\n//    return (dispatch) => {\n//        axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n//            .then(res => {\n//                dispatch({ type: LOGOUT })\n//                dispatch({ type: DELETED, payload: true })\n//                localStorage.removeItem('user');\n//                localStorage.removeItem('token');\n//                setTimeout(() => {\n//                    history.push(\"/login\")\n//                    dispatch({ type: DELETED, payload: false })\n//                }, 500)\n//            })\n//    }\n//}\n\n//const createNewUser = (email, password, name, history) => {\n//    return (dispatch) =>\n//        axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n//            email,\n//            password,\n//            name\n//        })\n//            .then(res => history.push('/login'))\n//            .catch(e => {\n//                console.log(e.response)\n//            })\n\n//}\n\n//const getUserAvatar = (ref, image, defaultImage, alt) => {\n//    axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n//        .then(res => {\n//            if (res.statusText === 'OK') {\n//                ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n//            }\n//        })\n//        .catch(e => {\n//            if (e.status >= 400) {\n//                ref.current.src = defaultImage;\n//                ref.current.alt = alt;\n//            }\n//        })\n//}\n\n//const getAllUsers = () => {\n//    return (dispatch) =>\n//        axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n//            .then(res => {\n//                dispatch({ type: ALL_USERS, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n\n\n//}\n\nexport { loginUser, setUser, logout, loaded, deleteUser, createNewUser, getUserAvatar, getAllUsers }"]},"metadata":{},"sourceType":"module"}