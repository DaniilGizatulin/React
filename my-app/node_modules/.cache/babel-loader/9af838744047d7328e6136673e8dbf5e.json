{"ast":null,"code":"import axios from 'axios';\nimport { fault, addUser } from '../actions';\nexport default class Server {\n  //!USER\n  //? Create user and authorization.................................................................................................\n  //async loginUser(email, password, nav, dispatch) {\n  //    await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n  //        email,\n  //        password,\n  //    })\n  //        .then(res => {\n  //            localStorage.setItem('token', res.data.token)\n  //            if (localStorage.getItem('token')) {\n  //                this.authorizationUser(localStorage.getItem('token'))\n  //                    .then(res => {\n  //                        dispatch(addUser(res.data))\n  //                        let saveUser = JSON.stringify(res.data)\n  //                        localStorage.setItem('user', saveUser)\n  //                    })\n  //            }\n  //        })\n  //        .catch(e => {\n  //            nav('/login')\n  //            dispatch(fault())\n  //        })\n  //}\n  //async authorizationUser(token) {\n  //    try {\n  //        const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n  //        return _res\n  //    } catch (e) {\n  //        console.log(e.response);\n  //    }\n  //}\n  async createNewUser(email, password, name, history, dispatch) {\n    try {\n      await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n        email,\n        password,\n        name\n      }).then(res => setTimeout(() => history.push('/login'), 500)).catch(e => dispatch(fault()));\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //?Get user(s) ......................................................................................................................\n\n\n  async getAllUsers() {\n    try {\n      const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users');\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getUser(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`);\n      return res;\n    } catch (e) {\n      return e.response;\n    }\n  } //async deleteUser(id, token, dispatch, history) {\n  //    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n  //        .then(res => {\n  //            dispatch(logout());\n  //            dispatch(remove(true))\n  //            localStorage.removeItem('user');\n  //            localStorage.removeItem('token');\n  //            setTimeout(() => {\n  //                history.push(\"/login\")\n  //                dispatch(remove(false))\n  //            }, 500)\n  //        })\n  //}\n  //?Update user and user avatar................................................................\n\n\n  async updateUserName(id, token, name, dispatch) {\n    await axios({\n      method: 'PATCH',\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n      data: {\n        name\n      },\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(res => {\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch(addUser(res.data));\n    });\n  }\n\n  async updateUserAvatar(id, token, avatar, dispatch) {\n    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": ' multipart/form-data'\n      }\n    }).then(res => {\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch(addUser(res.data));\n    });\n  } //!POST\n  //?Get post(s) ...........................................................................................................................\n\n\n  async getAllPosts(skip = 0, limit = 10) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getPost(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //async deletePost(id, token, closeDeleteModal, dispatch, history) {\n  //    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n  //        .then(res => {\n  //            closeDeleteModal()\n  //            dispatch(remove(true))\n  //            setTimeout(() => {\n  //                history.push(`/list/page${1}/?limit=10&skip=${0}`)\n  //                dispatch(remove(false))\n  //            }, 500)\n  //        })\n  //}\n  //?Create new post........................................................................\n\n\n  async createNewPost(title, fullText, description, token, dispatch) {\n    try {\n      const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\", {\n        title,\n        fullText,\n        description\n      }, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      dispatch(fault());\n      console.log(e.response);\n    }\n  } //?Update post and post image................................................................\n\n\n  async updatePost(id, token, title, description, fullText, history, user) {\n    await axios({\n      method: 'PATCH',\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n      data: {\n        title,\n        description,\n        fullText\n      },\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500));\n  }\n\n  async updatePostImage(id, token, image, refImagePost) {\n    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": ' multipart/form-data'\n      }\n    }).then(res => {\n      this.getPost(id).then(res => this.getImage(refImagePost, res.data.image));\n    });\n  } //*Like post........................................................\n\n\n  async setLikePost(id, token) {\n    try {\n      const res = await axios({\n        method: 'PUT',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //? get Image post and avatar ...................................................................................\n\n\n  async getImage(ref, image, defaultImage, alt) {\n    await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n      if (res.statusText === 'OK') {\n        ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n      }\n    }).catch(e => {\n      if (e.status >= 400) {\n        ref.current.src = defaultImage;\n        ref.current.alt = alt;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/services/server.js"],"names":["axios","fault","addUser","Server","createNewUser","email","password","name","history","dispatch","post","then","res","setTimeout","push","catch","e","console","log","response","getAllUsers","get","getUser","id","updateUserName","token","method","url","data","headers","localStorage","setItem","JSON","stringify","updateUserAvatar","avatar","put","getAllPosts","skip","limit","getPost","createNewPost","title","fullText","description","updatePost","user","_id","updatePostImage","image","refImagePost","getImage","setLikePost","ref","defaultImage","alt","statusText","current","src","status"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { fault, addUser } from '../actions';\n\nexport default class Server {\n\n    //!USER\n    //? Create user and authorization.................................................................................................\n\n    //async loginUser(email, password, nav, dispatch) {\n    //    await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n    //        email,\n    //        password,\n    //    })\n    //        .then(res => {\n    //            localStorage.setItem('token', res.data.token)\n    //            if (localStorage.getItem('token')) {\n    //                this.authorizationUser(localStorage.getItem('token'))\n    //                    .then(res => {\n    //                        dispatch(addUser(res.data))\n    //                        let saveUser = JSON.stringify(res.data)\n    //                        localStorage.setItem('user', saveUser)\n    //                    })\n    //            }\n    //        })\n    //        .catch(e => {\n    //            nav('/login')\n    //            dispatch(fault())\n    //        })\n\n    //}\n\n    //async authorizationUser(token) {\n    //    try {\n    //        const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n    //        return _res\n    //    } catch (e) {\n    //        console.log(e.response);\n    //    }\n    //}\n\n    async createNewUser(email, password, name, history, dispatch) {\n        try {\n            await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n                email,\n                password,\n                name\n            })\n                .then(res => setTimeout(() => history.push('/login'), 500))\n                .catch(e => dispatch(fault()))\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    //?Get user(s) ......................................................................................................................\n\n    async getAllUsers() {\n        try {\n            const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n            return res\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    async getUser(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n            return res\n        } catch (e) {\n            return e.response\n        }\n    }\n\n\n    //async deleteUser(id, token, dispatch, history) {\n    //    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n    //        .then(res => {\n    //            dispatch(logout());\n    //            dispatch(remove(true))\n    //            localStorage.removeItem('user');\n    //            localStorage.removeItem('token');\n    //            setTimeout(() => {\n    //                history.push(\"/login\")\n    //                dispatch(remove(false))\n    //            }, 500)\n    //        })\n    //}\n\n    //?Update user and user avatar................................................................\n\n    async updateUserName(id, token, name, dispatch) {\n        await axios({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n            data:\n            {\n                name,\n            },\n\n            headers:\n                { \"Authorization\": `Bearer ${token}` }\n\n        })\n            .then(res => {\n                localStorage.setItem('user', JSON.stringify(res.data))\n                dispatch(addUser(res.data))\n            })\n    }\n\n    async updateUserAvatar(id, token, avatar, dispatch) {\n        await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": ' multipart/form-data'\n            }\n        }\n        )\n            .then(res => {\n                localStorage.setItem('user', JSON.stringify(res.data))\n                dispatch(addUser(res.data))\n            })\n    }\n\n    //!POST\n    //?Get post(s) ...........................................................................................................................\n\n    async getAllPosts(skip = 0, limit = 10) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getPost(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //async deletePost(id, token, closeDeleteModal, dispatch, history) {\n    //    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n    //        .then(res => {\n    //            closeDeleteModal()\n    //            dispatch(remove(true))\n    //            setTimeout(() => {\n    //                history.push(`/list/page${1}/?limit=10&skip=${0}`)\n    //                dispatch(remove(false))\n    //            }, 500)\n    //        })\n    //}\n\n    //?Create new post........................................................................\n\n    async createNewPost(title, fullText, description, token, dispatch) {\n        try {\n            const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n                {\n                    title,\n                    fullText,\n                    description,\n                },\n                {\n                    headers:\n                        { \"Authorization\": `Bearer ${token}` }\n                });\n            return res\n        } catch (e) {\n            dispatch(fault())\n            console.log(e.response)\n        }\n    }\n\n\n    //?Update post and post image................................................................\n\n    async updatePost(id, token, title, description, fullText, history, user) {\n        await axios({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n            data:\n            {\n                title,\n                description,\n                fullText,\n            },\n\n            headers:\n                { \"Authorization\": `Bearer ${token}` }\n\n        })\n            .then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500))\n    }\n\n    async updatePostImage(id, token, image, refImagePost) {\n        await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": ' multipart/form-data'\n            }\n        }\n        )\n            .then(res => {\n                this.getPost(id)\n                    .then(res => this.getImage(refImagePost, res.data.image))\n            })\n\n\n    }\n\n    //*Like post........................................................\n\n    async setLikePost(id, token) {\n        try {\n            const res = await axios({\n                method: 'PUT',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n                headers: {\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //? get Image post and avatar ...................................................................................\n\n    async getImage(ref, image, defaultImage, alt) {\n        await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n                }\n            })\n            .catch(e => {\n                if (e.status >= 400) {\n                    ref.current.src = defaultImage;\n                    ref.current.alt = alt;\n                }\n            })\n    }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}