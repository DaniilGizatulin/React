{"ast":null,"code":"import axios from 'axios';\nimport { POSTS, LOADED, ERROR, DELETED, POST, ALL_POSTS, FULL_POST } from './types';\nimport api from '../../apiBase';\n\nconst setPosts = posts => {\n  return dispatch => dispatch({\n    type: POSTS,\n    payload: posts\n  });\n};\n\nconst getPosts = (skip = 0, limit = 10) => {\n  return dispatch => api.get(`/api/v1/posts?limit=${limit}&skip=${skip}`).then(res => {\n    dispatch({\n      type: POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst getAllPosts = (skip = 0, limit = 10) => {\n  return dispatch => api.get(`/api/v1/posts?limit=${limit}&skip=${skip}`).then(res => {\n    dispatch({\n      type: ALL_POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  });\n};\n\nconst loaded = () => {\n  return dispatch => dispatch({\n    type: LOADED\n  });\n};\n\nconst fault = () => {\n  return dispatch => dispatch({\n    type: ERROR\n  });\n};\n\nconst deletePost = (id, token, history) => {\n  return dispatch => api.delete(`/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: DELETED,\n      payload: true\n    });\n    setTimeout(() => {\n      history.push(`/list/page${1}/?limit=10&skip=${0}`);\n      dispatch({\n        type: DELETED,\n        payload: false\n      });\n    }, 500);\n  }); //.catch(e => )\n};\n\nconst getPost = id => {\n  return dispatch => api.get(`/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: POST,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst getFullPost = id => {\n  return dispatch => api.get(`/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: FULL_POST,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n    console.log(res.data);\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst setLikePost = id => {\n  return () => api({\n    method: 'PUT',\n    url: `/api/v1/posts/like/${id}`\n  });\n};\n\nconst createNewPost = (postForm, setError, history, id, image) => {\n  return dispatch => api.post(\"/api/v1/posts\", { ...postForm\n  }).then(res => {\n    if (res.status === 200) {\n      if (image) {\n        let formData = new FormData();\n        formData.append('image', image);\n        dispatch(updatePostImage(res.data._id, formData));\n      }\n\n      setTimeout(() => history.push(`/user-posts/${id}`), 1500);\n    }\n  }).catch(e => {\n    console.log(e.response);\n    setError(e.response.data.error[0].message);\n  });\n};\n\nconst updatePostImage = (id, image, refImagePost) => {\n  return dispatch => api.put(`/api/v1/posts/upload/${id}`, image, {\n    headers: {\n      \"Content-Type\": ' multipart/form-data'\n    }\n  }).then(res => {\n    console.log(res);\n    dispatch(getImage(refImagePost, res.data.image));\n  });\n};\n\nconst getImage = (ref, image, defaultImage, alt) => {\n  return () => axios.get(`${image}`).then(res => {\n    if (res.statusText === 'OK') {\n      ref.current.src = `${image}`;\n    }\n  }).catch(e => {\n    if (e.status >= 400) {\n      ref.current.src = defaultImage;\n      ref.current.alt = alt;\n    }\n  });\n};\n\nconst updatePost = (id, postForm, history, user, setError) => {\n  return () => api({\n    method: 'PATCH',\n    url: `/api/v1/posts/${id}`,\n    data: { ...postForm\n    }\n  }).then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500)).catch(e => setError(e.response.data.error[0].message));\n};\n\nexport { getPosts, setPosts, loaded, fault, deletePost, getPost, getAllPosts, getFullPost, setLikePost, createNewPost, updatePostImage, updatePost };","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/redux/posts/actions.js"],"names":["axios","POSTS","LOADED","ERROR","DELETED","POST","ALL_POSTS","FULL_POST","api","setPosts","posts","dispatch","type","payload","getPosts","skip","limit","get","then","res","data","catch","e","getAllPosts","loaded","fault","deletePost","id","token","history","delete","setTimeout","push","getPost","getFullPost","console","log","setLikePost","method","url","createNewPost","postForm","setError","image","post","status","formData","FormData","append","updatePostImage","_id","response","error","message","refImagePost","put","headers","getImage","ref","defaultImage","alt","statusText","current","src","updatePost","user"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    POSTS,\n    LOADED,\n    ERROR,\n    DELETED,\n    POST,\n    ALL_POSTS,\n    FULL_POST\n} from './types'\n\nimport api from '../../apiBase';\n\nconst setPosts = (posts) => {\n    return (dispatch) =>\n        dispatch({ type: POSTS, payload: posts })\n}\n\nconst getPosts = (skip = 0, limit = 10) => {\n    return (dispatch) =>\n        api.get(`/api/v1/posts?limit=${limit}&skip=${skip}`)\n            .then(res => {\n                dispatch({ type: POSTS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n\n}\n\nconst getAllPosts = (skip = 0, limit = 10) => {\n    return (dispatch) =>\n        api.get(`/api/v1/posts?limit=${limit}&skip=${skip}`)\n            .then(res => {\n                dispatch({ type: ALL_POSTS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n}\n\nconst loaded = () => {\n    return (dispatch) =>\n        dispatch({ type: LOADED })\n}\n\nconst fault = () => {\n    return (dispatch) =>\n        dispatch({ type: ERROR })\n}\n\nconst deletePost = (id, token, history) => {\n    return (dispatch) =>\n        api.delete(`/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: DELETED, payload: true })\n                setTimeout(() => {\n                    history.push(`/list/page${1}/?limit=10&skip=${0}`)\n                    dispatch({ type: DELETED, payload: false })\n                }, 500)\n            })\n    //.catch(e => )\n\n}\n\nconst getPost = (id) => {\n    return (dispatch) =>\n        api.get(`/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: POST, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n}\n\nconst getFullPost = (id) => {\n    return (dispatch) =>\n        api.get(`/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: FULL_POST, payload: res.data })\n                dispatch({ type: LOADED })\n                console.log(res.data)\n            })\n            .catch(e => dispatch({ type: ERROR }))\n}\n\nconst setLikePost = (id) => {\n    return () =>\n        api({\n            method: 'PUT',\n            url: `/api/v1/posts/like/${id}`,\n        })\n\n}\n\nconst createNewPost = (postForm, setError, history, id, image) => {\n    return (dispatch) =>\n        api.post(\"/api/v1/posts\",\n            { ...postForm },\n        )\n            .then(res => {\n                if (res.status === 200) {\n                    if (image) {\n                        let formData = new FormData()\n                        formData.append('image', image)\n                        dispatch(updatePostImage(res.data._id, formData))\n                    }\n                    setTimeout(() => history.push(`/user-posts/${id}`), 1500)\n                }\n            })\n            .catch(e => {\n                console.log(e.response)\n                setError(e.response.data.error[0].message)\n            })\n}\n\nconst updatePostImage = (id, image, refImagePost) => {\n    return (dispatch) =>\n        api.put(`/api/v1/posts/upload/${id}`, image, {\n            headers: {\n                \"Content-Type\": ' multipart/form-data'\n            }\n        })\n            .then(res => {\n                console.log(res)\n                dispatch(getImage(refImagePost, res.data.image))\n            })\n\n\n}\n\nconst getImage = (ref, image, defaultImage, alt) => {\n    return () =>\n        axios.get(`${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `${image}`\n                }\n            })\n            .catch(e => {\n                if (e.status >= 400) {\n                    ref.current.src = defaultImage;\n                    ref.current.alt = alt;\n                }\n            })\n}\n\nconst updatePost = (id, postForm, history, user, setError) => {\n    return () =>\n        api({\n            method: 'PATCH',\n            url: `/api/v1/posts/${id}`,\n            data:\n                { ...postForm },\n        })\n            .then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500))\n            .catch(e => setError(e.response.data.error[0].message))\n}\n\nexport {\n    getPosts,\n    setPosts,\n    loaded,\n    fault,\n    deletePost,\n    getPost,\n    getAllPosts,\n    getFullPost,\n    setLikePost,\n    createNewPost,\n    updatePostImage,\n    updatePost\n}\n"]},"metadata":{},"sourceType":"module"}