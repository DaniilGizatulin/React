{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/CreateEdit-post/createEdit-post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ModalConfirm from '../modalConfirm';\nimport Spinner from '../spinner';\nimport defaultImage from '../../image/default-image.jpg';\nimport defimg from '../../image/defimg.jpg';\nimport './createEdit-post.sass';\nimport { loaded, deletePost, createNewPost, updatePostImage, getPost, updatePost } from '../../redux/posts/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateEditPost = ({\n  Server\n}) => {\n  _s();\n\n  //useSelector\n  const loading = useSelector(state => state.postState.loading);\n  const token = useSelector(state => state.userState.isAuthorized);\n  const user = useSelector(state => state.userState.user);\n  const post = useSelector(state => state.postState.post); //refs\n\n  const refImagePost = useRef(); // Modal \n\n  const [show, setShow] = useState(false);\n\n  const closeDeleteModal = () => setShow(false);\n\n  const openDeleteModal = () => setShow(true); //useState\n  //const [post, setPost] = useState(null)\n  //inp\n\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [fullText, setFullText] = useState('');\n  const [image, setImage] = useState(null);\n  const [checkedImg, setChekedImg] = useState();\n  const [errorForm, setError] = useState({\n    error: false,\n    message: ''\n  });\n\n  const formError = text => {\n    setError({\n      error: true,\n      message: text\n    });\n    setTimeout(() => setError({\n      error: false,\n      message: '',\n      success: false\n    }), 1600);\n  }; //useDispatch\n\n\n  const dispatch = useDispatch(); //History\n\n  const history = useHistory(); //useParams\n\n  const {\n    id\n  } = useParams(); //Effect and func\n  //?Edit...................................................................................................................\n  //checkImage or post\n\n  function checkImage(imageSrc, good, bad) {\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = good;\n    img.onerror = bad;\n  }\n\n  useEffect(() => {\n    if (id && post) {\n      checkImage(`https://nodejs-test-api-blog.herokuapp.com${post.image}`, () => {\n        setChekedImg(`https://nodejs-test-api-blog.herokuapp.com${post.image}`);\n      }, () => {\n        setChekedImg(defaultImage);\n      });\n    }\n  }, [id, post]); //\n\n  const changePost = (id, token, title, description, fullText) => {\n    //Server.updatePost(id, token, title, description, fullText, history, user, formError)\n    dispatch(updatePost(id, title, description, fullText, history, user, formError));\n  };\n\n  const changePostImage = (img, id) => {\n    let formData = new FormData();\n    formData.append('image', img); //Server.updatePostImage(id, token, formData, refImagePost)\n\n    dispatch(updatePostImage(id, formData, refImagePost));\n  };\n\n  const delPost = () => {\n    dispatch(deletePost(id, token, history));\n    closeDeleteModal();\n  }; //?Create...................................................................................................................\n\n\n  const createPost = () => {\n    //Server.createNewPost(title, fullText, description, token, formError, history, user._id)\n    //    .then(res => {\n    //if (image) {\n    //    changePostImage(image, res.data._id, token)\n    //}\n    //    })\n    dispatch(createNewPost(title, fullText, description, formError, history, user._id, image));\n  };\n\n  useEffect(() => {\n    if (id) {\n      dispatch(getPost(id));\n    }\n  }, [Server, dispatch, id]); //useEffect(() => {\n  //    if (id) {\n  //        Server.getPost(id)\n  //            .then(res => {\n  //                dispatch(loaded())\n  //                setPost(res.data)\n  //            })\n  //            .catch(res => setPost(null))\n  //    } else {\n  //        setPost(null)\n  //    }\n  //}, [Server, dispatch, id])\n\n  if (loading && post) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor\",\n      onClick: () => console.log(post),\n      children: [/*#__PURE__*/_jsxDEV(ModalConfirm, {\n        show: show,\n        handleClose: closeDeleteModal,\n        remove: delPost,\n        label: 'Are you sure you want to delete this post?'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item-post\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-item-list\",\n              children: [post && id && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"menu-post delete\",\n                onClick: () => openDeleteModal(),\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-trash-o\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 34\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 48\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-post\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-header-post\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    title: \"Title your post\",\n                    className: `title editor-title ${errorForm.error && !title && 'border-error'}`,\n                    placeholder: post && id ? post.title : 'Title your post',\n                    value: title,\n                    onChange: e => setTitle(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-description\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    title: \"Description your post\",\n                    type: \"text\",\n                    className: `editor-description ${errorForm.error && !description && 'border-error'}`,\n                    placeholder: post && id ? post.description : 'Description your post',\n                    value: description,\n                    onChange: e => setDescription(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-image\",\n                  children: [post && id ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: checkedImg,\n                    alt: \"post_image\",\n                    className: \"post-image\",\n                    ref: refImagePost\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 47\n                  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: defimg,\n                    alt: \"post_img\",\n                    className: \"post-image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 47\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"file-upload\",\n                    className: \"inp-upload\",\n                    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"fa fa-camera\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 175,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"file\",\n                      accept: \"image/*\",\n                      id: \"file-upload\",\n                      onChange: e => post && id ? changePostImage(e.target.files[0], id, token) : setImage(e.target.files[0])\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 176,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-full-text\",\n                  children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                    title: \"Full text your post\",\n                    className: `form-control editor-full-text ${errorForm.error && !fullText && 'border-error'}`,\n                    rows: \"2\",\n                    placeholder: post && id ? post.fullText : 'Full text your post',\n                    value: fullText,\n                    onChange: e => setFullText(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 37\n                }, this), id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"save save-edit\",\n                  onClick: () => changePost(id, token, title, description, fullText),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 43\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-create\",\n                  onClick: createPost,\n                  children: \"Create post\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 43\n                }, this), errorForm.error && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: `form-error`,\n                  children: errorForm.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(CreateEditPost, \"uftM0VYHYG1IEnMVlCsHPQRn+NE=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch, useHistory, useParams];\n});\n\n_c = CreateEditPost;\nexport default WithServer()(CreateEditPost);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEditPost\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/CreateEdit-post/createEdit-post.js"],"names":["React","useEffect","useRef","useState","WithServer","useHistory","useParams","useDispatch","useSelector","ModalConfirm","Spinner","defaultImage","defimg","loaded","deletePost","createNewPost","updatePostImage","getPost","updatePost","CreateEditPost","Server","loading","state","postState","token","userState","isAuthorized","user","post","refImagePost","show","setShow","closeDeleteModal","openDeleteModal","title","setTitle","description","setDescription","fullText","setFullText","image","setImage","checkedImg","setChekedImg","errorForm","setError","error","message","formError","text","setTimeout","success","dispatch","history","id","checkImage","imageSrc","good","bad","img","Image","src","onload","onerror","changePost","changePostImage","formData","FormData","append","delPost","createPost","_id","console","log","e","target","value","files"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ModalConfirm from '../modalConfirm';\nimport Spinner from '../spinner'\n\nimport defaultImage from '../../image/default-image.jpg'\nimport defimg from '../../image/defimg.jpg'\nimport './createEdit-post.sass'\n\nimport { loaded, deletePost, createNewPost, updatePostImage, getPost, updatePost } from '../../redux/posts/actions'\n\n\nconst CreateEditPost = ({ Server }) => {\n    //useSelector\n    const loading = useSelector(state => state.postState.loading)\n    const token = useSelector(state => state.userState.isAuthorized);\n    const user = useSelector(state => state.userState.user)\n    const post = useSelector(state => state.postState.post)\n\n    //refs\n    const refImagePost = useRef()\n\n    // Modal \n    const [show, setShow] = useState(false)\n    const closeDeleteModal = () => setShow(false)\n    const openDeleteModal = () => setShow(true)\n\n\n    //useState\n    //const [post, setPost] = useState(null)\n    //inp\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [fullText, setFullText] = useState('')\n    const [image, setImage] = useState(null)\n    const [checkedImg, setChekedImg] = useState()\n    const [errorForm, setError] = useState({ error: false, message: '' })\n\n\n    const formError = (text) => {\n        setError({ error: true, message: text })\n        setTimeout(() => setError({ error: false, message: '', success: false }), 1600)\n    }\n\n    //useDispatch\n    const dispatch = useDispatch()\n\n    //History\n    const history = useHistory()\n\n    //useParams\n    const { id } = useParams()\n\n\n    //Effect and func\n\n    //?Edit...................................................................................................................\n\n    //checkImage or post\n    function checkImage(imageSrc, good, bad) {\n        const img = new Image();\n        img.src = imageSrc;\n        img.onload = good;\n        img.onerror = bad;\n    }\n    useEffect(() => {\n        if (id && post) {\n            checkImage(\n                `https://nodejs-test-api-blog.herokuapp.com${post.image}`,\n                () => { setChekedImg(`https://nodejs-test-api-blog.herokuapp.com${post.image}`) },\n                () => { setChekedImg(defaultImage) }\n            )\n        }\n    }, [id, post])\n    //\n\n    const changePost = (id, token, title, description, fullText) => {\n        //Server.updatePost(id, token, title, description, fullText, history, user, formError)\n        dispatch(updatePost(id, title, description, fullText, history, user, formError))\n    }\n\n    const changePostImage = (img, id) => {\n        let formData = new FormData()\n        formData.append('image', img)\n        //Server.updatePostImage(id, token, formData, refImagePost)\n        dispatch(updatePostImage(id, formData, refImagePost))\n    }\n\n    const delPost = () => {\n        dispatch(deletePost(id, token, history))\n        closeDeleteModal()\n    }\n\n    //?Create...................................................................................................................\n\n    const createPost = () => {\n        //Server.createNewPost(title, fullText, description, token, formError, history, user._id)\n        //    .then(res => {\n        //if (image) {\n        //    changePostImage(image, res.data._id, token)\n        //}\n        //    })\n        dispatch(createNewPost(title, fullText, description, formError, history, user._id, image))\n    }\n\n    useEffect(() => {\n        if (id) {\n            dispatch(getPost(id))\n        }\n    }, [Server, dispatch, id])\n\n    //useEffect(() => {\n    //    if (id) {\n    //        Server.getPost(id)\n    //            .then(res => {\n    //                dispatch(loaded())\n    //                setPost(res.data)\n    //            })\n    //            .catch(res => setPost(null))\n    //    } else {\n    //        setPost(null)\n    //    }\n    //}, [Server, dispatch, id])\n\n    if (loading && post) {\n        return <Spinner />\n    }\n\n    return (\n        <>\n            <div className='editor' onClick={() => console.log(post)}>\n                <ModalConfirm\n                    show={show}\n                    handleClose={closeDeleteModal}\n                    remove={delPost}\n                    label={'Are you sure you want to delete this post?'}\n                />\n                <div className='editor-body'>\n\n                    <div className=\"item\">\n                        <div className=\"item-post\">\n                            <div className=\"post-item-list\">\n                                {post && id && <button\n                                    className='menu-post delete'\n                                    onClick={() => openDeleteModal()}\n                                ><i className=\"fa fa-trash-o\"></i></button>}\n                                <div className=\"info-post\">\n                                    <div className='editor-header-post'>\n                                        <input type=\"text\"\n                                            title='Title your post'\n                                            className={`title editor-title ${errorForm.error && !title && 'border-error'}`}\n                                            placeholder={post && id ? post.title : 'Title your post'}\n                                            value={title}\n                                            onChange={(e) => setTitle(e.target.value)}\n                                        />\n                                    </div>\n                                    <div className='editor-description'>\n                                        <input\n                                            title='Description your post'\n                                            type=\"text\"\n                                            className={`editor-description ${errorForm.error && !description && 'border-error'}`}\n                                            placeholder={post && id ? post.description : 'Description your post'}\n                                            value={description}\n                                            onChange={(e) => setDescription(e.target.value)}\n                                        />\n                                    </div>\n                                    <div className='editor-image'>\n                                        {post && id\n                                            ? <img src={checkedImg} alt='post_image' className=\"post-image\" ref={refImagePost} />\n                                            : <img src={defimg} alt='post_img' className=\"post-image\" />\n                                        }\n                                        <label htmlFor='file-upload' className='inp-upload' >\n                                            <i className=\"fa fa-camera\"></i>\n                                            <input\n                                                type='file'\n                                                accept=\"image/*\"\n                                                id=\"file-upload\"\n                                                onChange={(e) => post && id ? changePostImage(e.target.files[0], id, token) : setImage(e.target.files[0])}\n                                            />\n                                        </label>\n                                    </div>\n                                    <div className='editor-full-text'>\n                                        <textarea\n                                            title='Full text your post'\n                                            className={`form-control editor-full-text ${errorForm.error && !fullText && 'border-error'}`}\n                                            rows=\"2\"\n                                            placeholder={post && id ? post.fullText : 'Full text your post'}\n                                            value={fullText}\n                                            onChange={(e) => setFullText(e.target.value)}\n                                        >\n                                        </textarea>\n\n                                    </div>\n                                    {id\n                                        ? <button className='save save-edit' onClick={() => changePost(id, token, title, description, fullText)}>Edit</button>\n                                        : <button className='btn-create' onClick={createPost}>Create post</button>\n                                    }\n                                    {errorForm.error && <p className={`form-error`}>{errorForm.message}</p>}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default WithServer()(CreateEditPost);"]},"metadata":{},"sourceType":"module"}