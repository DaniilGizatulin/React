{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/post-list/post-list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport ModalAuthorized from './modalAuthorized';\nimport { useHistory, useParams } from 'react-router';\nimport Spinner from '../spinner';\nimport Error from '../error';\nimport { loaded, fault, getFullPost } from '../../redux/posts/actions';\nimport { getPostUser } from '../../redux/user/actions';\nimport prof from '../../image/no-avatar.jpg';\nimport deletProf from '../../image/delete-user.jpg';\nimport defaultImage from '../../image/default-image.jpg';\nimport './post-list.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = ({\n  Server\n}) => {\n  _s();\n\n  //Hook\n  // useState\n  //const [post, setPost] = useState({});\n  //const [postUser, setPostUser] = useState({});\n  const [date, setDate] = useState('');\n  const [heart, setHeart] = useState('');\n  const [showModal, setShowModal] = useState('');\n  const [showLike, setShowLike] = useState(); //useDispatch & useSelector\n\n  const dispatch = useDispatch(); //new\n\n  const loading = useSelector(state => state.postState.loading);\n  const error = useSelector(state => state.postState.error); // useHistory & useParams\n\n  const history = useHistory();\n  const {\n    id\n  } = useParams(); //Ref\n\n  const refHeart = useRef();\n  const refAvatar = useRef();\n  const refImagePost = useRef(); //local\n\n  const isAuthorized = localStorage.getItem('token');\n  const isAuthorizedUser = JSON.parse(localStorage.getItem('user')); //DateCreated\n\n  const dateСorrector = postData => {\n    let date = postData;\n    let newDate = date.replace(/[T-Z]/g, ' ');\n    setDate(newDate.replace(/\\..*/, ''));\n  }; // If an authorized user has a like on a post\n\n\n  function saveLike(likedUser, e) {\n    const idxLike = likedUser.indexOf(isAuthorizedUser._id);\n\n    if (idxLike >= 0) {\n      setShowLike(true);\n    } else {\n      setShowLike(false);\n    }\n  } // Func get post and user\n  //useEffect(() => {\n  //    Server.getPost(id)\n  //        .then(res => {\n  //            dispatch(loaded())\n  //            setPost(res.data)\n  //            setHeart(res.data.likes.length)\n  //            if (isAuthorized) {\n  //                saveLike(res.data.likes, refHeart.current)\n  //            }\n  //            dateСorrector(res.data.dateCreated)\n  //            Server.getUser(res.data.postedBy)\n  //                .then(res => {\n  //                    setPostUser(res.data)\n  //                })\n  //        })\n  //        .catch(() => dispatch(fault()))\n  //    //eslint-disable-next-line react-hooks/exhaustive-deps\n  //}, [Server, id])\n  //!TEST>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n\n  const post = useSelector(state => state.postState.fullPost);\n  const postUser = useSelector(state => state.userState.postUser);\n  const [userError, setError] = useState(false);\n  useEffect(() => {\n    dispatch(getFullPost(id));\n\n    if (post._id) {\n      //setPost(fullPost)\n      setHeart(post.likes.length);\n\n      if (isAuthorized) {\n        saveLike(post.likes, refHeart.current);\n      }\n\n      dateСorrector(post.dateCreated);\n\n      if (!userError) {\n        dispatch(getPostUser(post.postedBy, setError)); //Server.getUser(fullPost.postedBy)\n        //    .then(res => setPostUser(res.data))\n        //    .catch(e => setError(true))\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [post, id, isAuthorized]); //!TEST>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n  // number of likes on the post\n\n  const postLike = e => {\n    Server.getPost(post._id).then(res => {\n      if (res.data.likes.length !== heart) {\n        setHeart(res.data.likes.length);\n        saveLike(res.data.likes, e);\n      }\n    });\n  }; // func setlike \n\n\n  async function setLike(id, token, e) {\n    await Server.setLikePost(id, token);\n    postLike(e);\n  } //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n  const [image, setImage] = useState({\n    userAvatar: prof,\n    postImage: defaultImage\n  });\n\n  function checkImage(imageSrc, good, bad) {\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = good;\n    img.onerror = bad;\n  }\n\n  useEffect(() => {\n    if (postUser._id) {\n      checkImage(`https://nodejs-test-api-blog.herokuapp.com${postUser.avatar}`, () => {\n        setImage({ ...image,\n          userAvatar: `https://nodejs-test-api-blog.herokuapp.com${postUser.avatar}`\n        });\n      }, () => {\n        setImage({ ...image,\n          userAvatar: prof\n        });\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [postUser._id]);\n  useEffect(() => {\n    if (post._id) {\n      checkImage(`https://nodejs-test-api-blog.herokuapp.com${post.image}`, () => {\n        setImage({ ...image,\n          postImage: `https://nodejs-test-api-blog.herokuapp.com${post.image}`\n        });\n      }, () => {\n        setImage({ ...image,\n          postImage: defaultImage\n        });\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [post._id]); //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n  if (loading || !post) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Error, {\n      message: 'No such post'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    onClick: () => console.log(postUser),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-post\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-item-list\",\n        children: [!userError ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: image.userAvatar,\n            className: \"post-user-avatar cntr\",\n            alt: \"prof\",\n            ref: refAvatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", postUser.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: deletProf,\n            className: \"post-user-avatar cntr\",\n            alt: \"prof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"delete-user\",\n            children: \" User has been deleted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this), isAuthorized && post.postedBy === isAuthorizedUser._id &&\n            /*#__PURE__*/\n            //<button className='btn-update-post ' onClick={() => history.push(`/editor-posts/${id}`)}>\n            //    Edit post\n            //</button>}\n            _jsxDEV(\"button\", {\n              className: \"btn-update-post \",\n              onClick: () => history.push(`/post-page/${id}`),\n              children: \"Edit post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: image.postImage,\n            alt: post.description,\n            className: \"post-image\",\n            ref: refImagePost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"full-text\",\n            children: post.fullText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"date\",\n              children: [\"DATE CREATE : \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 66\n              }, this), date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"interaction\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"like\",\n                onClick: () => {\n                  isAuthorized ? setLike(post._id, isAuthorized, refHeart.current) : setShowModal('show');\n                },\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  ref: refHeart,\n                  className: `fa fa-heart ${showLike ? 'liked' : 'offLiked'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 33\n              }, this), heart]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModalAuthorized, {\n      showModal: showModal,\n      setShowModal: setShowModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"Fvq/m7USzE4CVegNt+h06SQdK2M=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useHistory, useParams, useSelector, useSelector];\n});\n\n_c = PostList;\nexport default WithServer()(PostList);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/post-list/post-list.js"],"names":["React","useEffect","useRef","useState","useSelector","useDispatch","WithServer","ModalAuthorized","useHistory","useParams","Spinner","Error","loaded","fault","getFullPost","getPostUser","prof","deletProf","defaultImage","PostList","Server","date","setDate","heart","setHeart","showModal","setShowModal","showLike","setShowLike","dispatch","loading","state","postState","error","history","id","refHeart","refAvatar","refImagePost","isAuthorized","localStorage","getItem","isAuthorizedUser","JSON","parse","dateСorrector","postData","newDate","replace","saveLike","likedUser","e","idxLike","indexOf","_id","post","fullPost","postUser","userState","userError","setError","likes","length","current","dateCreated","postedBy","postLike","getPost","then","res","data","setLike","token","setLikePost","image","setImage","userAvatar","postImage","checkImage","imageSrc","good","bad","img","Image","src","onload","onerror","avatar","console","log","name","title","push","description","fullText"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport ModalAuthorized from './modalAuthorized'\nimport { useHistory, useParams } from 'react-router';\nimport Spinner from '../spinner';\nimport Error from '../error';\nimport { loaded, fault, getFullPost } from '../../redux/posts/actions'\nimport { getPostUser } from '../../redux/user/actions';\n\nimport prof from '../../image/no-avatar.jpg'\nimport deletProf from '../../image/delete-user.jpg'\nimport defaultImage from '../../image/default-image.jpg'\n\nimport './post-list.sass';\n\nconst PostList = ({ Server }) => {\n    //Hook\n\n    // useState\n    //const [post, setPost] = useState({});\n    //const [postUser, setPostUser] = useState({});\n    const [date, setDate] = useState('');\n    const [heart, setHeart] = useState('');\n    const [showModal, setShowModal] = useState('')\n    const [showLike, setShowLike] = useState();\n\n    //useDispatch & useSelector\n    const dispatch = useDispatch()\n    //new\n    const loading = useSelector(state => state.postState.loading)\n    const error = useSelector(state => state.postState.error)\n\n    // useHistory & useParams\n    const history = useHistory()\n    const { id } = useParams()\n\n    //Ref\n    const refHeart = useRef()\n    const refAvatar = useRef()\n    const refImagePost = useRef()\n\n    //local\n    const isAuthorized = localStorage.getItem('token');\n    const isAuthorizedUser = JSON.parse(localStorage.getItem('user'))\n\n    //DateCreated\n    const dateСorrector = (postData) => {\n        let date = postData\n        let newDate = date.replace(/[T-Z]/g, ' ')\n        setDate(newDate.replace(/\\..*/, ''))\n    }\n\n    // If an authorized user has a like on a post\n\n    function saveLike(likedUser, e) {\n        const idxLike = likedUser.indexOf(isAuthorizedUser._id)\n        if (idxLike >= 0) {\n            setShowLike(true)\n        } else {\n            setShowLike(false)\n        }\n    }\n\n    // Func get post and user\n    //useEffect(() => {\n    //    Server.getPost(id)\n    //        .then(res => {\n    //            dispatch(loaded())\n    //            setPost(res.data)\n    //            setHeart(res.data.likes.length)\n    //            if (isAuthorized) {\n    //                saveLike(res.data.likes, refHeart.current)\n    //            }\n    //            dateСorrector(res.data.dateCreated)\n    //            Server.getUser(res.data.postedBy)\n    //                .then(res => {\n    //                    setPostUser(res.data)\n    //                })\n    //        })\n    //        .catch(() => dispatch(fault()))\n    //    //eslint-disable-next-line react-hooks/exhaustive-deps\n    //}, [Server, id])\n    //!TEST>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n    const post = useSelector(state => state.postState.fullPost)\n    const postUser = useSelector(state => state.userState.postUser)\n    const [userError, setError] = useState(false)\n    useEffect(() => {\n        dispatch(getFullPost(id))\n        if (post._id) {\n            //setPost(fullPost)\n            setHeart(post.likes.length)\n            if (isAuthorized) {\n                saveLike(post.likes, refHeart.current)\n            }\n            dateСorrector(post.dateCreated)\n            if (!userError) {\n                dispatch(getPostUser(post.postedBy, setError))\n                //Server.getUser(fullPost.postedBy)\n                //    .then(res => setPostUser(res.data))\n                //    .catch(e => setError(true))\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [post, id, isAuthorized])\n    //!TEST>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n    // number of likes on the post\n    const postLike = (e) => {\n        Server.getPost(post._id)\n            .then(res => {\n                if (res.data.likes.length !== heart) {\n                    setHeart(res.data.likes.length)\n                    saveLike(res.data.likes, e)\n                }\n            })\n    }\n\n    // func setlike \n    async function setLike(id, token, e) {\n        await Server.setLikePost(id, token)\n        postLike(e)\n    }\n\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    const [image, setImage] = useState({ userAvatar: prof, postImage: defaultImage })\n    function checkImage(imageSrc, good, bad) {\n        const img = new Image();\n        img.src = imageSrc;\n        img.onload = good;\n        img.onerror = bad;\n    }\n\n    useEffect(() => {\n        if (postUser._id) {\n            checkImage(\n                `https://nodejs-test-api-blog.herokuapp.com${postUser.avatar}`,\n                () => { setImage({ ...image, userAvatar: `https://nodejs-test-api-blog.herokuapp.com${postUser.avatar}` }) },\n                () => { setImage({ ...image, userAvatar: prof }) }\n            )\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [postUser._id])\n    useEffect(() => {\n        if (post._id) {\n            checkImage(\n                `https://nodejs-test-api-blog.herokuapp.com${post.image}`,\n                () => { setImage({ ...image, postImage: `https://nodejs-test-api-blog.herokuapp.com${post.image}` }) },\n                () => { setImage({ ...image, postImage: defaultImage }) }\n            )\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [post._id])\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    if (loading || !post) {\n        return <Spinner />\n    }\n\n    if (error) {\n        return <Error message={'No such post'} />\n    }\n\n    return (\n        <div className=\"item\" onClick={() => console.log(postUser)}>\n            <div className=\"item-post\">\n                <div className=\"post-item-list\">\n                    {!userError\n                        ?\n                        <div className=\"info-user\">\n                            <img src={image.userAvatar} className=\"post-user-avatar cntr\" alt=\"prof\" ref={refAvatar} />\n                            <p> {postUser.name}</p>\n                        </div>\n                        :\n                        <div className=\"info-user\">\n                            <img src={deletProf} className=\"post-user-avatar cntr\" alt=\"prof\" />\n                            <p className=\"delete-user\"> User has been deleted</p>\n                        </div>}\n                    <div className=\"info-post\">\n                        <div className='header-post'>\n                            <p className=\"title\">{post.title}</p>\n\n                            {isAuthorized && post.postedBy === isAuthorizedUser._id &&\n                                //<button className='btn-update-post ' onClick={() => history.push(`/editor-posts/${id}`)}>\n                                //    Edit post\n                                //</button>}\n                                <button className='btn-update-post ' onClick={() => history.push(`/post-page/${id}`)}>\n                                    Edit post\n                            </button>}\n\n                        </div>\n                        <img src={image.postImage} alt={post.description} className=\"post-image\" ref={refImagePost} />\n                        <p>{post.description}</p>\n                        <ul className=\"full-text\">{post.fullText}</ul>\n                        <div className=\"footer-post\">\n                            <span className=\"date\">DATE CREATE : <br />{date}</span>\n                            <div className=\"interaction\">\n                                <button\n                                    className='like'\n                                    onClick={() => {\n                                        isAuthorized\n                                            ? setLike(post._id, isAuthorized, refHeart.current)\n                                            : setShowModal('show')\n                                    }\n                                    }><i ref={refHeart} className={`fa fa-heart ${showLike ? 'liked' : 'offLiked'}`}></i></button>{heart}\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n            <ModalAuthorized showModal={showModal} setShowModal={setShowModal} />\n        </div>\n    )\n}\n\n\nexport default WithServer()(PostList);\n\n"]},"metadata":{},"sourceType":"module"}