{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/post-list/post-list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport WithServer from '../hoc';\nimport prof from './no-avatar.jpg';\nimport deletProf from './delete-user.jpg';\nimport './post-list.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = ({\n  Server\n}) => {\n  _s();\n\n  const post = useSelector(state => state.post);\n  const postUser = useSelector(state => state.postUser);\n  const [heart, setHeart] = useState(post.likes.length);\n  let date = post.dateCreated;\n  let newDate = date.replace(/[T-Z]/g, ' ');\n  newDate = newDate.replace(/\\..*/, '');\n  const isAuthorized = localStorage.getItem('token');\n\n  const postLike = async () => {\n    await Server.getPost(post._id).then(res => {\n      if (res.data.likes.length !== heart) {\n        setHeart(res.data.likes.length);\n      }\n    });\n  };\n\n  async function setLike(id, token) {\n    await Server.setLikePost(id, token);\n    postLike();\n  }\n\n  function redHeart(e) {\n    const someUser = JSON.parse(localStorage.getItem('user'));\n    const idxLike = post.likes.indexOf(someUser._id);\n\n    if (idxLike >= 0) {\n      console.log('user true');\n    } else {\n      console.log('user false');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    onClick: () => redHeart(),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-post\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-item-list\",\n        children: [postUser ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: prof,\n            className: \"user-avatar\",\n            alt: \"prof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", postUser.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: deletProf,\n            className: \"user-avatar\",\n            alt: \"prof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"delete-user\",\n            children: \" User has been deleted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-post\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"title\",\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"full-text\",\n            children: post.fullText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"date\",\n              children: newDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"interaction\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"like\",\n                onClick: e => {\n                  if (isAuthorized) {\n                    setLike(post._id, isAuthorized);\n                    e.target.classList.toggle(\"liked\");\n                  } else {\n                    alert('Login first');\n                  }\n                },\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-heart\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 33\n              }, this), heart]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"Mxa7IsL1MpcIaEjrTiQRma9BI34=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = PostList;\nexport default WithServer()(PostList);\nconst testlike = [\"12345\", '678910', '1112131415'];\nconsole.log(testlike.indexOf('12345'));\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/post-list/post-list.js"],"names":["React","useState","useSelector","WithServer","prof","deletProf","PostList","Server","post","state","postUser","heart","setHeart","likes","length","date","dateCreated","newDate","replace","isAuthorized","localStorage","getItem","postLike","getPost","_id","then","res","data","setLike","id","token","setLikePost","redHeart","e","someUser","JSON","parse","idxLike","indexOf","console","log","name","title","fullText","target","classList","toggle","alert","testlike"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport WithServer from '../hoc';\n\nimport prof from './no-avatar.jpg'\nimport deletProf from './delete-user.jpg'\nimport './post-list.css';\n\nconst PostList = ({ Server }) => {\n\n    const post = useSelector(state => state.post)\n    const postUser = useSelector(state => state.postUser)\n\n    const [heart, setHeart] = useState(post.likes.length)\n\n    let date = post.dateCreated\n    let newDate = date.replace(/[T-Z]/g, ' ')\n    newDate = newDate.replace(/\\..*/, '')\n\n    const isAuthorized = localStorage.getItem('token');\n\n    const postLike = async () => {\n        await Server.getPost(post._id)\n            .then(res => {\n                if (res.data.likes.length !== heart) {\n                    setHeart(res.data.likes.length)\n                }\n            })\n    }\n\n    async function setLike(id, token) {\n        await Server.setLikePost(id, token)\n        postLike()\n    }\n\n    function redHeart(e) {\n        const someUser = JSON.parse(localStorage.getItem('user'))\n        const idxLike = post.likes.indexOf(someUser._id)\n\n        if (idxLike >= 0) {\n            console.log('user true')\n        } else {\n            console.log('user false')\n        }\n\n    }\n\n    return (\n        <div className=\"item\" onClick={() => redHeart()}>\n            <div className=\"item-post\">\n                <div className=\"post-item-list\">\n                    {postUser\n                        ? <div className=\"info-user\">\n                            <img src={prof} className=\"user-avatar\" alt=\"prof\" />\n                            <p> {postUser.name}</p>\n                        </div>\n                        : <div className=\"info-user\">\n                            <img src={deletProf} className=\"user-avatar\" alt=\"prof\" />\n                            <p className=\"delete-user\"> User has been deleted</p>\n                        </div>}\n                    <div className=\"info-post\">\n                        <p className=\"title\">{post.title}</p>\n                        {/*<img src={pizza} alt=\"img\" className=\"post-image\" />*/}\n                        <ul className=\"full-text\">{post.fullText}</ul>\n                        <div className=\"footer-post\">\n                            <span className=\"date\">{newDate}</span>\n                            <div className=\"interaction\">\n                                <button\n                                    className='like'\n                                    onClick={(e) => {\n                                        if (isAuthorized) {\n                                            setLike(post._id, isAuthorized)\n                                            e.target.classList.toggle(\"liked\")\n\n                                        } else {\n                                            alert('Login first')\n                                        }\n                                    }\n                                    }><i className=\"fa fa-heart\"></i></button>{heart}\n                                {/*<button className='delete'><i className=\"fa fa-trash-o\"></i></button>*/}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WithServer()(PostList);\n\n\nconst testlike = [\"12345\", '678910', '1112131415']\nconsole.log(testlike.indexOf('12345'))"]},"metadata":{},"sourceType":"module"}