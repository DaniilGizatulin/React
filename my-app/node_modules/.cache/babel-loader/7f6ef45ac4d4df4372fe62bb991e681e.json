{"ast":null,"code":"import axios from 'axios';\nimport { setUser } from '../redux/user/actions';\nimport api from './api'; //const JWTToken = localStorage.getItem('token');\n//if (JWTToken) {\n//    axios.defaults.headers['Authorization'] = `Bearer ${JWTToken}`\n//}\n\nexport default class Server {\n  //!USER\n  //? Create user and authorization.................................................................................................\n  getUser(id) {\n    try {\n      const res = api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`);\n      return res;\n    } catch (e) {\n      return e.response;\n    }\n  } //?Update user and user avatar................................................................\n\n\n  async updateUserName(id, token, name, dispatch) {\n    await api({\n      method: 'PATCH',\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n      data: {\n        name\n      }\n    }).then(res => {\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch(setUser(res.data));\n    });\n  }\n\n  async updateUserAvatar(id, token, avatar, dispatch) {\n    await api.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n      headers: {\n        \"Content-Type\": ' multipart/form-data'\n      }\n    }).then(res => {\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch(setUser(res.data));\n    });\n  } //!POST\n  //?Get post(s) ...........................................................................................................................\n\n\n  async getAllPosts(skip = 0, limit = 10) {\n    try {\n      const res = await api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getPost(id) {\n    try {\n      const res = await api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //?Create new post........................................................................\n\n\n  async createNewPost(title, fullText, description, token, setError, history, id) {\n    try {\n      const res = await api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\", {\n        title,\n        fullText,\n        description\n      });\n\n      if (res.status === 200) {\n        setTimeout(() => history.push(`/user-posts/${id}`), 2000);\n      }\n\n      return res;\n    } catch (e) {\n      console.log(e.response); //setError({ error: true, message: e.response.data.error[0].message })\n\n      setError(e.response.data.error[0].message);\n    }\n  } //?Update post and post image................................................................\n\n\n  async updatePost(id, token, title, description, fullText, history, user, setError) {\n    await api({\n      method: 'PATCH',\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n      data: {\n        title,\n        description,\n        fullText\n      }\n    }).then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500)).catch(e => setError(e.response.data.error[0].message));\n  }\n\n  async updatePostImage(id, token, image, refImagePost) {\n    await api.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n      headers: {\n        \"Content-Type\": ' multipart/form-data'\n      }\n    }).then(res => {\n      this.getPost(id).then(res => this.getImage(refImagePost, res.data.image));\n    });\n  } //*Like post........................................................\n\n\n  async setLikePost(id, token) {\n    try {\n      const res = await api({\n        method: 'PUT',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //? get Image post and avatar ...................................................................................\n\n\n  async getImage(ref, image, defaultImage, alt) {\n    await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n      if (res.statusText === 'OK') {\n        ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n      }\n    }).catch(e => {\n      if (e.status >= 400) {\n        ref.current.src = defaultImage;\n        ref.current.alt = alt;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/services/server.js"],"names":["axios","setUser","api","Server","getUser","id","res","get","e","response","updateUserName","token","name","dispatch","method","url","data","then","localStorage","setItem","JSON","stringify","updateUserAvatar","avatar","put","headers","getAllPosts","skip","limit","console","log","getPost","createNewPost","title","fullText","description","setError","history","post","status","setTimeout","push","error","message","updatePost","user","_id","catch","updatePostImage","image","refImagePost","getImage","setLikePost","ref","defaultImage","alt","statusText","current","src"],"mappings":"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","sourcesContent":["\nimport axios from 'axios';\nimport { setUser } from '../redux/user/actions';\nimport api from './api';\n\n//const JWTToken = localStorage.getItem('token');\n//if (JWTToken) {\n//    axios.defaults.headers['Authorization'] = `Bearer ${JWTToken}`\n//}\nexport default class Server {\n\n    //!USER\n    //? Create user and authorization.................................................................................................\n\n    getUser(id) {\n        try {\n            const res = api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n            return res\n        } catch (e) {\n            return e.response\n        }\n    }\n\n\n    //?Update user and user avatar................................................................\n\n    async updateUserName(id, token, name, dispatch) {\n        await api({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n            data:\n            {\n                name,\n            },\n        })\n            .then(res => {\n                localStorage.setItem('user', JSON.stringify(res.data))\n                dispatch(setUser(res.data))\n            })\n    }\n\n    async updateUserAvatar(id, token, avatar, dispatch) {\n        await api.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n            headers: {\n                \"Content-Type\": ' multipart/form-data'\n            }\n        }\n        )\n            .then(res => {\n                localStorage.setItem('user', JSON.stringify(res.data))\n                dispatch(setUser(res.data))\n            })\n    }\n\n    //!POST\n    //?Get post(s) ...........................................................................................................................\n\n    async getAllPosts(skip = 0, limit = 10) {\n        try {\n            const res = await api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getPost(id) {\n        try {\n            const res = await api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //?Create new post........................................................................\n\n    async createNewPost(title, fullText, description, token, setError, history, id) {\n        try {\n            const res = await api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n                {\n                    title,\n                    fullText,\n                    description,\n                },\n            );\n            if (res.status === 200) {\n                setTimeout(() => history.push(`/user-posts/${id}`), 2000)\n            }\n            return res\n        } catch (e) {\n            console.log(e.response)\n            //setError({ error: true, message: e.response.data.error[0].message })\n            setError(e.response.data.error[0].message)\n        }\n    }\n\n\n    //?Update post and post image................................................................\n\n    async updatePost(id, token, title, description, fullText, history, user, setError) {\n        await api({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n            data:\n            {\n                title,\n                description,\n                fullText,\n            },\n        })\n            .then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500))\n            .catch(e => setError(e.response.data.error[0].message))\n    }\n\n    async updatePostImage(id, token, image, refImagePost) {\n        await api.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n            headers: {\n                \"Content-Type\": ' multipart/form-data'\n            }\n        }\n        )\n            .then(res => {\n                this.getPost(id)\n                    .then(res => this.getImage(refImagePost, res.data.image))\n            })\n\n\n    }\n\n    //*Like post........................................................\n\n    async setLikePost(id, token) {\n        try {\n            const res = await api({\n                method: 'PUT',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n            })\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //? get Image post and avatar ...................................................................................\n\n    async getImage(ref, image, defaultImage, alt) {\n        await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n                }\n            })\n            .catch(e => {\n                if (e.status >= 400) {\n                    ref.current.src = defaultImage;\n                    ref.current.alt = alt;\n                }\n            })\n    }\n\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}