{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/post-list/post-list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport ModalAuthorized from './modalAuthorized';\nimport { useHistory, useParams } from 'react-router';\nimport Spinner from '../spinner';\nimport Error from '../error'; //import { loaded, fault } from '../../actions';\n\nimport { loaded, fault, getFullPost, setPosts } from '../../redux/posts/actions';\nimport prof from './no-avatar.jpg';\nimport deletProf from './delete-user.jpg';\nimport defaultImage from './default-image.jpg';\nimport './post-list.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = ({\n  Server\n}) => {\n  _s();\n\n  const defaultAvatar = 'https://bizraise.pro/wp-content/uploads/2014/09/no-avatar-300x300.png'; //Hook\n  // useState\n  //const [post, setPost] = useState({});\n\n  const [postUser, setPostUser] = useState({});\n  const [date, setDate] = useState('');\n  const [heart, setHeart] = useState('');\n  const [modal, setModal] = useState('');\n  const [showLike, setShowLike] = useState(); //useDispatch & useSelector\n\n  const dispatch = useDispatch(); //new\n\n  const loading = useSelector(state => state.postState.loading);\n  const error = useSelector(state => state.postState.error); // useHistory & useParams\n\n  const history = useHistory();\n  const {\n    id\n  } = useParams(); //Ref\n\n  const refHeart = useRef();\n  const refAvatar = useRef();\n  const refImagePost = useRef(); //local\n\n  const isAuthorized = localStorage.getItem('token');\n  const isAuthorizedUser = JSON.parse(localStorage.getItem('user')); //DateCreated\n\n  const dateСorrector = postData => {\n    let date = postData;\n    let newDate = date.replace(/[T-Z]/g, ' ');\n    setDate(newDate.replace(/\\..*/, ''));\n  }; // If an authorized user has a like on a post\n\n\n  function saveLike(likedUser, e) {\n    const idxLike = likedUser.indexOf(isAuthorizedUser._id);\n\n    if (idxLike >= 0) {\n      setShowLike(true);\n    } else {\n      setShowLike(false);\n    }\n  } // Func get post and user\n  //useEffect(() => {\n  //    Server.getPost(id)\n  //        .then(res => {\n  //            dispatch(loaded())\n  //            setPost(res.data)\n  //            setHeart(res.data.likes.length)\n  //            if (isAuthorized) {\n  //                saveLike(res.data.likes, refHeart.current)\n  //            }\n  //            dateСorrector(res.data.dateCreated)\n  //            Server.getImage(refImagePost, res.data.image, defaultImage, '')\n  //            Server.getUser(res.data.postedBy)\n  //                .then(res => {\n  //                    Server.getImage(refAvatar, res.data.avatar, defaultAvatar)\n  //                    setPostUser(res.data)\n  //                })\n  //        })\n  //        .catch(() => dispatch(fault()))\n  //    //eslint-disable-next-line react-hooks/exhaustive-deps\n  //}, [Server, id])\n  //!Test\n\n\n  const post = useSelector(state => state.postState.fullPost);\n  useEffect(() => {\n    dispatch(getFullPost(id));\n    setHeart(post.likes.length);\n\n    if (isAuthorized) {\n      saveLike(post.likes, refHeart.current);\n    }\n\n    dateСorrector(post.dateCreated);\n    Server.getPost(post._id).then(res => Server.getImage(refImagePost, res.data.image, defaultImage, ''));\n    Server.getUser(post.postedBy).then(res => {\n      Server.getImage(refAvatar, res.data.avatar, defaultAvatar);\n      setPostUser(res.data);\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [Server, dispatch, id, isAuthorized]); // number of likes on the post\n\n  const postLike = e => {\n    Server.getPost(post._id).then(res => {\n      if (res.data.likes.length !== heart) {\n        setHeart(res.data.likes.length);\n        saveLike(res.data.likes, e);\n      }\n    });\n  }; // func setlike \n\n\n  async function setLike(id, token, e) {\n    await Server.setLikePost(id, token);\n    postLike(e);\n  }\n\n  if (loading || !post) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    onClick: () => console.log(post),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-post\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-item-list\",\n        children: [!postUser.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: prof,\n            className: \"post-user-avatar cntr\",\n            alt: \"prof\",\n            ref: refAvatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", postUser.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: deletProf,\n            className: \"post-user-avatar cntr\",\n            alt: \"prof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"delete-user\",\n            children: \" User has been deleted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this), isAuthorized && post.postedBy === isAuthorizedUser._id &&\n            /*#__PURE__*/\n            //<button className='btn-update-post ' onClick={() => history.push(`/editor-posts/${id}`)}>\n            //    Edit post\n            //</button>}\n            _jsxDEV(\"button\", {\n              className: \"btn-update-post \",\n              onClick: () => history.push(`/post-page/${id}`),\n              children: \"Edit post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: defaultImage,\n            alt: post.description,\n            className: \"post-image\",\n            ref: refImagePost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"full-text\",\n            children: post.fullText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"date\",\n              children: [\"DATE CREATE : \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 66\n              }, this), date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"interaction\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"like\",\n                onClick: () => {\n                  isAuthorized ? setLike(post._id, isAuthorized, refHeart.current) : setModal('show');\n                },\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  ref: refHeart,\n                  className: `fa fa-heart ${showLike ? 'liked' : 'offLiked'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 33\n              }, this), heart]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModalAuthorized, {\n      cl: modal,\n      setModal: setModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"pdcCeqTMtPHF0zch+8SJVqKsTk4=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useHistory, useParams, useSelector];\n});\n\n_c = PostList;\nexport default WithServer()(PostList);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/post-list/post-list.js"],"names":["React","useEffect","useRef","useState","useSelector","useDispatch","WithServer","ModalAuthorized","useHistory","useParams","Spinner","Error","loaded","fault","getFullPost","setPosts","prof","deletProf","defaultImage","PostList","Server","defaultAvatar","postUser","setPostUser","date","setDate","heart","setHeart","modal","setModal","showLike","setShowLike","dispatch","loading","state","postState","error","history","id","refHeart","refAvatar","refImagePost","isAuthorized","localStorage","getItem","isAuthorizedUser","JSON","parse","dateСorrector","postData","newDate","replace","saveLike","likedUser","e","idxLike","indexOf","_id","post","fullPost","likes","length","current","dateCreated","getPost","then","res","getImage","data","image","getUser","postedBy","avatar","postLike","setLike","token","setLikePost","console","log","name","title","push","description","fullText"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport ModalAuthorized from './modalAuthorized'\nimport { useHistory, useParams } from 'react-router';\nimport Spinner from '../spinner';\nimport Error from '../error';\n//import { loaded, fault } from '../../actions';\nimport { loaded, fault, getFullPost, setPosts } from '../../redux/posts/actions'\n\nimport prof from './no-avatar.jpg'\nimport deletProf from './delete-user.jpg'\nimport defaultImage from './default-image.jpg'\n\nimport './post-list.sass';\n\nconst PostList = ({ Server }) => {\n    const defaultAvatar = 'https://bizraise.pro/wp-content/uploads/2014/09/no-avatar-300x300.png'\n\n    //Hook\n\n    // useState\n    //const [post, setPost] = useState({});\n    const [postUser, setPostUser] = useState({});\n    const [date, setDate] = useState('');\n    const [heart, setHeart] = useState('');\n    const [modal, setModal] = useState('')\n    const [showLike, setShowLike] = useState();\n\n    //useDispatch & useSelector\n    const dispatch = useDispatch()\n    //new\n    const loading = useSelector(state => state.postState.loading)\n    const error = useSelector(state => state.postState.error)\n\n    // useHistory & useParams\n    const history = useHistory()\n    const { id } = useParams()\n\n    //Ref\n    const refHeart = useRef()\n    const refAvatar = useRef()\n    const refImagePost = useRef()\n\n    //local\n    const isAuthorized = localStorage.getItem('token');\n    const isAuthorizedUser = JSON.parse(localStorage.getItem('user'))\n\n    //DateCreated\n    const dateСorrector = (postData) => {\n        let date = postData\n        let newDate = date.replace(/[T-Z]/g, ' ')\n        setDate(newDate.replace(/\\..*/, ''))\n    }\n\n    // If an authorized user has a like on a post\n\n    function saveLike(likedUser, e) {\n        const idxLike = likedUser.indexOf(isAuthorizedUser._id)\n        if (idxLike >= 0) {\n            setShowLike(true)\n        } else {\n            setShowLike(false)\n        }\n    }\n\n    // Func get post and user\n    //useEffect(() => {\n    //    Server.getPost(id)\n    //        .then(res => {\n    //            dispatch(loaded())\n    //            setPost(res.data)\n    //            setHeart(res.data.likes.length)\n    //            if (isAuthorized) {\n    //                saveLike(res.data.likes, refHeart.current)\n    //            }\n    //            dateСorrector(res.data.dateCreated)\n    //            Server.getImage(refImagePost, res.data.image, defaultImage, '')\n    //            Server.getUser(res.data.postedBy)\n    //                .then(res => {\n    //                    Server.getImage(refAvatar, res.data.avatar, defaultAvatar)\n    //                    setPostUser(res.data)\n    //                })\n    //        })\n    //        .catch(() => dispatch(fault()))\n    //    //eslint-disable-next-line react-hooks/exhaustive-deps\n    //}, [Server, id])\n\n    //!Test\n    const post = useSelector(state => state.postState.fullPost)\n    useEffect(() => {\n        dispatch(getFullPost(id))\n        setHeart(post.likes.length)\n        if (isAuthorized) {\n            saveLike(post.likes, refHeart.current)\n        }\n        dateСorrector(post.dateCreated)\n        Server.getPost(post._id).then(res => Server.getImage(refImagePost, res.data.image, defaultImage, ''))\n        Server.getUser(post.postedBy)\n            .then(res => {\n                Server.getImage(refAvatar, res.data.avatar, defaultAvatar)\n                setPostUser(res.data)\n            })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [Server, dispatch, id, isAuthorized])\n\n    // number of likes on the post\n    const postLike = (e) => {\n        Server.getPost(post._id)\n            .then(res => {\n                if (res.data.likes.length !== heart) {\n                    setHeart(res.data.likes.length)\n                    saveLike(res.data.likes, e)\n                }\n            })\n    }\n\n    // func setlike \n    async function setLike(id, token, e) {\n        await Server.setLikePost(id, token)\n        postLike(e)\n    }\n\n    if (loading || !post) {\n        return <Spinner />\n    }\n\n    if (error) {\n        return <Error />\n    }\n\n\n\n    return (\n        <div className=\"item\" onClick={() => console.log(post)}>\n            <div className=\"item-post\">\n                <div className=\"post-item-list\">\n                    {!postUser.error\n                        ?\n                        <div className=\"info-user\">\n                            <img src={prof} className=\"post-user-avatar cntr\" alt=\"prof\" ref={refAvatar} />\n                            <p> {postUser.name}</p>\n                        </div>\n                        :\n                        <div className=\"info-user\">\n                            <img src={deletProf} className=\"post-user-avatar cntr\" alt=\"prof\" />\n                            <p className=\"delete-user\"> User has been deleted</p>\n                        </div>}\n                    <div className=\"info-post\">\n                        <div className='header-post'>\n                            <p className=\"title\">{post.title}</p>\n\n                            {isAuthorized && post.postedBy === isAuthorizedUser._id &&\n                                //<button className='btn-update-post ' onClick={() => history.push(`/editor-posts/${id}`)}>\n                                //    Edit post\n                                //</button>}\n                                <button className='btn-update-post ' onClick={() => history.push(`/post-page/${id}`)}>\n                                    Edit post\n                            </button>}\n\n                        </div>\n                        <img src={defaultImage} alt={post.description} className=\"post-image\" ref={refImagePost} />\n                        <p>{post.description}</p>\n                        <ul className=\"full-text\">{post.fullText}</ul>\n                        <div className=\"footer-post\">\n                            <span className=\"date\">DATE CREATE : <br />{date}</span>\n                            <div className=\"interaction\">\n                                <button\n                                    className='like'\n                                    onClick={() => {\n                                        isAuthorized\n                                            ? setLike(post._id, isAuthorized, refHeart.current)\n                                            : setModal('show')\n                                    }\n                                    }><i ref={refHeart} className={`fa fa-heart ${showLike ? 'liked' : 'offLiked'}`}></i></button>{heart}\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n            <ModalAuthorized cl={modal} setModal={setModal} />\n        </div>\n    )\n}\n\n\nexport default WithServer()(PostList);\n\n"]},"metadata":{},"sourceType":"module"}