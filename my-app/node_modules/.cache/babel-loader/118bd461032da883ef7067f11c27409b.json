{"ast":null,"code":"import axios from 'axios';\nimport { fault, addUser } from '../actions';\nexport default class Server {\n  //async loginUser(email, password) {\n  //    try {\n  //        const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n  //            email,\n  //            password,\n  //        });\n  //        return res\n  //    } catch (e) {\n  //        console.log(e.response);\n  //    }\n  //}\n  async loginUser(email, password, nav, dispatch) {\n    await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n      email,\n      password\n    }).then(res => {\n      localStorage.setItem('token', res.data.token);\n\n      if (localStorage.getItem('token')) {\n        this.authorizationUser(localStorage.getItem('token')).then(res => {\n          dispatch(addUser(res.data));\n          let saveUser = JSON.stringify(res.data);\n          localStorage.setItem('user', saveUser);\n        });\n      }\n    }).catch(e => {\n      nav('/login');\n      dispatch(fault());\n    });\n  }\n\n  async authorizationUser(token) {\n    try {\n      const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n\n      return _res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async createNewUser(email, password, name, history, dispatch) {\n    try {\n      await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n        email,\n        password,\n        name\n      }).then(res => setTimeout(() => history.push('/login'), 500)).catch(e => dispatch(fault()));\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getAllUsers() {\n    try {\n      const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users');\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getAllPosts(skip = 0, limit = 10) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getPost(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getUser(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`);\n      return res;\n    } catch (e) {\n      return e.response;\n    }\n  }\n\n  async setLikePost(id, token) {\n    try {\n      const res = await axios({\n        method: 'PUT',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getImage(ref, image, defaultImage, alt) {\n    await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n      if (res.statusText === 'OK') {\n        ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n      }\n    }).catch(e => {\n      if (e.status >= 400) {\n        ref.current.src = defaultImage;\n        ref.current.alt = alt;\n      }\n    });\n  }\n\n  async deletePost(id, token) {\n    try {\n      const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async deleteUser(id, token) {\n    try {\n      const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //?Create new uesr...............................................................\n\n\n  async createNewPost(title, fullText, description, token) {\n    try {\n      const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\", {\n        title,\n        fullText,\n        description\n      }, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      //console.log(e.response);\n      const error = e.response;\n      return error;\n    }\n  } //?Update user and user avatar................................................................\n\n\n  async updateUserName(id, token, name) {\n    try {\n      const res = await axios({\n        method: 'PATCH',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n        data: {\n          name\n        },\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async updateUserAvatar(id, token, avatar) {\n    try {\n      const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": ' multipart/form-data'\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //?Update post and post image................................................................\n  //async updatePost(id, token, title, description, fullText) {\n  //    try {\n  //        const res = await axios({\n  //            method: 'PATCH',\n  //            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n  //            data:\n  //            {\n  //                title,\n  //                description,\n  //                fullText,\n  //            },\n  //            headers:\n  //                { \"Authorization\": `Bearer ${token}` }\n  //        })\n  //        return res\n  //    } catch (e) {\n  //        console.log(e.response)\n  //    }\n  //}\n\n\n  async updatePost(id, token, title, description, fullText, history, user) {\n    await axios({\n      method: 'PATCH',\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n      data: {\n        title,\n        description,\n        fullText\n      },\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500));\n  } //async updatePostImage(id, token, image) {\n  //    try {\n  //        const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n  //            headers: {\n  //                \"Authorization\": `Bearer ${token}`,\n  //                \"Content-Type\": ' multipart/form-data'\n  //            }\n  //        }\n  //        )\n  //        return res\n  //    } catch (e) {\n  //        console.log(e.response)\n  //    }\n  //}\n\n\n  async updatePostImage(id, token, image) {\n    try {\n      const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": ' multipart/form-data'\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/services/server.js"],"names":["axios","fault","addUser","Server","loginUser","email","password","nav","dispatch","post","then","res","localStorage","setItem","data","token","getItem","authorizationUser","saveUser","JSON","stringify","catch","e","_res","get","headers","console","log","response","createNewUser","name","history","setTimeout","push","getAllUsers","getAllPosts","skip","limit","getPost","id","getUser","setLikePost","method","url","getImage","ref","image","defaultImage","alt","statusText","current","src","status","deletePost","delete","deleteUser","createNewPost","title","fullText","description","error","updateUserName","updateUserAvatar","avatar","put","updatePost","user","_id","updatePostImage"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { fault, addUser } from '../actions';\n\nexport default class Server {\n\n    //async loginUser(email, password) {\n    //    try {\n    //        const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n    //            email,\n    //            password,\n    //        });\n    //        return res\n    //    } catch (e) {\n    //        console.log(e.response);\n    //    }\n\n    //}\n\n    async loginUser(email, password, nav, dispatch) {\n        await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n            email,\n            password,\n        })\n            .then(res => {\n                localStorage.setItem('token', res.data.token)\n                if (localStorage.getItem('token')) {\n                    this.authorizationUser(localStorage.getItem('token'))\n                        .then(res => {\n                            dispatch(addUser(res.data))\n                            let saveUser = JSON.stringify(res.data)\n                            localStorage.setItem('user', saveUser)\n                        })\n                }\n            })\n            .catch(e => {\n                nav('/login')\n                dispatch(fault())\n            })\n\n    }\n\n    async authorizationUser(token) {\n        try {\n            const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n            return _res\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    async createNewUser(email, password, name, history, dispatch) {\n        try {\n            await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n                email,\n                password,\n                name\n            })\n                .then(res => setTimeout(() => history.push('/login'), 500))\n                .catch(e => dispatch(fault()))\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    async getAllUsers() {\n        try {\n            const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n            return res\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    async getAllPosts(skip = 0, limit = 10) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getPost(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n\n    async getUser(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n            return res\n        } catch (e) {\n            return e.response\n        }\n    }\n\n    async setLikePost(id, token) {\n        try {\n            const res = await axios({\n                method: 'PUT',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n                headers: {\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getImage(ref, image, defaultImage, alt) {\n        await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n                }\n            })\n            .catch(e => {\n                if (e.status >= 400) {\n                    ref.current.src = defaultImage;\n                    ref.current.alt = alt;\n                }\n            })\n    }\n\n    async deletePost(id, token) {\n        try {\n            const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } });\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n\n    async deleteUser(id, token) {\n        try {\n            const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } });\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //?Create new uesr...............................................................\n\n    async createNewPost(title, fullText, description, token) {\n        try {\n            const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n                {\n                    title,\n                    fullText,\n                    description,\n                },\n                {\n                    headers:\n                        { \"Authorization\": `Bearer ${token}` }\n                });\n            return res\n        } catch (e) {\n            //console.log(e.response);\n            const error = e.response\n            return error\n        }\n    }\n\n    //?Update user and user avatar................................................................\n\n    async updateUserName(id, token, name) {\n        try {\n            const res = await axios({\n                method: 'PATCH',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n                data:\n                {\n                    name,\n                },\n\n                headers:\n                    { \"Authorization\": `Bearer ${token}` }\n\n            });\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async updateUserAvatar(id, token, avatar) {\n        try {\n            const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": ' multipart/form-data'\n                }\n            }\n            )\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //?Update post and post image................................................................\n\n    //async updatePost(id, token, title, description, fullText) {\n    //    try {\n    //        const res = await axios({\n    //            method: 'PATCH',\n    //            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n    //            data:\n    //            {\n    //                title,\n    //                description,\n    //                fullText,\n    //            },\n\n    //            headers:\n    //                { \"Authorization\": `Bearer ${token}` }\n\n    //        })\n    //        return res\n    //    } catch (e) {\n    //        console.log(e.response)\n    //    }\n    //}\n\n    async updatePost(id, token, title, description, fullText, history, user) {\n        await axios({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n            data:\n            {\n                title,\n                description,\n                fullText,\n            },\n\n            headers:\n                { \"Authorization\": `Bearer ${token}` }\n\n        })\n            .then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500))\n    }\n\n\n    //async updatePostImage(id, token, image) {\n    //    try {\n    //        const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n    //            headers: {\n    //                \"Authorization\": `Bearer ${token}`,\n    //                \"Content-Type\": ' multipart/form-data'\n    //            }\n    //        }\n    //        )\n    //        return res\n    //    } catch (e) {\n    //        console.log(e.response)\n    //    }\n    //}\n\n    async updatePostImage(id, token, image) {\n        try {\n            const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": ' multipart/form-data'\n                }\n            }\n            )\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}