{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/CreateEdit-post/createEdit-post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ModalConfirm from '../modalConfirm';\nimport Spinner from '../spinner';\nimport Error from '../error';\nimport defaultImage from '../../image/default-image.jpg';\nimport defimg from '../../image/defimg.jpg';\nimport './createEdit-post.sass';\nimport { loaded, deletePost } from '../../redux/posts/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateEditPost = ({\n  Server\n}) => {\n  _s();\n\n  //useSelector\n  const error = useSelector(state => state.postState.error);\n  const loading = useSelector(state => state.postState.loading); //refs\n\n  const refImagePost = useRef();\n  const refMessage = useRef(); // Modal \n\n  const [show, setShow] = useState(false);\n\n  const closeDeleteModal = () => setShow(false);\n\n  const openDeleteModal = () => setShow(true); //useState\n\n\n  const [post, setPost] = useState(null); //inp\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [fullText, setFullText] = useState('');\n  const [message, setMessage] = useState('');\n  const [image, setImage] = useState(null);\n  const [errorForm, setError] = useState({\n    error: false,\n    message: ''\n  }); //const formError = () => {\n  //    if (!title && !description && !fullText) { setError({ error: true, message: 'Заполните все поля!' }) }\n  //    if (!title && !description && fullText) { setError({ error: true, message: 'Заполните выделенные поля!' }) }\n  //    if (!title && description && !fullText) { setError({ error: true, message: 'Заполните выделенные поля!' }) }\n  //    if (title && !description && !fullText) { setError({ error: true, message: 'Заполните выделенные поля!' }) }\n  //    if (!title && description && fullText) { setError({ error: true, message: 'Придумайте заголовок вашего поста' }) }\n  //    if (title && !description && fullText) { setError({ error: true, message: \"Опишите ваш пост\" }) }\n  //    if (title && description && !fullText) { setError({ error: true, message: \"Напишите содержимое вашего поста\" }) }\n  //    setTimeout(() => setError({ error: false, message: '' }), 1600)\n  //}\n  //useDispatch\n\n  const dispatch = useDispatch(); //History\n\n  const history = useHistory(); //useParams\n\n  const {\n    id\n  } = useParams(); // token \n\n  const token = localStorage.getItem('token');\n  const user = JSON.parse(localStorage.getItem('user')); //Effect and func\n  //?Edit...................................................................................................................\n\n  const messageResponse = (ref, message, color) => {\n    ref.current.classList.add(color);\n    setMessage(message);\n    setTimeout(() => setMessage(''), 1500);\n  };\n\n  const changePost = (id, token, title, description, fullText) => {\n    Server.updatePost(id, token, title, description, fullText, history, user).then(res => messageResponse(refMessage, 'Sucсess', 'green')).catch(e => messageResponse(refMessage, 'Something went wrong', 'red'));\n  };\n\n  const changePostImage = (img, id, token) => {\n    let formData = new FormData();\n    formData.append('image', img);\n    Server.updatePostImage(id, token, formData, refImagePost).then(res => messageResponse(refMessage, 'Sucсess', 'green')).catch(e => messageResponse(refMessage, 'Something went wrong', 'red'));\n  };\n\n  const delPost = () => {\n    dispatch(deletePost(id, token, history));\n    closeDeleteModal();\n  }; //?Create...................................................................................................................\n\n\n  const createPost = () => {\n    //formError()\n    Server.createNewPost(title, fullText, description, token, setError).then(res => {\n      if (image) {\n        changePostImage(image, res.data._id, token);\n      } //res.status >= 400 && setMessage(res.data.error[0].message)\n      //res.status === 200 && setTimeout(() => history.push(`/user-posts/${user._id}`), 2000)\n\n    });\n  };\n\n  useEffect(() => {\n    if (id) {\n      Server.getPost(id).then(res => {\n        dispatch(loaded());\n        setPost(res.data);\n        Server.getImage(refImagePost, res.data.image, defaultImage, '');\n      }).catch(res => setPost(null));\n    } else {\n      setPost(null);\n    }\n  }, [Server, dispatch, id]);\n\n  if (loading && post) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor\",\n      onClick: () => console.log(errorForm),\n      children: [/*#__PURE__*/_jsxDEV(ModalConfirm, {\n        show: show,\n        handleClose: closeDeleteModal,\n        remove: delPost,\n        label: 'Are you sure you want to delete this post?'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item-post\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-item-list\",\n              children: [post && id && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"menu-post delete\",\n                onClick: () => openDeleteModal(),\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-trash-o\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 34\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 48\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-post\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-header-post\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    title: \"Title your post\",\n                    className: `title editor-title ${errorForm.error && !title && 'border-error'}`,\n                    placeholder: post && id ? post.title : 'Title your post',\n                    value: title,\n                    onChange: e => setTitle(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-description\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    title: \"Description your post\",\n                    type: \"text\",\n                    className: `editor-description ${errorForm.error && !description && 'border-error'}`,\n                    placeholder: post && id ? post.description : 'Description your post',\n                    value: description,\n                    onChange: e => setDescription(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-image\",\n                  children: [post && id ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: defaultImage,\n                    alt: \"post_image\",\n                    className: \"post-image\",\n                    ref: refImagePost\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 47\n                  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: defimg,\n                    alt: \"post_img\",\n                    className: \"post-image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 47\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"file-upload\",\n                    className: \"inp-upload\",\n                    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"fa fa-camera\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 175,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"file\",\n                      accept: \"image/*\",\n                      id: \"file-upload\",\n                      onChange: e => post && id ? changePostImage(e.target.files[0], id, token) : setImage(e.target.files[0])\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 176,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-full-text\",\n                  children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                    title: \"Full text your post\",\n                    className: `form-control editor-full-text ${errorForm.error && !fullText && 'border-error'}`,\n                    rows: \"2\",\n                    placeholder: post && id ? post.fullText : 'Full text your post',\n                    value: fullText,\n                    onChange: e => setFullText(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 37\n                }, this), id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"save save-edit\",\n                  onClick: () => changePost(id, token, title, description, fullText),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 43\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-create\",\n                  onClick: createPost,\n                  children: \"Create post\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 43\n                }, this), errorForm.error && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"form-error\",\n                  children: errorForm.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(CreateEditPost, \"+NCknIRkuGHJx9FoWC8Ha1v1kMc=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useHistory, useParams];\n});\n\n_c = CreateEditPost;\nexport default WithServer()(CreateEditPost);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEditPost\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/CreateEdit-post/createEdit-post.js"],"names":["React","useEffect","useRef","useState","WithServer","useHistory","useParams","useDispatch","useSelector","ModalConfirm","Spinner","Error","defaultImage","defimg","loaded","deletePost","CreateEditPost","Server","error","state","postState","loading","refImagePost","refMessage","show","setShow","closeDeleteModal","openDeleteModal","post","setPost","title","setTitle","description","setDescription","fullText","setFullText","message","setMessage","image","setImage","errorForm","setError","dispatch","history","id","token","localStorage","getItem","user","JSON","parse","messageResponse","ref","color","current","classList","add","setTimeout","changePost","updatePost","then","res","catch","e","changePostImage","img","formData","FormData","append","updatePostImage","delPost","createPost","createNewPost","data","_id","getPost","getImage","console","log","target","value","files"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ModalConfirm from '../modalConfirm';\nimport Spinner from '../spinner'\nimport Error from '../error';\n\nimport defaultImage from '../../image/default-image.jpg'\nimport defimg from '../../image/defimg.jpg'\nimport './createEdit-post.sass'\n\nimport { loaded, deletePost } from '../../redux/posts/actions'\n\n\nconst CreateEditPost = ({ Server }) => {\n    //useSelector\n    const error = useSelector(state => state.postState.error)\n    const loading = useSelector(state => state.postState.loading)\n\n    //refs\n    const refImagePost = useRef()\n    const refMessage = useRef()\n\n    // Modal \n    const [show, setShow] = useState(false)\n    const closeDeleteModal = () => setShow(false)\n    const openDeleteModal = () => setShow(true)\n\n\n    //useState\n    const [post, setPost] = useState(null)\n    //inp\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [fullText, setFullText] = useState('')\n    const [message, setMessage] = useState('')\n    const [image, setImage] = useState(null)\n\n    const [errorForm, setError] = useState({ error: false, message: '' })\n    //const formError = () => {\n    //    if (!title && !description && !fullText) { setError({ error: true, message: 'Заполните все поля!' }) }\n    //    if (!title && !description && fullText) { setError({ error: true, message: 'Заполните выделенные поля!' }) }\n    //    if (!title && description && !fullText) { setError({ error: true, message: 'Заполните выделенные поля!' }) }\n    //    if (title && !description && !fullText) { setError({ error: true, message: 'Заполните выделенные поля!' }) }\n    //    if (!title && description && fullText) { setError({ error: true, message: 'Придумайте заголовок вашего поста' }) }\n    //    if (title && !description && fullText) { setError({ error: true, message: \"Опишите ваш пост\" }) }\n    //    if (title && description && !fullText) { setError({ error: true, message: \"Напишите содержимое вашего поста\" }) }\n    //    setTimeout(() => setError({ error: false, message: '' }), 1600)\n    //}\n\n    //useDispatch\n    const dispatch = useDispatch()\n\n    //History\n    const history = useHistory()\n\n    //useParams\n    const { id } = useParams()\n\n    // token \n    const token = localStorage.getItem('token')\n    const user = JSON.parse(localStorage.getItem('user'));\n\n    //Effect and func\n\n    //?Edit...................................................................................................................\n\n    const messageResponse = (ref, message, color) => {\n        ref.current.classList.add(color)\n        setMessage(message)\n        setTimeout(() => setMessage(''), 1500)\n    }\n\n    const changePost = (id, token, title, description, fullText) => {\n        Server.updatePost(id, token, title, description, fullText, history, user)\n            .then(res => messageResponse(refMessage, 'Sucсess', 'green'))\n            .catch(e => messageResponse(refMessage, 'Something went wrong', 'red'))\n    }\n\n    const changePostImage = (img, id, token) => {\n        let formData = new FormData()\n        formData.append('image', img)\n        Server.updatePostImage(id, token, formData, refImagePost)\n            .then(res => messageResponse(refMessage, 'Sucсess', 'green'))\n            .catch(e => messageResponse(refMessage, 'Something went wrong', 'red'))\n    }\n\n    const delPost = () => {\n        dispatch(deletePost(id, token, history))\n        closeDeleteModal()\n    }\n\n    //?Create...................................................................................................................\n\n    const createPost = () => {\n        //formError()\n        Server.createNewPost(title, fullText, description, token, setError)\n            .then(res => {\n                if (image) {\n                    changePostImage(image, res.data._id, token)\n                }\n                //res.status >= 400 && setMessage(res.data.error[0].message)\n                //res.status === 200 && setTimeout(() => history.push(`/user-posts/${user._id}`), 2000)\n            })\n    }\n\n\n    useEffect(() => {\n        if (id) {\n            Server.getPost(id)\n                .then(res => {\n                    dispatch(loaded())\n                    setPost(res.data)\n                    Server.getImage(refImagePost, res.data.image, defaultImage, '')\n                })\n                .catch(res => setPost(null))\n        } else {\n            setPost(null)\n        }\n    }, [Server, dispatch, id])\n\n    if (loading && post) {\n        return <Spinner />\n    }\n\n    if (error) {\n        return <Error />\n    }\n\n    return (\n        <>\n            <div className='editor' onClick={() => console.log(errorForm)}>\n                <ModalConfirm\n                    show={show}\n                    handleClose={closeDeleteModal}\n                    remove={delPost}\n                    label={'Are you sure you want to delete this post?'}\n                />\n                <div className='editor-body'>\n\n                    <div className=\"item\">\n                        <div className=\"item-post\">\n                            <div className=\"post-item-list\">\n                                {post && id && <button\n                                    className='menu-post delete'\n                                    onClick={() => openDeleteModal()}\n                                ><i className=\"fa fa-trash-o\"></i></button>}\n                                <div className=\"info-post\">\n                                    <div className='editor-header-post'>\n                                        <input type=\"text\"\n                                            title='Title your post'\n                                            className={`title editor-title ${errorForm.error && !title && 'border-error'}`}\n                                            placeholder={post && id ? post.title : 'Title your post'}\n                                            value={title}\n                                            onChange={(e) => setTitle(e.target.value)}\n                                        />\n                                    </div>\n                                    <div className='editor-description'>\n                                        <input\n                                            title='Description your post'\n                                            type=\"text\"\n                                            className={`editor-description ${errorForm.error && !description && 'border-error'}`}\n                                            placeholder={post && id ? post.description : 'Description your post'}\n                                            value={description}\n                                            onChange={(e) => setDescription(e.target.value)}\n                                        />\n                                    </div>\n                                    <div className='editor-image'>\n                                        {post && id\n                                            ? <img src={defaultImage} alt='post_image' className=\"post-image\" ref={refImagePost} />\n                                            : <img src={defimg} alt='post_img' className=\"post-image\" />\n                                        }\n                                        <label htmlFor='file-upload' className='inp-upload' >\n                                            <i className=\"fa fa-camera\"></i>\n                                            <input\n                                                type='file'\n                                                accept=\"image/*\"\n                                                id=\"file-upload\"\n                                                onChange={(e) => post && id ? changePostImage(e.target.files[0], id, token) : setImage(e.target.files[0])}\n                                            />\n                                        </label>\n                                    </div>\n                                    <div className='editor-full-text'>\n                                        <textarea\n                                            title='Full text your post'\n                                            className={`form-control editor-full-text ${errorForm.error && !fullText && 'border-error'}`}\n                                            rows=\"2\"\n                                            placeholder={post && id ? post.fullText : 'Full text your post'}\n                                            value={fullText}\n                                            onChange={(e) => setFullText(e.target.value)}\n                                        >\n                                        </textarea>\n\n                                    </div>\n                                    {/*<p className='message' ref={refMessage}>{message}</p>*/}\n                                    {id\n                                        ? <button className='save save-edit' onClick={() => changePost(id, token, title, description, fullText)}>Edit</button>\n                                        : <button className='btn-create' onClick={createPost}>Create post</button>\n                                    }\n                                    {errorForm.error && <p className='form-error'>{errorForm.message}</p>}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default WithServer()(CreateEditPost);"]},"metadata":{},"sourceType":"module"}