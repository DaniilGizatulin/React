{"ast":null,"code":"import axios from 'axios';\nimport { POSTS, LOADED, ERROR, DELETED, POST, ALL_POSTS, FULL_POST } from './types';\nimport api from '../../apiBase';\n\nconst getTestPosts = (skip = 0, limit = 10) => {\n  return dispatch => api.get(`/api/v1/posts?limit=${limit}&skip=${skip}`).then(res => {\n    dispatch({\n      type: POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst setPosts = posts => {\n  return dispatch => dispatch({\n    type: POSTS,\n    payload: posts\n  });\n};\n\nconst getPosts = (skip = 0, limit = 10) => {\n  return dispatch => api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`).then(res => {\n    dispatch({\n      type: POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst getAllPosts = (skip = 0, limit = 10) => {\n  return dispatch => api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`).then(res => {\n    dispatch({\n      type: ALL_POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  });\n};\n\nconst loaded = () => {\n  return dispatch => dispatch({\n    type: LOADED\n  });\n};\n\nconst fault = () => {\n  return dispatch => dispatch({\n    type: ERROR\n  });\n};\n\nconst deletePost = (id, token, history) => {\n  return dispatch => api.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: DELETED,\n      payload: true\n    });\n    setTimeout(() => {\n      history.push(`/list/page${1}/?limit=10&skip=${0}`);\n      dispatch({\n        type: DELETED,\n        payload: false\n      });\n    }, 500);\n  }); //.catch(e => )\n};\n\nconst getPost = id => {\n  return dispatch => api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: POST,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst getFullPost = id => {\n  return dispatch => api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: FULL_POST,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst setLikePost = id => {\n  return () => api({\n    method: 'PUT',\n    url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`\n  });\n};\n\nconst createNewPost = (postForm, setError, history, id, image) => {\n  return dispatch => api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\", { ...postForm\n  }).then(res => {\n    if (res.status === 200) {\n      if (image) {\n        let formData = new FormData();\n        formData.append('image', image);\n        dispatch(updatePostImage(res.data._id, formData));\n      }\n\n      setTimeout(() => history.push(`/user-posts/${id}`), 1500);\n    }\n  }).catch(e => {\n    console.log(e.response);\n    setError(e.response.data.error[0].message);\n  });\n};\n\nconst updatePostImage = (id, image, refImagePost) => {\n  return dispatch => api.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n    headers: {\n      \"Content-Type\": ' multipart/form-data'\n    }\n  }).then(res => {\n    console.log(res);\n    dispatch(getImage(refImagePost, res.data.image));\n  });\n};\n\nconst getImage = (ref, image, defaultImage, alt) => {\n  return () => axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n    if (res.statusText === 'OK') {\n      ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n    }\n  }).catch(e => {\n    if (e.status >= 400) {\n      ref.current.src = defaultImage;\n      ref.current.alt = alt;\n    }\n  });\n};\n\nconst updatePost = (id, postForm, history, user, setError) => {\n  return () => api({\n    method: 'PATCH',\n    url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n    data: { ...postForm\n    }\n  }).then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500)).catch(e => setError(e.response.data.error[0].message));\n};\n\nexport { getPosts, setPosts, loaded, fault, deletePost, getPost, getAllPosts, getFullPost, setLikePost, createNewPost, updatePostImage, updatePost, getTestPosts };","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/redux/posts/actions.js"],"names":["axios","POSTS","LOADED","ERROR","DELETED","POST","ALL_POSTS","FULL_POST","api","getTestPosts","skip","limit","dispatch","get","then","res","type","payload","data","catch","e","setPosts","posts","getPosts","getAllPosts","loaded","fault","deletePost","id","token","history","delete","setTimeout","push","getPost","getFullPost","setLikePost","method","url","createNewPost","postForm","setError","image","post","status","formData","FormData","append","updatePostImage","_id","console","log","response","error","message","refImagePost","put","headers","getImage","ref","defaultImage","alt","statusText","current","src","updatePost","user"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    POSTS,\n    LOADED,\n    ERROR,\n    DELETED,\n    POST,\n    ALL_POSTS,\n    FULL_POST\n} from './types'\n\nimport api from '../../apiBase';\n\nconst getTestPosts = (skip = 0, limit = 10) => {\n    return (dispatch) =>\n        api.get(`/api/v1/posts?limit=${limit}&skip=${skip}`)\n            .then(res => {\n                dispatch({ type: POSTS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n\n}\n\nconst setPosts = (posts) => {\n    return (dispatch) =>\n        dispatch({ type: POSTS, payload: posts })\n}\n\nconst getPosts = (skip = 0, limit = 10) => {\n    return (dispatch) =>\n        api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            .then(res => {\n                dispatch({ type: POSTS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n\n}\n\nconst getAllPosts = (skip = 0, limit = 10) => {\n    return (dispatch) =>\n        api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            .then(res => {\n                dispatch({ type: ALL_POSTS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n}\n\nconst loaded = () => {\n    return (dispatch) =>\n        dispatch({ type: LOADED })\n}\n\nconst fault = () => {\n    return (dispatch) =>\n        dispatch({ type: ERROR })\n}\n\nconst deletePost = (id, token, history) => {\n    return (dispatch) =>\n        api.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: DELETED, payload: true })\n                setTimeout(() => {\n                    history.push(`/list/page${1}/?limit=10&skip=${0}`)\n                    dispatch({ type: DELETED, payload: false })\n                }, 500)\n            })\n    //.catch(e => )\n\n}\n\nconst getPost = (id) => {\n    return (dispatch) =>\n        api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: POST, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n}\n\nconst getFullPost = (id) => {\n    return (dispatch) =>\n        api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: FULL_POST, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n}\n\nconst setLikePost = (id) => {\n    return () =>\n        api({\n            method: 'PUT',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n        })\n\n}\n\nconst createNewPost = (postForm, setError, history, id, image) => {\n    return (dispatch) =>\n        api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n            { ...postForm },\n        )\n            .then(res => {\n                if (res.status === 200) {\n                    if (image) {\n                        let formData = new FormData()\n                        formData.append('image', image)\n                        dispatch(updatePostImage(res.data._id, formData))\n                    }\n                    setTimeout(() => history.push(`/user-posts/${id}`), 1500)\n                }\n            })\n            .catch(e => {\n                console.log(e.response)\n                setError(e.response.data.error[0].message)\n            })\n}\n\nconst updatePostImage = (id, image, refImagePost) => {\n    return (dispatch) =>\n        api.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n            headers: {\n                \"Content-Type\": ' multipart/form-data'\n            }\n        })\n            .then(res => {\n                console.log(res)\n                dispatch(getImage(refImagePost, res.data.image))\n            })\n\n\n}\n\nconst getImage = (ref, image, defaultImage, alt) => {\n    return () =>\n        axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n                }\n            })\n            .catch(e => {\n                if (e.status >= 400) {\n                    ref.current.src = defaultImage;\n                    ref.current.alt = alt;\n                }\n            })\n}\n\nconst updatePost = (id, postForm, history, user, setError) => {\n    return () =>\n        api({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n            data:\n                { ...postForm },\n        })\n            .then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500))\n            .catch(e => setError(e.response.data.error[0].message))\n}\n\nexport {\n    getPosts,\n    setPosts,\n    loaded,\n    fault,\n    deletePost,\n    getPost,\n    getAllPosts,\n    getFullPost,\n    setLikePost,\n    createNewPost,\n    updatePostImage,\n    updatePost,\n    getTestPosts\n}\n"]},"metadata":{},"sourceType":"module"}