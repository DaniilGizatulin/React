{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/CreateEdit-post/createEdit-post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loaded, remove, fault } from '../../actions';\nimport ModalConfirm from '../modalConfirm';\nimport Spinner from '../spinner';\nimport Error from '../error';\nimport defaultImage from './default-image.jpg';\nimport './createEdit-post.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateEditPost = ({\n  Server\n}) => {\n  _s();\n\n  //useSelector\n  const error = useSelector(state => state.error);\n  const loading = useSelector(state => state.loading); //refs\n\n  const refImagePost = useRef();\n  const refMessage = useRef(); // Modal \n\n  const [show, setShow] = useState(false);\n\n  const closeDeleteModal = () => setShow(false);\n\n  const openDeleteModal = () => setShow(true); //useState\n\n\n  const [post, setPost] = useState(null); //inp\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [fullText, setFullText] = useState('');\n  const [message, setMessage] = useState('');\n  const [image, setImage] = useState(); //useDispatch\n\n  const dispatch = useDispatch(); //History\n\n  const history = useHistory(); //useParams\n\n  const {\n    id\n  } = useParams(); // token \n\n  const token = localStorage.getItem('token');\n  const user = JSON.parse(localStorage.getItem('user')); //Effect and func\n  //edit\n\n  const messageResponse = (ref, message, color) => {\n    ref.current.classList.add(color);\n    setMessage(message);\n    setTimeout(() => setMessage(''), 1500);\n  };\n\n  const changePost = (id, token, title, description, fullText) => {\n    Server.updatePost(id, token, title, description, fullText).then(res => {\n      console.log(res);\n      messageResponse(refMessage, 'Sucсess', 'green');\n      setTimeout(() => history.push(`/user-posts/${user._id}`), 1500);\n    }).catch(e => messageResponse(refMessage, 'Something went wrong', 'red'));\n  };\n\n  const testImage = e => {\n    //let formData = new FormData()\n    //formData.append('image', e.target.files[0])\n    setImage(e.target.files[0]);\n  };\n\n  const changePostImage = (img, id, token) => {\n    let formData = new FormData(); //formData.append('image', e.target.files[0])\n\n    formData.append('image', img);\n    Server.updatePostImage(id, token, formData).then(res => {\n      messageResponse(refMessage, 'Sucсess', 'green');\n      Server.getPost(id).then(res => Server.getImage(refImagePost, res.data.image));\n    }).catch(e => messageResponse(refMessage, 'Something went wrong', 'red'));\n  };\n\n  const delPost = () => {\n    Server.deletePost(id, token).then(res => {\n      closeDeleteModal();\n      dispatch(remove(true));\n      setTimeout(() => {\n        history.push(`/list/${0}`);\n        dispatch(remove(false));\n      }, 500);\n    });\n  }; //create \n\n\n  const createPost = () => {\n    Server.createNewPost(title, fullText, description, token).then(res => {\n      changePostImage(image, res.data._id, token);\n\n      if (res.status >= 400) {\n        setMessage(res.data.error[0].message);\n      }\n\n      if (res.status === 200) {\n        setTimeout(() => history.push(`/user-posts/${user._id}`), 1500);\n      }\n    }).catch(e => dispatch(fault()));\n  };\n\n  useEffect(() => {\n    if (id) {\n      Server.getPost(id).then(res => {\n        dispatch(loaded());\n        setPost(res.data);\n        Server.getImage(refImagePost, res.data.image, defaultImage, '');\n      }).catch(res => setPost(null));\n    }\n  }, [Server, dispatch, id]);\n\n  const form = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor\",\n    onClick: () => console.log(image),\n    children: [/*#__PURE__*/_jsxDEV(ModalConfirm, {\n      show: show,\n      handleClose: closeDeleteModal,\n      remove: delPost,\n      label: 'Are you sure you want to delete this post?'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-post\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-item-list\",\n            children: [id && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"menu-post delete\",\n              onClick: () => openDeleteModal(),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa fa-trash-o\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 30\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info-post\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"editor-header-post\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  title: \"Title your post\",\n                  className: \"title editor-title\",\n                  placeholder: post ? post.title : 'Title your post',\n                  value: title,\n                  onChange: e => setTitle(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"editor-description\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  title: \"Description your post\",\n                  type: \"text\",\n                  className: \" editor-description\",\n                  placeholder: post ? post.description : 'Description your post',\n                  value: description,\n                  onChange: e => setDescription(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"editor-image\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: defaultImage,\n                  alt: \"post_image\",\n                  className: \"post-image\",\n                  ref: refImagePost\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"file-upload\",\n                  className: \"inp-upload\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-camera\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    accept: \"image/*\",\n                    id: \"file-upload\" //onChange={(e) => changePostImage(e)}\n                    ,\n                    onChange: e => {\n                      testImage(e);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"editor-full-text\",\n                children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  title: \"Full text your post\",\n                  className: \"form-control editor-full-text\",\n                  rows: \"2\",\n                  placeholder: post ? post.fullText : 'Full text your post',\n                  value: fullText,\n                  onChange: e => setFullText(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"message\",\n                ref: refMessage,\n                children: message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 33\n              }, this), id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"save\",\n                onClick: () => changePost(id, token, title, description, fullText),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 39\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn-create\",\n                onClick: createPost,\n                children: \"Create post\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 39\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this); //if (loading) {\n  //    return <Spinner />\n  //}\n  //if (error) {\n  //    return <Error />\n  //}\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: form\n  }, void 0, false);\n};\n\n_s(CreateEditPost, \"aBpcI/D7nRx0JVFXuImgb9p3Nxo=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useHistory, useParams];\n});\n\n_c = CreateEditPost;\nexport default WithServer()(CreateEditPost);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEditPost\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/CreateEdit-post/createEdit-post.js"],"names":["React","useEffect","useRef","useState","WithServer","useHistory","useParams","useDispatch","useSelector","loaded","remove","fault","ModalConfirm","Spinner","Error","defaultImage","CreateEditPost","Server","error","state","loading","refImagePost","refMessage","show","setShow","closeDeleteModal","openDeleteModal","post","setPost","title","setTitle","description","setDescription","fullText","setFullText","message","setMessage","image","setImage","dispatch","history","id","token","localStorage","getItem","user","JSON","parse","messageResponse","ref","color","current","classList","add","setTimeout","changePost","updatePost","then","res","console","log","push","_id","catch","e","testImage","target","files","changePostImage","img","formData","FormData","append","updatePostImage","getPost","getImage","data","delPost","deletePost","createPost","createNewPost","status","form","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loaded, remove, fault } from '../../actions';\nimport ModalConfirm from '../modalConfirm';\nimport Spinner from '../spinner'\nimport Error from '../error';\n\nimport defaultImage from './default-image.jpg'\nimport './createEdit-post.sass'\n\nconst CreateEditPost = ({ Server }) => {\n    //useSelector\n    const error = useSelector(state => state.error)\n    const loading = useSelector(state => state.loading)\n\n    //refs\n    const refImagePost = useRef()\n    const refMessage = useRef()\n\n    // Modal \n    const [show, setShow] = useState(false)\n    const closeDeleteModal = () => setShow(false)\n    const openDeleteModal = () => setShow(true)\n\n\n    //useState\n    const [post, setPost] = useState(null)\n    //inp\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [fullText, setFullText] = useState('')\n    const [message, setMessage] = useState('')\n\n    const [image, setImage] = useState()\n\n    //useDispatch\n    const dispatch = useDispatch()\n\n    //History\n    const history = useHistory()\n\n    //useParams\n    const { id } = useParams()\n\n    // token \n    const token = localStorage.getItem('token')\n    const user = JSON.parse(localStorage.getItem('user'));\n\n    //Effect and func\n    //edit\n    const messageResponse = (ref, message, color) => {\n        ref.current.classList.add(color)\n        setMessage(message)\n        setTimeout(() => setMessage(''), 1500)\n    }\n\n    const changePost = (id, token, title, description, fullText) => {\n        Server.updatePost(id, token, title, description, fullText)\n            .then(res => {\n                console.log(res)\n                messageResponse(refMessage, 'Sucсess', 'green')\n                setTimeout(() => history.push(`/user-posts/${user._id}`), 1500)\n            })\n            .catch(e => messageResponse(refMessage, 'Something went wrong', 'red'))\n    }\n\n    const testImage = (e) => {\n        //let formData = new FormData()\n        //formData.append('image', e.target.files[0])\n        setImage(e.target.files[0])\n    }\n\n    const changePostImage = (img, id, token) => {\n        let formData = new FormData()\n        //formData.append('image', e.target.files[0])\n        formData.append('image', img)\n        Server.updatePostImage(id, token, formData)\n            .then(res => {\n                messageResponse(refMessage, 'Sucсess', 'green')\n                Server.getPost(id)\n                    .then(res => Server.getImage(refImagePost, res.data.image))\n            })\n            .catch(e => messageResponse(refMessage, 'Something went wrong', 'red'))\n    }\n\n    const delPost = () => {\n        Server.deletePost(id, token)\n            .then(res => {\n                closeDeleteModal()\n                dispatch(remove(true))\n                setTimeout(() => {\n                    history.push(`/list/${0}`)\n                    dispatch(remove(false))\n                }, 500)\n            })\n    }\n    //create \n    const createPost = () => {\n        Server.createNewPost(title, fullText, description, token)\n            .then(res => {\n                changePostImage(image, res.data._id, token)\n                if (res.status >= 400) {\n                    setMessage(res.data.error[0].message)\n                } if (res.status === 200) {\n                    setTimeout(() => history.push(`/user-posts/${user._id}`), 1500)\n                }\n            })\n            .catch(e => dispatch(fault()))\n    }\n\n    useEffect(() => {\n        if (id) {\n            Server.getPost(id)\n                .then(res => {\n                    dispatch(loaded())\n                    setPost(res.data)\n                    Server.getImage(refImagePost, res.data.image, defaultImage, '')\n                })\n                .catch(res => setPost(null))\n        }\n    }, [Server, dispatch, id])\n\n\n    const form =\n        <div className='editor' onClick={() => console.log(image)}>\n            <ModalConfirm\n                show={show}\n                handleClose={closeDeleteModal}\n                remove={delPost}\n                label={'Are you sure you want to delete this post?'}\n            />\n            <div className='editor-body'>\n\n                <div className=\"item\">\n                    <div className=\"item-post\">\n                        <div className=\"post-item-list\">\n                            {id && <button\n                                className='menu-post delete'\n                                onClick={() => openDeleteModal()}\n                            ><i className=\"fa fa-trash-o\"></i></button>}\n                            <div className=\"info-post\">\n                                <div className='editor-header-post'>\n                                    <input type=\"text\"\n                                        title='Title your post'\n                                        className=\"title editor-title\"\n                                        placeholder={post ? post.title : 'Title your post'}\n                                        value={title}\n                                        onChange={(e) => setTitle(e.target.value)}\n                                    />\n                                </div>\n                                <div className='editor-description'>\n                                    <input\n                                        title='Description your post'\n                                        type=\"text\"\n                                        className=\" editor-description\"\n                                        placeholder={post ? post.description : 'Description your post'}\n                                        value={description}\n                                        onChange={(e) => setDescription(e.target.value)}\n                                    />\n                                </div>\n                                <div className='editor-image'>\n                                    <img src={defaultImage} alt='post_image' className=\"post-image\" ref={refImagePost} />\n                                    <label htmlFor='file-upload' className='inp-upload' >\n                                        <i className=\"fa fa-camera\"></i>\n                                        <input\n                                            type='file'\n                                            accept=\"image/*\"\n                                            id=\"file-upload\"\n                                            //onChange={(e) => changePostImage(e)}\n                                            onChange={(e) => {\n                                                testImage(e)\n                                            }}\n                                        />\n                                    </label>\n                                </div>\n                                <div className='editor-full-text'>\n                                    <textarea\n                                        title='Full text your post'\n                                        className=\"form-control editor-full-text\"\n                                        rows=\"2\"\n                                        placeholder={post ? post.fullText : 'Full text your post'}\n                                        value={fullText}\n                                        onChange={(e) => setFullText(e.target.value)}\n                                    >\n                                    </textarea>\n\n                                </div>\n                                <p className='message' ref={refMessage}>{message}</p>\n                                {id\n                                    ? <button className='save' onClick={() => changePost(id, token, title, description, fullText)}>Edit</button>\n                                    : <button className='btn-create' onClick={createPost}>Create post</button>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n    //if (loading) {\n    //    return <Spinner />\n    //}\n\n    //if (error) {\n    //    return <Error />\n    //}\n\n    return (\n        <>\n            {form}\n        </>\n    )\n}\n\nexport default WithServer()(CreateEditPost);"]},"metadata":{},"sourceType":"module"}