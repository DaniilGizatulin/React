{"ast":null,"code":"import axios from 'axios';\nexport default class Server {\n  async loginUser(email, password) {\n    try {\n      const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n        email,\n        password\n      });\n      console.log('üëâ Returned data:', res);\n      return res;\n    } catch (e) {\n      console.log(`üò± Axios request failed: ${e}`);\n    }\n  }\n\n  async authorizationUser(token) {\n    try {\n      const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n\n      return _res;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async createNewUser(email, password, name) {\n    try {\n      const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n        email,\n        password,\n        name\n      });\n      console.log('üëâ Returned data:', res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n      console.log(`üò± Axios request failed: ${e}`);\n    }\n  }\n\n  async getAllUsers() {\n    try {\n      const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users');\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n      console.log(`üò± Axios request failed: ${e}`);\n    }\n  }\n\n  async getAllPosts() {\n    try {\n      const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=20');\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n      console.log(`üò± Axios request failed: ${e}`);\n    }\n  }\n\n  async getPost(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`);\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n      console.log(`üò± Axios request failed: ${e}`);\n    }\n  }\n\n  async getUser(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`);\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n      console.log(`üò± Axios request failed: ${e}`);\n    }\n  }\n\n  async setLikePost(id, token) {\n    try {\n      const res = await axios({\n        method: 'PUT',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getImage(ref, image, defaultImage) {\n    await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n      if (res.statusText === 'OK') {\n        ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n      }\n    }).catch(e => {\n      ref.current.src = null;\n    });\n  }\n\n  async deletePost(id, token) {\n    try {\n      const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      console.log(res);\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async createNewPost(title, fullText, description, token) {\n    try {\n      const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\", {\n        title,\n        fullText,\n        description\n      }, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/ubuntu/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/Daniil/FicusTest/my-app/src/services/server.js"],"names":["axios","Server","loginUser","email","password","res","post","console","log","e","authorizationUser","token","_res","get","headers","createNewUser","name","response","getAllUsers","getAllPosts","getPost","id","getUser","setLikePost","method","url","getImage","ref","image","defaultImage","then","statusText","current","src","catch","deletePost","delete","createNewPost","title","fullText","description"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport default class Server {\n\n    async loginUser(email, password) {\n        try {\n            const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n                email,\n                password,\n            });\n            console.log('üëâ Returned data:', res);\n            return res\n        } catch (e) {\n            console.log(`üò± Axios request failed: ${e}`);\n        }\n\n    }\n\n    async authorizationUser(token) {\n        try {\n            const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n            return _res\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    async createNewUser(email, password, name) {\n        try {\n            const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n                email,\n                password,\n                name\n            });\n            console.log('üëâ Returned data:', res);\n            return res\n        } catch (e) {\n            console.log(e.response);\n            console.log(`üò± Axios request failed: ${e}`);\n\n        }\n    }\n\n    async getAllUsers() {\n        try {\n            const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response);\n            console.log(`üò± Axios request failed: ${e}`);\n        }\n    }\n\n    async getAllPosts() {\n        try {\n            const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=20')\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response)\n            console.log(`üò± Axios request failed: ${e}`);\n        }\n    }\n\n    async getPost(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response)\n            console.log(`üò± Axios request failed: ${e}`);\n        }\n    }\n\n\n    async getUser(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response)\n            console.log(`üò± Axios request failed: ${e}`);\n        }\n    }\n\n    async setLikePost(id, token) {\n        try {\n            const res = await axios({\n                method: 'PUT',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n                headers: {\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getImage(ref, image, defaultImage) {\n        await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n                }\n            })\n            .catch(e => {\n                ref.current.src = null\n            })\n    }\n\n    async deletePost(id, token) {\n        try {\n            const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } });\n            console.log(res);\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async createNewPost(title, fullText, description, token) {\n        try {\n            const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n                {\n                    title,\n                    fullText,\n                    description\n                },\n                {\n                    headers:\n                        { \"Authorization\": `Bearer ${token}` }\n                });\n            console.log(res);\n            return res\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}