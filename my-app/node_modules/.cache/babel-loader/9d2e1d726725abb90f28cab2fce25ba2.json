{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/CreateEdit-post/createEdit-post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ModalConfirm from '../modalConfirm';\nimport Spinner from '../spinner';\nimport defaultImage from '../../image/default-image.jpg';\nimport defimg from '../../image/defimg.jpg';\nimport './createEdit-post.sass';\nimport { deletePost, createNewPost, updatePostImage, getPost, updatePost } from '../../redux/posts/actions'; //helpers func\n\nimport { checkImage } from '../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateEditPost = ({\n  Server\n}) => {\n  _s();\n\n  //useSelector\n  const loading = useSelector(state => state.postState.loading);\n  const token = useSelector(state => state.userState.isAuthorized);\n  const user = useSelector(state => state.userState.user);\n  const post = useSelector(state => state.postState.post); //refs\n\n  const refImagePost = useRef(); // Modal \n\n  const [show, setShow] = useState(false);\n\n  const closeDeleteModal = () => setShow(false);\n\n  const openDeleteModal = () => setShow(true); //useState\n\n\n  const [postForm, setForm] = useState({\n    title: '',\n    description: '',\n    fullText: ''\n  });\n  const [image, setImage] = useState(null);\n  const [checkedImg, setChekedImg] = useState();\n  const [errorForm, setError] = useState({\n    error: false,\n    message: ''\n  });\n\n  const formError = text => {\n    setError({\n      error: true,\n      message: text\n    });\n\n    if (!postForm.title || !postForm.description || !postForm.fullText) {\n      setTimeout(() => setError({\n        error: false,\n        message: '',\n        success: false\n      }), 1600);\n    }\n  }; //useDispatch\n\n\n  const dispatch = useDispatch(); //History\n\n  const history = useHistory(); //useParams\n\n  const {\n    id\n  } = useParams(); //Effect and func\n  //?Edit..........................................................\n\n  useEffect(() => {\n    if (id && post) {\n      checkImage(`https://nodejs-test-api-blog.herokuapp.com${post.image}`, () => {\n        setChekedImg(`https://nodejs-test-api-blog.herokuapp.com${post.image}`);\n      }, () => {\n        setChekedImg(defaultImage);\n      });\n    }\n  }, [id, post]);\n\n  const changePost = (id, postForm) => {\n    dispatch(updatePost(id, postForm, history, user, formError));\n  };\n\n  const changePostImage = (img, id) => {\n    let formData = new FormData();\n    formData.append('image', img);\n    dispatch(updatePostImage(id, formData, refImagePost));\n  };\n\n  const delPost = () => {\n    dispatch(deletePost(id, token, history));\n    closeDeleteModal();\n  }; //?Create..........................................................\n\n\n  const createPost = () => {\n    if (!postForm.title || !postForm.description || !postForm.fullText) {\n      formError('Заполните все поля!');\n    } else {\n      dispatch(createNewPost(postForm, formError, history, user._id, image));\n    }\n  };\n\n  useEffect(() => {\n    if (id) {\n      dispatch(getPost(id));\n    }\n  }, [dispatch, id]);\n\n  if (loading && post) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor\",\n      children: [/*#__PURE__*/_jsxDEV(ModalConfirm, {\n        show: show,\n        handleClose: closeDeleteModal,\n        remove: delPost,\n        label: 'Are you sure you want to delete this post?'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item-post\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post-item-list\",\n              children: [post && id && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"menu-post delete\",\n                onClick: () => openDeleteModal(),\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-trash-o\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 34\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 48\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-post\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-header-post\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    title: \"Title your post\",\n                    className: `title editor-title ${errorForm.error && !postForm.title && 'border-error'}`,\n                    placeholder: post && id ? post.title : 'Title your post',\n                    value: postForm.title,\n                    onChange: e => setForm({ ...postForm,\n                      title: e.target.value\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 127,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-description\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    title: \"Description your post\",\n                    type: \"text\",\n                    className: `editor-description ${errorForm.error && !postForm.description && 'border-error'}`,\n                    placeholder: post && id ? post.description : 'Description your post',\n                    value: postForm.description,\n                    onChange: e => setForm({ ...postForm,\n                      description: e.target.value\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-image\",\n                  children: [post && id ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: checkedImg,\n                    alt: \"post_image\",\n                    className: \"post-image\",\n                    ref: refImagePost\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 147,\n                    columnNumber: 47\n                  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: defimg,\n                    alt: \"post_img\",\n                    className: \"post-image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 47\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: \"file-upload\",\n                    className: \"inp-upload\",\n                    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"fa fa-camera\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 151,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"file\",\n                      accept: \"image/*\",\n                      id: \"file-upload\",\n                      onChange: e => post && id ? changePostImage(e.target.files[0], id) : setImage(e.target.files[0])\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 152,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 150,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"editor-full-text\",\n                  children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                    title: \"Full text your post\",\n                    className: `form-control editor-full-text ${errorForm.error && !postForm.fullText && 'border-error'}`,\n                    rows: \"2\",\n                    placeholder: post && id ? post.fullText : 'Full text your post',\n                    value: postForm.fullText,\n                    onChange: e => setForm({ ...postForm,\n                      fullText: e.target.value\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 37\n                }, this), id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"save save-edit\",\n                  onClick: () => changePost(id, postForm),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 43\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-create\",\n                  onClick: createPost,\n                  children: \"Create post\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 43\n                }, this), errorForm.error && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: `form-error`,\n                  children: errorForm.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(CreateEditPost, \"2j0d36Tw8SGKOPUYWNos36HM48k=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch, useHistory, useParams];\n});\n\n_c = CreateEditPost;\nexport default WithServer()(CreateEditPost);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEditPost\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/CreateEdit-post/createEdit-post.js"],"names":["React","useEffect","useRef","useState","WithServer","useHistory","useParams","useDispatch","useSelector","ModalConfirm","Spinner","defaultImage","defimg","deletePost","createNewPost","updatePostImage","getPost","updatePost","checkImage","CreateEditPost","Server","loading","state","postState","token","userState","isAuthorized","user","post","refImagePost","show","setShow","closeDeleteModal","openDeleteModal","postForm","setForm","title","description","fullText","image","setImage","checkedImg","setChekedImg","errorForm","setError","error","message","formError","text","setTimeout","success","dispatch","history","id","changePost","changePostImage","img","formData","FormData","append","delPost","createPost","_id","e","target","value","files"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ModalConfirm from '../modalConfirm';\nimport Spinner from '../spinner'\n\nimport defaultImage from '../../image/default-image.jpg'\nimport defimg from '../../image/defimg.jpg'\nimport './createEdit-post.sass'\n\nimport { deletePost, createNewPost, updatePostImage, getPost, updatePost } from '../../redux/posts/actions'\n\n//helpers func\nimport { checkImage } from '../../helpers'\n\nconst CreateEditPost = ({ Server }) => {\n    //useSelector\n    const loading = useSelector(state => state.postState.loading)\n    const token = useSelector(state => state.userState.isAuthorized);\n    const user = useSelector(state => state.userState.user)\n    const post = useSelector(state => state.postState.post)\n\n    //refs\n    const refImagePost = useRef()\n\n    // Modal \n    const [show, setShow] = useState(false)\n    const closeDeleteModal = () => setShow(false)\n    const openDeleteModal = () => setShow(true)\n\n\n    //useState\n    const [postForm, setForm] = useState({ title: '', description: '', fullText: '' })\n    const [image, setImage] = useState(null)\n    const [checkedImg, setChekedImg] = useState()\n    const [errorForm, setError] = useState({ error: false, message: '' })\n\n\n    const formError = (text) => {\n        setError({ error: true, message: text })\n        if (!postForm.title || !postForm.description || !postForm.fullText) {\n            setTimeout(() => setError({ error: false, message: '', success: false }), 1600)\n        }\n    }\n\n    //useDispatch\n    const dispatch = useDispatch()\n\n    //History\n    const history = useHistory()\n\n    //useParams\n    const { id } = useParams()\n\n\n    //Effect and func\n\n    //?Edit..........................................................\n\n    useEffect(() => {\n        if (id && post) {\n            checkImage(\n                `https://nodejs-test-api-blog.herokuapp.com${post.image}`,\n                () => { setChekedImg(`https://nodejs-test-api-blog.herokuapp.com${post.image}`) },\n                () => { setChekedImg(defaultImage) }\n            )\n        }\n    }, [id, post])\n\n    const changePost = (id, postForm) => {\n        dispatch(updatePost(id, postForm, history, user, formError))\n    }\n\n    const changePostImage = (img, id) => {\n        let formData = new FormData()\n        formData.append('image', img)\n        dispatch(updatePostImage(id, formData, refImagePost))\n    }\n\n    const delPost = () => {\n        dispatch(deletePost(id, token, history))\n        closeDeleteModal()\n    }\n\n    //?Create..........................................................\n\n    const createPost = () => {\n        if (!postForm.title || !postForm.description || !postForm.fullText) {\n            formError('Заполните все поля!')\n        } else {\n            dispatch(createNewPost(postForm, formError, history, user._id, image))\n        }\n    }\n\n    useEffect(() => {\n        if (id) {\n            dispatch(getPost(id))\n        }\n    }, [dispatch, id])\n\n\n    if (loading && post) {\n        return <Spinner />\n    }\n\n    return (\n        <>\n            <div className='editor' >\n                <ModalConfirm\n                    show={show}\n                    handleClose={closeDeleteModal}\n                    remove={delPost}\n                    label={'Are you sure you want to delete this post?'}\n                />\n                <div className='editor-body'>\n\n                    <div className=\"item\">\n                        <div className=\"item-post\">\n                            <div className=\"post-item-list\">\n                                {post && id && <button\n                                    className='menu-post delete'\n                                    onClick={() => openDeleteModal()}\n                                ><i className=\"fa fa-trash-o\"></i></button>}\n                                <div className=\"info-post\">\n                                    <div className='editor-header-post'>\n                                        <input type=\"text\"\n                                            title='Title your post'\n                                            className={`title editor-title ${errorForm.error && !postForm.title && 'border-error'}`}\n                                            placeholder={post && id ? post.title : 'Title your post'}\n                                            value={postForm.title}\n                                            onChange={(e) => setForm({ ...postForm, title: e.target.value })}\n                                        />\n                                    </div>\n                                    <div className='editor-description'>\n                                        <input\n                                            title='Description your post'\n                                            type=\"text\"\n                                            className={`editor-description ${errorForm.error && !postForm.description && 'border-error'}`}\n                                            placeholder={post && id ? post.description : 'Description your post'}\n                                            value={postForm.description}\n                                            onChange={(e) => setForm({ ...postForm, description: e.target.value })}\n                                        />\n                                    </div>\n                                    <div className='editor-image'>\n                                        {post && id\n                                            ? <img src={checkedImg} alt='post_image' className=\"post-image\" ref={refImagePost} />\n                                            : <img src={defimg} alt='post_img' className=\"post-image\" />\n                                        }\n                                        <label htmlFor='file-upload' className='inp-upload' >\n                                            <i className=\"fa fa-camera\"></i>\n                                            <input\n                                                type='file'\n                                                accept=\"image/*\"\n                                                id=\"file-upload\"\n                                                onChange={(e) => post && id ? changePostImage(e.target.files[0], id) : setImage(e.target.files[0])}\n                                            />\n                                        </label>\n                                    </div>\n                                    <div className='editor-full-text'>\n                                        <textarea\n                                            title='Full text your post'\n                                            className={`form-control editor-full-text ${errorForm.error && !postForm.fullText && 'border-error'}`}\n                                            rows=\"2\"\n                                            placeholder={post && id ? post.fullText : 'Full text your post'}\n                                            value={postForm.fullText}\n                                            onChange={(e) => setForm({ ...postForm, fullText: e.target.value })}\n                                        >\n                                        </textarea>\n\n                                    </div>\n                                    {id\n                                        ? <button\n                                            className='save save-edit'\n                                            onClick={() => changePost(id, postForm)}>\n                                            Edit</button>\n                                        : <button\n                                            className='btn-create'\n                                            onClick={createPost}>\n                                            Create post</button>\n                                    }\n                                    {errorForm.error && <p className={`form-error`}>{errorForm.message}</p>}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default WithServer()(CreateEditPost);"]},"metadata":{},"sourceType":"module"}