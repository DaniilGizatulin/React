{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/editor-profile/editor-profile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport Spinner from '../spinner';\nimport SpinnerImage from './spinner-image';\nimport ModalConfirm from '../modalConfirm';\nimport { useHistory } from 'react-router';\nimport './editor-profile.sass';\nimport { deleteUser } from '../../redux/user/actions';\nimport defaultAvatar from '../../image/no-avatar.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditorProfile = ({\n  Server\n}) => {\n  _s();\n\n  // Modal \n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true); //useState\n\n\n  const [name, setName] = useState('');\n  const [currentUser, setUser] = useState({});\n  const [loadingImage, setLoadingImage] = useState(false);\n  const [errorName, setError] = useState({\n    error: false,\n    message: ''\n  });\n  const [image, setImage] = useState(); //History\n\n  const history = useHistory(); //useDispatch\n\n  const dispatch = useDispatch(); //useSelector\n\n  const user = useSelector(state => state.userState.user); //useRef\n\n  const refAvatar = useRef();\n  useEffect(() => {\n    setUser(user);\n  }, [dispatch, user]);\n  const isAuthorized = localStorage.getItem('token');\n\n  const changeName = (id, token, name) => {\n    if (!name) {\n      setError({\n        error: true,\n        message: 'Заполните поле!'\n      });\n      setTimeout(() => setError({\n        error: false,\n        message: ''\n      }), 1700);\n    } else {\n      Server.updateUserName(id, token, name, dispatch).then(res => {\n        setUser({ ...currentUser,\n          name\n        });\n        setName('');\n      });\n    }\n  };\n\n  const updateAvatar = e => {\n    setLoadingImage(true);\n    let formData = new FormData();\n    formData.append('avatar', e.target.files[0]);\n    Server.updateUserAvatar(user._id, isAuthorized, formData, dispatch).then(res => setLoadingImage(false));\n  };\n\n  const delUser = () => {\n    dispatch(deleteUser(user._id, isAuthorized, history));\n    handleClose();\n  }; //if user = true - get avatar\n  //useEffect(() => {\n  //    if (user._id) {\n  //        Server.getImage(refAvatar, user.avatar, defaultAvatar, '')\n  //        dispatch(loaded())\n  //    }\n  //}, [Server, dispatch, user, refAvatar])\n\n\n  function checkImage(imageSrc, good, bad) {\n    const img = new Image();\n    img.src = imageSrc;\n    img.onload = good;\n    img.onerror = bad;\n  }\n\n  checkImage(`https://nodejs-test-api-blog.herokuapp.com${user.avatar}`, () => {\n    setImage(`https://nodejs-test-api-blog.herokuapp.com${user.avatar}`);\n  }, () => {\n    setImage(defaultAvatar);\n  });\n\n  if (!user._id) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-editor-profile\",\n    onClick: () => console.log(user),\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"editor-profile\",\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"editor-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-avatar\",\n          children: [loadingImage ? /*#__PURE__*/_jsxDEV(SpinnerImage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"img\",\n            ref: refAvatar,\n            src: image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 60\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"file-upload\",\n            className: \"inp-upload\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-camera\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \"image/*\",\n              id: \"file-upload\",\n              onChange: e => updateAvatar(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"editor-name\",\n          children: currentUser.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inp-name\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: `form-control ${errorName.error && 'shadow-error'}`,\n          placeholder: \"Change your name\",\n          title: \"Enter your new name\",\n          value: name,\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary save\",\n        onClick: () => changeName(user._id, isAuthorized, name),\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger remove\",\n        onClick: handleShow,\n        children: \"Delete user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), errorName.error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-name\",\n        children: errorName.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModalConfirm, {\n      show: show,\n      handleClose: handleClose,\n      remove: delUser,\n      label: 'Are you sure , what you want to delete the user?'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditorProfile, \"Sv2a+KmvoLQQO1mLjipta4S+fSU=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = EditorProfile;\nexport default WithServer()(EditorProfile);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorProfile\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/editor-profile/editor-profile.js"],"names":["React","useEffect","useRef","useState","useSelector","useDispatch","WithServer","Spinner","SpinnerImage","ModalConfirm","useHistory","deleteUser","defaultAvatar","EditorProfile","Server","show","setShow","handleClose","handleShow","name","setName","currentUser","setUser","loadingImage","setLoadingImage","errorName","setError","error","message","image","setImage","history","dispatch","user","state","userState","refAvatar","isAuthorized","localStorage","getItem","changeName","id","token","setTimeout","updateUserName","then","res","updateAvatar","e","formData","FormData","append","target","files","updateUserAvatar","_id","delUser","checkImage","imageSrc","good","bad","img","Image","src","onload","onerror","avatar","console","log","preventDefault","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,UAAP,MAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,uBAAP;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,aAAP,MAA0B,2BAA1B;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA;;AAElC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMc,WAAW,GAAG,MAAMD,OAAO,CAAC,KAAD,CAAjC;;AACA,QAAME,UAAU,GAAG,MAAMF,OAAO,CAAC,IAAD,CAAhC,CALkC,CAOlC;;;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACkB,WAAD,EAAcC,OAAd,IAAyBnB,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACsB,SAAD,EAAYC,QAAZ,IAAwBvB,QAAQ,CAAC;AAAEwB,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAAD,CAAtC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,EAAlC,CAZkC,CAclC;;AACA,QAAM4B,OAAO,GAAGrB,UAAU,EAA1B,CAfkC,CAiBlC;;AACA,QAAMsB,QAAQ,GAAG3B,WAAW,EAA5B,CAlBkC,CAoBlC;;AACA,QAAM4B,IAAI,GAAG7B,WAAW,CAAC8B,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBF,IAA1B,CAAxB,CArBkC,CAuBlC;;AACA,QAAMG,SAAS,GAAGlC,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,OAAO,CAACW,IAAD,CAAP;AACH,GAFQ,EAEN,CAACD,QAAD,EAAWC,IAAX,CAFM,CAAT;AAIA,QAAMI,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;;AAEA,QAAMC,UAAU,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYvB,IAAZ,KAAqB;AACpC,QAAI,CAACA,IAAL,EAAW;AACPO,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAR;AACAe,MAAAA,UAAU,CAAC,MAAMjB,QAAQ,CAAC;AAAEC,QAAAA,KAAK,EAAE,KAAT;AAAgBC,QAAAA,OAAO,EAAE;AAAzB,OAAD,CAAf,EAAgD,IAAhD,CAAV;AACH,KAHD,MAGO;AACHd,MAAAA,MAAM,CAAC8B,cAAP,CAAsBH,EAAtB,EAA0BC,KAA1B,EAAiCvB,IAAjC,EAAuCa,QAAvC,EACKa,IADL,CACUC,GAAG,IAAI;AACTxB,QAAAA,OAAO,CAAC,EAAE,GAAGD,WAAL;AAAkBF,UAAAA;AAAlB,SAAD,CAAP;AACAC,QAAAA,OAAO,CAAC,EAAD,CAAP;AACH,OAJL;AAKH;AACJ,GAXD;;AAaA,QAAM2B,YAAY,GAAIC,CAAD,IAAO;AACxBxB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,QAAIyB,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BH,CAAC,CAACI,MAAF,CAASC,KAAT,CAAe,CAAf,CAA1B;AACAvC,IAAAA,MAAM,CAACwC,gBAAP,CAAwBrB,IAAI,CAACsB,GAA7B,EAAkClB,YAAlC,EAAgDY,QAAhD,EAA0DjB,QAA1D,EACKa,IADL,CACWC,GAAD,IAAStB,eAAe,CAAC,KAAD,CADlC;AAEH,GAND;;AAQA,QAAMgC,OAAO,GAAG,MAAM;AAClBxB,IAAAA,QAAQ,CAACrB,UAAU,CAACsB,IAAI,CAACsB,GAAN,EAAWlB,YAAX,EAAyBN,OAAzB,CAAX,CAAR;AACAd,IAAAA,WAAW;AACd,GAHD,CArDkC,CA0DlC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAASwC,UAAT,CAAoBC,QAApB,EAA8BC,IAA9B,EAAoCC,GAApC,EAAyC;AACrC,UAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,IAAAA,GAAG,CAACE,GAAJ,GAAUL,QAAV;AACAG,IAAAA,GAAG,CAACG,MAAJ,GAAaL,IAAb;AACAE,IAAAA,GAAG,CAACI,OAAJ,GAAcL,GAAd;AACH;;AAEDH,EAAAA,UAAU,CACL,6CAA4CxB,IAAI,CAACiC,MAAO,EADnD,EAEN,MAAM;AAAEpC,IAAAA,QAAQ,CAAE,6CAA4CG,IAAI,CAACiC,MAAO,EAA1D,CAAR;AAAsE,GAFxE,EAGN,MAAM;AAAEpC,IAAAA,QAAQ,CAAClB,aAAD,CAAR;AAAyB,GAH3B,CAAV;;AAOA,MAAI,CAACqB,IAAI,CAACsB,GAAV,EAAe;AACX,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,0BAAf;AAA0C,IAAA,OAAO,EAAE,MAAMY,OAAO,CAACC,GAAR,CAAYnC,IAAZ,CAAzD;AAAA,4BACI;AAAM,MAAA,SAAS,EAAC,gBAAhB;AAAiC,MAAA,QAAQ,EAAGe,CAAD,IAAOA,CAAC,CAACqB,cAAF,EAAlD;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAC,eAAlB;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,qBACK9C,YAAY,gBAAG,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,kBAAH,gBAAsB;AAAK,YAAA,GAAG,EAAC,KAAT;AAAe,YAAA,GAAG,EAAEa,SAApB;AAA+B,YAAA,GAAG,EAAEP;AAApC;AAAA;AAAA;AAAA;AAAA,kBADvC,eAEI;AAAO,YAAA,OAAO,EAAC,aAAf;AAA6B,YAAA,SAAS,EAAC,YAAvC;AAAA,oCACI;AAAG,cAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AACI,cAAA,IAAI,EAAC,MADT;AAEI,cAAA,MAAM,EAAC,SAFX;AAGI,cAAA,EAAE,EAAC,aAHP;AAII,cAAA,QAAQ,EAAGmB,CAAD,IAAOD,YAAY,CAACC,CAAD;AAJjC;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAaI;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA,oBAA4B3B,WAAW,CAACF;AAAxC;AAAA;AAAA;AAAA;AAAA,gBAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAgBI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,SAAS,EAAG,gBAAeM,SAAS,CAACE,KAAV,IAAmB,cAAe,EAFjE;AAGI,UAAA,WAAW,EAAC,kBAHhB;AAII,UAAA,KAAK,EAAC,qBAJV;AAKI,UAAA,KAAK,EAAER,IALX;AAMI,UAAA,QAAQ,EAAG6B,CAAD,IAAO5B,OAAO,CAAC4B,CAAC,CAACI,MAAF,CAASkB,KAAV;AAN5B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ,eA2BI;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAyC,QAAA,OAAO,EAAE,MAAM9B,UAAU,CAACP,IAAI,CAACsB,GAAN,EAAWlB,YAAX,EAAyBlB,IAAzB,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BJ,eA4BI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,uBAAhC;AAAwD,QAAA,OAAO,EAAED,UAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BJ,EA6BKO,SAAS,CAACE,KAAV,iBAAmB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA,kBAA2BF,SAAS,CAACG;AAArC;AAAA;AAAA;AAAA;AAAA,cA7BxB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAgCI,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEb,IAApB;AAA0B,MAAA,WAAW,EAAEE,WAAvC;AAAoD,MAAA,MAAM,EAAEuC,OAA5D;AAAqE,MAAA,KAAK,EAAE;AAA5E;AAAA;AAAA;AAAA;AAAA,YAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoCH,CAvHD;;GAAM3C,a;UAecH,U,EAGCL,W,EAGJD,W;;;KArBXS,a;AAyHN,eAAeP,UAAU,GAAGO,aAAH,CAAzB","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport Spinner from '../spinner';\nimport SpinnerImage from './spinner-image'\nimport ModalConfirm from '../modalConfirm';\nimport { useHistory } from 'react-router';\n\nimport './editor-profile.sass';\n\nimport { deleteUser } from '../../redux/user/actions'\n\nimport defaultAvatar from '../../image/no-avatar.jpg'\n\nconst EditorProfile = ({ Server }) => {\n\n    // Modal \n    const [show, setShow] = useState(false)\n    const handleClose = () => setShow(false)\n    const handleShow = () => setShow(true)\n\n    //useState\n    const [name, setName] = useState('')\n    const [currentUser, setUser] = useState({})\n    const [loadingImage, setLoadingImage] = useState(false)\n    const [errorName, setError] = useState({ error: false, message: '' })\n    const [image, setImage] = useState()\n\n    //History\n    const history = useHistory()\n\n    //useDispatch\n    const dispatch = useDispatch()\n\n    //useSelector\n    const user = useSelector(state => state.userState.user)\n\n    //useRef\n    const refAvatar = useRef()\n\n    useEffect(() => {\n        setUser(user)\n    }, [dispatch, user])\n\n    const isAuthorized = localStorage.getItem('token');\n\n    const changeName = (id, token, name) => {\n        if (!name) {\n            setError({ error: true, message: 'Заполните поле!' })\n            setTimeout(() => setError({ error: false, message: '' }), 1700)\n        } else {\n            Server.updateUserName(id, token, name, dispatch)\n                .then(res => {\n                    setUser({ ...currentUser, name })\n                    setName('')\n                })\n        }\n    }\n\n    const updateAvatar = (e) => {\n        setLoadingImage(true)\n        let formData = new FormData()\n        formData.append('avatar', e.target.files[0])\n        Server.updateUserAvatar(user._id, isAuthorized, formData, dispatch)\n            .then((res) => setLoadingImage(false))\n    }\n\n    const delUser = () => {\n        dispatch(deleteUser(user._id, isAuthorized, history))\n        handleClose()\n    }\n\n    //if user = true - get avatar\n    //useEffect(() => {\n    //    if (user._id) {\n    //        Server.getImage(refAvatar, user.avatar, defaultAvatar, '')\n    //        dispatch(loaded())\n    //    }\n    //}, [Server, dispatch, user, refAvatar])\n\n    function checkImage(imageSrc, good, bad) {\n        const img = new Image();\n        img.src = imageSrc;\n        img.onload = good;\n        img.onerror = bad;\n    }\n\n    checkImage(\n        `https://nodejs-test-api-blog.herokuapp.com${user.avatar}`,\n        () => { setImage(`https://nodejs-test-api-blog.herokuapp.com${user.avatar}`) },\n        () => { setImage(defaultAvatar) }\n    )\n\n\n    if (!user._id) {\n        return <Spinner />\n    }\n    return (\n        <div className='container-editor-profile' onClick={() => console.log(user)}>\n            <form className='editor-profile' onSubmit={(e) => e.preventDefault()}>\n                <header className='editor-header'>\n                    <div className='editor-avatar'>\n                        {loadingImage ? <SpinnerImage /> : <img alt='img' ref={refAvatar} src={image} />}\n                        <label htmlFor='file-upload' className='inp-upload' >\n                            <i className=\"fa fa-camera\"></i>\n                            <input\n                                type='file'\n                                accept=\"image/*\"\n                                id=\"file-upload\"\n                                onChange={(e) => updateAvatar(e)}\n                            />\n                        </label>\n                    </div>\n                    <p className='editor-name'>{currentUser.name}</p>\n                </header>\n                <div className='inp-name'>\n                    <label >Name:</label>\n                    <input\n                        type=\"text\"\n                        className={`form-control ${errorName.error && 'shadow-error'}`}\n                        placeholder=\"Change your name\"\n                        title='Enter your new name'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                </div>\n                <button className='btn btn-primary save' onClick={() => changeName(user._id, isAuthorized, name)}>Save</button>\n                <button type='button' className='btn btn-danger remove' onClick={handleShow}>Delete user</button>\n                {errorName.error && <p className='error-name'>{errorName.message}</p>}\n            </form>\n            <ModalConfirm show={show} handleClose={handleClose} remove={delUser} label={'Are you sure , what you want to delete the user?'} />\n        </div>\n    )\n}\n\nexport default WithServer()(EditorProfile);"]},"metadata":{},"sourceType":"module"}