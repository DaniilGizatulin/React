{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/post-list-item/post-list-item.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Spinner from '../spinner';\nimport SimpleSnackbar from '../snackbar';\nimport Error from '../error';\nimport './post-list-item.sass';\nimport { getPosts } from '../../redux/posts/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostListItem = ({\n  Server\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  //useParams\n  function useQuery() {\n    _s();\n\n    return new URLSearchParams(useLocation().search);\n  }\n\n  _s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n    return [useLocation];\n  });\n\n  let query = useQuery();\n  let skip = query.get('skip');\n  let limit = query.get('limit'); //useSelector\n  //new\n\n  const postOnPage = useSelector(state => state.postState.postOnPage);\n  const loading = useSelector(state => state.postState.loading);\n  const error = useSelector(state => state.postState.error);\n  const deletePost = useSelector(state => state.postState.deletePost);\n  const allPosts = useSelector(state => state.postState.allPosts); //useDispatch\n\n  const dispatch = useDispatch(); //useState\n\n  const [countBtn, setCountBtn] = useState([]);\n  const [activeNum, setActiveNum] = useState(+skip); //useHistory\n\n  const history = useHistory();\n\n  const navHistory = url => {\n    history.push(url);\n  };\n\n  useEffect(() => {\n    dispatch(getPosts(skip, limit));\n  }, [skip, limit, dispatch]);\n  useEffect(() => {\n    if (!loading && allPosts.length > 0) {\n      setCountBtn(allPosts.filter((item, i) => allPosts[i / 10]));\n    }\n  }, [allPosts, loading]);\n  let idx = 0; //const postList = postOnPage.map((postItem, i) => {\n  //    idx++\n  //    return (\n  //        <div className=\"post\" key={idx}>\n  //            <div className=\"post-list-item\">\n  //                <div className=\"cards\">\n  //                    <p className=\"title\">{postItem.title}</p>\n  //                    <ul className=\"full-text\">{postItem.description}</ul>\n  //                    <div className=\"full-post\">\n  //                        <button\n  //                            className='view'\n  //                            onClick={() => navHistory(`/post/${postItem._id}`)}>\n  //                            View\n  //                        </button>\n  //                    </div>\n  //                </div>\n  //            </div>\n  //        </div>\n  //    )\n  //})\n\n  let ord = 1;\n  const [cardList, setCardList] = useState(postOnPage.map(c => {\n    return { ...c,\n      order: ord++\n    };\n  }));\n  const [currentCard, setCurrentCard] = useState(null);\n\n  const dragStartHandler = (e, card) => {\n    setCurrentCard(card);\n  };\n\n  const dragEndHandler = e => {\n    e.target.style.background = 'white';\n  };\n\n  const dragOverHandler = e => {\n    e.preventDefault();\n    e.target.style.background = 'lightgrey';\n  };\n\n  const dropHandler = (e, card) => {\n    e.preventDefault();\n    setCardList(cardList.map(c => {\n      if (c.id === car.id) {\n        return { ...c,\n          order: currentCard.order\n        };\n      }\n\n      if (c.id === currentCard.id) {\n        return { ...c,\n          order: card.order\n        };\n      }\n\n      return c;\n    }));\n    e.target.style.background = 'white';\n  };\n\n  const sortCard = (a, b) => {\n    if (a.order > b.order) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  const postList = cardList.sort(sortCard).map((postItem, i) => {\n    idx++;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onDragStart: e => dragStartHandler(e, postItem),\n        onDragLeave: e => dragEndHandler(e),\n        onDragEnd: e => dragEndHandler(e),\n        onDragOver: e => dragOverHandler(e),\n        onDrop: e => dropHandler(e, postItem),\n        className: \"post-list-item\",\n        draggable: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"title\",\n            children: postItem.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"full-text\",\n            children: postItem.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"full-post\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"view\",\n              onClick: () => navHistory(`/post/${postItem._id}`),\n              children: \"View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  });\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Error, {\n      message: \"Sorry, we are already working on a solution to this problem. ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: !loading ? postList : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), postList.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-posts\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-posts-overflow\",\n        children: countBtn.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn-nav-posts ${activeNum === i * 10 ? 'active-btn' : ''}`,\n            onClick: e => {\n              setActiveNum(i * 10);\n              navHistory(`/list/page${i + 1}/?limit=10&skip=${i * 10}`);\n            },\n            children: i + 1\n          }, idx++, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SimpleSnackbar, {\n      isSnackbar: deletePost,\n      color: \"success\",\n      message: 'Deleted successful!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(PostListItem, \"/9latYPhbUgI5O0rH1Rh7qRUVHU=\", true, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch, useHistory];\n});\n\n_c = PostListItem;\nexport default PostListItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostListItem\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/post-list-item/post-list-item.js"],"names":["React","useEffect","useState","useSelector","useDispatch","useHistory","useLocation","Spinner","SimpleSnackbar","Error","getPosts","PostListItem","Server","useQuery","URLSearchParams","search","query","skip","get","limit","postOnPage","state","postState","loading","error","deletePost","allPosts","dispatch","countBtn","setCountBtn","activeNum","setActiveNum","history","navHistory","url","push","length","filter","item","i","idx","ord","cardList","setCardList","map","c","order","currentCard","setCurrentCard","dragStartHandler","e","card","dragEndHandler","target","style","background","dragOverHandler","preventDefault","dropHandler","id","car","sortCard","a","b","postList","sort","postItem","title","description","_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Spinner from '../spinner';\nimport SimpleSnackbar from '../snackbar';\nimport Error from '../error';\n\nimport './post-list-item.sass';\n\nimport { getPosts } from '../../redux/posts/actions'\n\nconst PostListItem = ({ Server }) => {\n    //useParams\n    function useQuery() {\n        return new URLSearchParams(useLocation().search);\n    }\n    let query = useQuery()\n    let skip = query.get('skip')\n    let limit = query.get('limit')\n\n    //useSelector\n    //new\n    const postOnPage = useSelector(state => state.postState.postOnPage)\n    const loading = useSelector(state => state.postState.loading)\n    const error = useSelector(state => state.postState.error)\n    const deletePost = useSelector(state => state.postState.deletePost)\n    const allPosts = useSelector(state => state.postState.allPosts)\n\n    //useDispatch\n    const dispatch = useDispatch()\n\n    //useState\n    const [countBtn, setCountBtn] = useState([]);\n    const [activeNum, setActiveNum] = useState(+skip)\n\n    //useHistory\n    const history = useHistory();\n\n    const navHistory = (url) => {\n        history.push(url)\n    }\n\n    useEffect(() => {\n        dispatch(getPosts(skip, limit))\n    }, [skip, limit, dispatch])\n\n\n    useEffect(() => {\n        if (!loading && allPosts.length > 0) {\n            setCountBtn(allPosts.filter((item, i) => allPosts[i / 10]))\n        }\n    }, [allPosts, loading])\n\n\n    let idx = 0;\n\n    //const postList = postOnPage.map((postItem, i) => {\n    //    idx++\n\n    //    return (\n    //        <div className=\"post\" key={idx}>\n    //            <div className=\"post-list-item\">\n    //                <div className=\"cards\">\n    //                    <p className=\"title\">{postItem.title}</p>\n    //                    <ul className=\"full-text\">{postItem.description}</ul>\n    //                    <div className=\"full-post\">\n    //                        <button\n    //                            className='view'\n    //                            onClick={() => navHistory(`/post/${postItem._id}`)}>\n    //                            View\n    //                        </button>\n    //                    </div>\n    //                </div>\n    //            </div>\n    //        </div>\n\n    //    )\n    //})\n    let ord = 1\n    const [cardList, setCardList] = useState(postOnPage.map(c => {\n        return { ...c, order: ord++ }\n    }))\n    const [currentCard, setCurrentCard] = useState(null)\n    const dragStartHandler = (e, card) => {\n        setCurrentCard(card)\n    }\n\n    const dragEndHandler = (e) => {\n        e.target.style.background = 'white'\n    }\n\n    const dragOverHandler = (e) => {\n        e.preventDefault()\n        e.target.style.background = 'lightgrey'\n    }\n\n    const dropHandler = (e, card) => {\n        e.preventDefault()\n        setCardList(cardList.map((c) => {\n            if (c.id === car.id) {\n                return { ...c, order: currentCard.order }\n            }\n            if (c.id === currentCard.id) {\n                return { ...c, order: card.order }\n            }\n            return c\n        }))\n        e.target.style.background = 'white'\n    }\n\n    const sortCard = (a, b) => {\n        if (a.order > b.order) {\n            return 1\n        } else {\n            return -1\n        }\n    }\n\n    const postList = cardList.sort(sortCard).map((postItem, i) => {\n        idx++\n\n        return (\n            <div className=\"post\" key={idx}>\n                <div\n                    onDragStart={(e) => dragStartHandler(e, postItem)}\n                    onDragLeave={(e) => dragEndHandler(e)}\n                    onDragEnd={(e) => dragEndHandler(e)}\n                    onDragOver={(e) => dragOverHandler(e)}\n                    onDrop={(e) => dropHandler(e, postItem)}\n                    className=\"post-list-item\"\n                    draggable={true}>\n                    <div className=\"cards\">\n                        <p className=\"title\">{postItem.title}</p>\n                        <ul className=\"full-text\">{postItem.description}</ul>\n                        <div className=\"full-post\">\n                            <button\n                                className='view'\n                                onClick={() => navHistory(`/post/${postItem._id}`)}>\n                                View\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    })\n\n    if (error) {\n        return <Error message={\"Sorry, we are already working on a solution to this problem. ...\"} />\n    }\n\n    return (\n        <>\n            <div className=\"post-list\">\n                {\n                    !loading\n                        ? postList\n                        : <Spinner />\n                }\n            </div>\n            {postList.length !== 0 &&\n                <div className='nav-posts'>\n                    <div className='nav-posts-overflow'>\n                        {countBtn.map((item, i) => {\n                            return <button\n                                key={idx++}\n                                className={`btn-nav-posts ${activeNum === i * 10 ? 'active-btn' : ''}`}\n                                onClick={(e) => {\n                                    setActiveNum(i * 10)\n                                    navHistory(`/list/page${i + 1}/?limit=10&skip=${i * 10}`)\n                                }}\n                            >{i + 1}</button>\n                        })}\n                    </div>\n                </div>\n            }\n            <SimpleSnackbar isSnackbar={deletePost} color={\"success\"} message={'Deleted successful!'} />\n        </>\n    )\n}\n\n\nexport default PostListItem;\n\n"]},"metadata":{},"sourceType":"module"}