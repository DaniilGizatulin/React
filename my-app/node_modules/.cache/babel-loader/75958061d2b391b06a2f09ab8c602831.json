{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/post-list/post-list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ModalAuthorized from './component/modalAuthorized';\nimport { useHistory, useParams } from 'react-router';\nimport Spinner from '../spinner';\nimport Error from '../error';\nimport { getFullPost, setLikePost } from '../../redux/posts/actions';\nimport { getPostUser } from '../../redux/user/actions'; //style\n\nimport './post-list.sass'; //image\n\nimport prof from '../../image/no-avatar.jpg';\nimport deletProf from '../../image/delete-user.jpg';\nimport defaultImage from '../../image/default-image.jpg'; //helpers\n\nimport { checkImage } from '../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = ({\n  Server\n}) => {\n  _s();\n\n  //Hook\n  // useState\n  const [date, setDate] = useState('');\n  const [heart, setHeart] = useState('');\n  const [showModal, setShowModal] = useState('');\n  const [showLike, setShowLike] = useState();\n  const [image, setImage] = useState({\n    userAvatar: prof,\n    postImage: defaultImage\n  });\n  const [userError, setError] = useState(false); //useDispatch \n\n  const dispatch = useDispatch(); //useSelector\n\n  const loading = useSelector(state => state.postState.loading);\n  const error = useSelector(state => state.postState.error);\n  const post = useSelector(state => state.postState.fullPost);\n  const postUser = useSelector(state => state.userState.postUser);\n  const isAuthorizedUser = useSelector(state => state.userState.user);\n  const isAuthorized = useSelector(state => state.userState.isAuthorized); // useHistory & useParams\n\n  const history = useHistory();\n  const {\n    id\n  } = useParams(); //Ref\n\n  const refHeart = useRef();\n  const refAvatar = useRef();\n  const refImagePost = useRef(); //DateCreated\n\n  const dateСorrector = postDate => {\n    let date = postDate;\n    let newDate = date.replace(/[T-Z]/g, ' ');\n    setDate(newDate.replace(/\\..*/, ''));\n  }; // If an authorized user has a like on a post\n\n\n  function saveLike(likedUser, e) {\n    const idxLike = likedUser.indexOf(isAuthorizedUser._id);\n\n    if (idxLike >= 0) {\n      setShowLike(true);\n    } else {\n      setShowLike(false);\n    }\n  } // Func get post and user\n\n\n  useEffect(() => {\n    dispatch(getFullPost(id));\n\n    if (post._id) {\n      setHeart(post.likes.length);\n\n      if (isAuthorized) {\n        saveLike(post.likes, refHeart.current);\n      }\n\n      dateСorrector(post.dateCreated);\n\n      if (!userError) {\n        dispatch(getPostUser(post.postedBy, setError));\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [post, id, isAuthorized]); // number of likes on the post\n\n  const postLike = e => {\n    dispatch(getFullPost(id));\n\n    if (post.likes.length !== heart) {\n      setHeart(post.likes.length);\n      saveLike(post.likes, e);\n    }\n  }; // func setlike \n\n\n  function setLike(id, e) {\n    dispatch(setLikePost(id));\n    postLike(e);\n  }\n\n  useEffect(() => {\n    if (postUser._id) {\n      checkImage(`https://nodejs-test-api-blog.herokuapp.com${postUser.avatar}`, () => {\n        setImage({ ...image,\n          userAvatar: `https://nodejs-test-api-blog.herokuapp.com${postUser.avatar}`\n        });\n      }, () => {\n        setImage({ ...image,\n          userAvatar: prof\n        });\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [postUser._id]);\n  useEffect(() => {\n    if (post._id) {\n      checkImage(`https://nodejs-test-api-blog.herokuapp.com${post.image}`, () => {\n        setImage({ ...image,\n          postImage: `https://nodejs-test-api-blog.herokuapp.com${post.image}`\n        });\n      }, () => {\n        setImage({ ...image,\n          postImage: defaultImage\n        });\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [post._id]);\n\n  if (loading || !post._id) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Error, {\n      message: 'No such post'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-post\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-item-list\",\n        children: [!userError ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: image.userAvatar,\n            className: \"post-user-avatar cntr\",\n            alt: \"prof\",\n            ref: refAvatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", postUser.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: deletProf,\n            className: \"post-user-avatar cntr\",\n            alt: \"prof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"delete-user\",\n            children: \" User has been deleted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this), isAuthorized && post.postedBy === isAuthorizedUser._id && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-update-post \",\n              onClick: () => history.push(`/post-page/${id}`),\n              children: \"Edit post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: image.postImage,\n            alt: post.description,\n            className: \"post-image\",\n            ref: refImagePost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"full-text\",\n            children: post.fullText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"date\",\n              children: [\"DATE CREATE : \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 66\n              }, this), date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"interaction\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"like\",\n                onClick: () => {\n                  isAuthorized ? setLike(post._id, refHeart.current) : setShowModal('show');\n                },\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  ref: refHeart,\n                  className: `fa fa-heart ${showLike ? 'liked' : 'offLiked'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 33\n              }, this), heart]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModalAuthorized, {\n      showModal: showModal,\n      setShowModal: setShowModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"rUmdxQs+qriGJM4imFe1axIIw6Q=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useHistory, useParams];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/post-list/post-list.js"],"names":["React","useEffect","useRef","useState","useSelector","useDispatch","ModalAuthorized","useHistory","useParams","Spinner","Error","getFullPost","setLikePost","getPostUser","prof","deletProf","defaultImage","checkImage","PostList","Server","date","setDate","heart","setHeart","showModal","setShowModal","showLike","setShowLike","image","setImage","userAvatar","postImage","userError","setError","dispatch","loading","state","postState","error","post","fullPost","postUser","userState","isAuthorizedUser","user","isAuthorized","history","id","refHeart","refAvatar","refImagePost","dateСorrector","postDate","newDate","replace","saveLike","likedUser","e","idxLike","indexOf","_id","likes","length","current","dateCreated","postedBy","postLike","setLike","avatar","name","title","push","description","fullText"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ModalAuthorized from './component/modalAuthorized'\nimport { useHistory, useParams } from 'react-router';\nimport Spinner from '../spinner';\nimport Error from '../error';\nimport { getFullPost, setLikePost } from '../../redux/posts/actions'\nimport { getPostUser } from '../../redux/user/actions';\n//style\nimport './post-list.sass';\n//image\nimport prof from '../../image/no-avatar.jpg'\nimport deletProf from '../../image/delete-user.jpg'\nimport defaultImage from '../../image/default-image.jpg'\n//helpers\nimport { checkImage } from '../../helpers'\n\nconst PostList = ({ Server }) => {\n    //Hook\n\n    // useState\n    const [date, setDate] = useState('');\n    const [heart, setHeart] = useState('');\n    const [showModal, setShowModal] = useState('')\n    const [showLike, setShowLike] = useState();\n    const [image, setImage] = useState({ userAvatar: prof, postImage: defaultImage })\n    const [userError, setError] = useState(false)\n\n    //useDispatch \n    const dispatch = useDispatch()\n\n    //useSelector\n    const loading = useSelector(state => state.postState.loading)\n    const error = useSelector(state => state.postState.error)\n    const post = useSelector(state => state.postState.fullPost)\n    const postUser = useSelector(state => state.userState.postUser)\n    const isAuthorizedUser = useSelector(state => state.userState.user)\n    const isAuthorized = useSelector(state => state.userState.isAuthorized)\n\n    // useHistory & useParams\n    const history = useHistory()\n    const { id } = useParams()\n\n    //Ref\n    const refHeart = useRef()\n    const refAvatar = useRef()\n    const refImagePost = useRef()\n\n    //DateCreated\n    const dateСorrector = (postDate) => {\n        let date = postDate\n        let newDate = date.replace(/[T-Z]/g, ' ')\n        setDate(newDate.replace(/\\..*/, ''))\n    }\n\n    // If an authorized user has a like on a post\n    function saveLike(likedUser, e) {\n        const idxLike = likedUser.indexOf(isAuthorizedUser._id)\n        if (idxLike >= 0) {\n            setShowLike(true)\n        } else {\n            setShowLike(false)\n        }\n    }\n\n    // Func get post and user\n    useEffect(() => {\n        dispatch(getFullPost(id))\n        if (post._id) {\n            setHeart(post.likes.length)\n            if (isAuthorized) {\n                saveLike(post.likes, refHeart.current)\n            }\n            dateСorrector(post.dateCreated)\n            if (!userError) {\n                dispatch(getPostUser(post.postedBy, setError))\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [post, id, isAuthorized])\n\n\n    // number of likes on the post\n    const postLike = (e) => {\n        dispatch(getFullPost(id))\n        if (post.likes.length !== heart) {\n            setHeart(post.likes.length)\n            saveLike(post.likes, e)\n        }\n    }\n\n    // func setlike \n    function setLike(id, e) {\n        dispatch(setLikePost(id))\n        postLike(e)\n    }\n\n    useEffect(() => {\n        if (postUser._id) {\n            checkImage(\n                `https://nodejs-test-api-blog.herokuapp.com${postUser.avatar}`,\n                () => { setImage({ ...image, userAvatar: `https://nodejs-test-api-blog.herokuapp.com${postUser.avatar}` }) },\n                () => { setImage({ ...image, userAvatar: prof }) }\n            )\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [postUser._id])\n    useEffect(() => {\n        if (post._id) {\n            checkImage(\n                `https://nodejs-test-api-blog.herokuapp.com${post.image}`,\n                () => { setImage({ ...image, postImage: `https://nodejs-test-api-blog.herokuapp.com${post.image}` }) },\n                () => { setImage({ ...image, postImage: defaultImage }) }\n            )\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [post._id])\n\n\n    if (loading || !post._id) {\n        return <Spinner />\n    }\n\n    if (error) {\n        return <Error message={'No such post'} />\n    }\n\n    return (\n        <div className=\"item\">\n            <div className=\"item-post\">\n                <div className=\"post-item-list\">\n                    {!userError\n                        ?\n                        <div className=\"info-user\">\n                            <img src={image.userAvatar} className=\"post-user-avatar cntr\" alt=\"prof\" ref={refAvatar} />\n                            <p> {postUser.name}</p>\n                        </div>\n                        :\n                        <div className=\"info-user\">\n                            <img src={deletProf} className=\"post-user-avatar cntr\" alt=\"prof\" />\n                            <p className=\"delete-user\"> User has been deleted</p>\n                        </div>}\n                    <div className=\"info-post\">\n                        <div className='header-post'>\n                            <p className=\"title\">{post.title}</p>\n\n                            {isAuthorized && post.postedBy === isAuthorizedUser._id &&\n                                <button className='btn-update-post ' onClick={() => history.push(`/post-page/${id}`)}>\n                                    Edit post\n                            </button>}\n\n                        </div>\n                        <img src={image.postImage} alt={post.description} className=\"post-image\" ref={refImagePost} />\n                        <p>{post.description}</p>\n                        <ul className=\"full-text\">{post.fullText}</ul>\n                        <div className=\"footer-post\">\n                            <span className=\"date\">DATE CREATE : <br />{date}</span>\n                            <div className=\"interaction\">\n                                <button\n                                    className='like'\n                                    onClick={() => {\n                                        isAuthorized\n                                            ? setLike(post._id, refHeart.current)\n                                            : setShowModal('show')\n                                    }\n                                    }><i ref={refHeart} className={`fa fa-heart ${showLike ? 'liked' : 'offLiked'}`}></i></button>{heart}\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n            <ModalAuthorized showModal={showModal} setShowModal={setShowModal} />\n        </div>\n    )\n}\n\n\nexport default PostList;\n\n"]},"metadata":{},"sourceType":"module"}