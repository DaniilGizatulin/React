{"ast":null,"code":"import axios from 'axios';\nimport { POSTS, LOADED, ERROR, DELETED, POST, ALL_POSTS, FULL_POST } from './types';\nimport api from '../../services/api'; //const JWTToken = localStorage.getItem('token');\n//if (JWTToken) {\n//    axios.defaults.headers['Authorization'] = `Bearer ${JWTToken}`\n//}\n\nconst setPosts = posts => {\n  return dispatch => dispatch({\n    type: POSTS,\n    payload: posts\n  });\n};\n\nconst getPosts = (skip = 0, limit = 10) => {\n  return dispatch => api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`).then(res => {\n    dispatch({\n      type: POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst getAllPosts = (skip = 0, limit = 10) => {\n  return dispatch => api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`).then(res => {\n    dispatch({\n      type: ALL_POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  });\n};\n\nconst loaded = () => {\n  return dispatch => dispatch({\n    type: LOADED\n  });\n};\n\nconst fault = () => {\n  return dispatch => dispatch({\n    type: ERROR\n  });\n};\n\nconst deletePost = (id, token, history) => {\n  return dispatch => api.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: DELETED,\n      payload: true\n    });\n    setTimeout(() => {\n      history.push(`/list/page${1}/?limit=10&skip=${0}`);\n      dispatch({\n        type: DELETED,\n        payload: false\n      });\n    }, 500);\n  }); //.catch(e => )\n};\n\nconst getPost = id => {\n  return dispatch => api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: POST,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst getFullPost = id => {\n  return dispatch => api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: FULL_POST,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst setLikePost = id => {\n  return () => api({\n    method: 'PUT',\n    url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`\n  });\n};\n\nconst createNewPost = (title, fullText, description, setError, history, id, image) => {\n  return dispatch => api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\", {\n    title,\n    fullText,\n    description\n  }).then(res => {\n    if (res.status === 200) {\n      if (image) {\n        let formData = new FormData();\n        formData.append('image', image);\n        dispatch(updatePostImage(res.data._id, formData));\n      }\n\n      setTimeout(() => history.push(`/user-posts/${id}`), 2000);\n    }\n  }).catch(e => {\n    console.log(e.response);\n    setError(e.response.data.error[0].message);\n  });\n};\n\nconst updatePostImage = (id, image, refImagePost) => {\n  return dispatch => api.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n    headers: {\n      \"Content-Type\": ' multipart/form-data'\n    }\n  }).then(res => {\n    console.log(res);\n    dispatch(getImage(refImagePost, res.data.image));\n  });\n};\n\nconst getImage = (ref, image, defaultImage, alt) => {\n  return () => axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n    if (res.statusText === 'OK') {\n      ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n    }\n  }).catch(e => {\n    if (e.status >= 400) {\n      ref.current.src = defaultImage;\n      ref.current.alt = alt;\n    }\n  });\n};\n\nexport { getPosts, setPosts, loaded, fault, deletePost, getPost, getAllPosts, getFullPost, setLikePost, createNewPost, updatePostImage }; //! Если все норм работает , не забыть удалить!\n//const setPosts = (posts) => {\n//    return (dispatch) =>\n//        dispatch({ type: POSTS, payload: posts })\n//}\n//const getPosts = (skip = 0, limit = 10) => {\n//    return (dispatch) =>\n//        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n//            .then(res => {\n//                dispatch({ type: POSTS, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n//            .catch(e => dispatch({ type: ERROR }))\n//}\n//const getAllPosts = (skip = 0, limit = 10) => {\n//    return (dispatch) =>\n//        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n//            .then(res => {\n//                dispatch({ type: ALL_POSTS, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n//}\n//const loaded = () => {\n//    return (dispatch) =>\n//        dispatch({ type: LOADED })\n//}\n//const fault = () => {\n//    return (dispatch) =>\n//        dispatch({ type: ERROR })\n//}\n//const deletePost = (id, token, history) => {\n//    return (dispatch) =>\n//        axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n//            .then(res => {\n//                dispatch({ type: DELETED, payload: true })\n//                setTimeout(() => {\n//                    history.push(`/list/page${1}/?limit=10&skip=${0}`)\n//                    dispatch({ type: DELETED, payload: false })\n//                }, 500)\n//            })\n//    //.catch(e => )\n//}\n//const getPost = (id) => {\n//    return (dispatch) =>\n//        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n//            .then(res => {\n//                dispatch({ type: POST, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n//            .catch(e => dispatch({ type: ERROR }))\n//}\n//const getFullPost = (id) => {\n//    return (dispatch) =>\n//        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n//            .then(res => {\n//                dispatch({ type: FULL_POST, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n//            .catch(e => dispatch({ type: ERROR }))\n//}","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/redux/posts/actions.js"],"names":["axios","POSTS","LOADED","ERROR","DELETED","POST","ALL_POSTS","FULL_POST","api","setPosts","posts","dispatch","type","payload","getPosts","skip","limit","get","then","res","data","catch","e","getAllPosts","loaded","fault","deletePost","id","token","history","delete","setTimeout","push","getPost","getFullPost","setLikePost","method","url","createNewPost","title","fullText","description","setError","image","post","status","formData","FormData","append","updatePostImage","_id","console","log","response","error","message","refImagePost","put","headers","getImage","ref","defaultImage","alt","statusText","current","src"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { POSTS, LOADED, ERROR, DELETED, POST, ALL_POSTS, FULL_POST } from './types'\n\nimport api from '../../services/api';\n\n//const JWTToken = localStorage.getItem('token');\n//if (JWTToken) {\n//    axios.defaults.headers['Authorization'] = `Bearer ${JWTToken}`\n//}\n\nconst setPosts = (posts) => {\n    return (dispatch) =>\n        dispatch({ type: POSTS, payload: posts })\n}\n\nconst getPosts = (skip = 0, limit = 10) => {\n    return (dispatch) =>\n        api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            .then(res => {\n                dispatch({ type: POSTS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n\n}\n\nconst getAllPosts = (skip = 0, limit = 10) => {\n    return (dispatch) =>\n        api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            .then(res => {\n                dispatch({ type: ALL_POSTS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n}\n\nconst loaded = () => {\n    return (dispatch) =>\n        dispatch({ type: LOADED })\n}\n\nconst fault = () => {\n    return (dispatch) =>\n        dispatch({ type: ERROR })\n}\n\nconst deletePost = (id, token, history) => {\n    return (dispatch) =>\n        api.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: DELETED, payload: true })\n                setTimeout(() => {\n                    history.push(`/list/page${1}/?limit=10&skip=${0}`)\n                    dispatch({ type: DELETED, payload: false })\n                }, 500)\n            })\n    //.catch(e => )\n\n}\n\nconst getPost = (id) => {\n    return (dispatch) =>\n        api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: POST, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n}\n\nconst getFullPost = (id) => {\n    return (dispatch) =>\n        api.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: FULL_POST, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n}\n\nconst setLikePost = (id) => {\n    return () =>\n        api({\n            method: 'PUT',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n        })\n\n}\n\nconst createNewPost = (title, fullText, description, setError, history, id, image) => {\n    return (dispatch) =>\n        api.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n            {\n                title,\n                fullText,\n                description,\n            },\n        )\n            .then(res => {\n                if (res.status === 200) {\n                    if (image) {\n                        let formData = new FormData()\n                        formData.append('image', image)\n                        dispatch(updatePostImage(res.data._id, formData))\n                    }\n                    setTimeout(() => history.push(`/user-posts/${id}`), 2000)\n                }\n            })\n            .catch(e => {\n                console.log(e.response)\n                setError(e.response.data.error[0].message)\n            })\n}\n\nconst updatePostImage = (id, image, refImagePost) => {\n    return (dispatch) =>\n        api.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n            headers: {\n                \"Content-Type\": ' multipart/form-data'\n            }\n        })\n            .then(res => {\n                console.log(res)\n                dispatch(getImage(refImagePost, res.data.image))\n            })\n\n\n}\n\nconst getImage = (ref, image, defaultImage, alt) => {\n    return () =>\n        axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n                }\n            })\n            .catch(e => {\n                if (e.status >= 400) {\n                    ref.current.src = defaultImage;\n                    ref.current.alt = alt;\n                }\n            })\n}\n\nexport { getPosts, setPosts, loaded, fault, deletePost, getPost, getAllPosts, getFullPost, setLikePost, createNewPost, updatePostImage }\n\n\n//! Если все норм работает , не забыть удалить!\n\n//const setPosts = (posts) => {\n//    return (dispatch) =>\n//        dispatch({ type: POSTS, payload: posts })\n//}\n\n//const getPosts = (skip = 0, limit = 10) => {\n//    return (dispatch) =>\n//        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n//            .then(res => {\n//                dispatch({ type: POSTS, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n//            .catch(e => dispatch({ type: ERROR }))\n\n//}\n\n//const getAllPosts = (skip = 0, limit = 10) => {\n//    return (dispatch) =>\n//        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n//            .then(res => {\n//                dispatch({ type: ALL_POSTS, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n//}\n\n//const loaded = () => {\n//    return (dispatch) =>\n//        dispatch({ type: LOADED })\n//}\n\n//const fault = () => {\n//    return (dispatch) =>\n//        dispatch({ type: ERROR })\n//}\n\n//const deletePost = (id, token, history) => {\n//    return (dispatch) =>\n//        axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n//            .then(res => {\n//                dispatch({ type: DELETED, payload: true })\n//                setTimeout(() => {\n//                    history.push(`/list/page${1}/?limit=10&skip=${0}`)\n//                    dispatch({ type: DELETED, payload: false })\n//                }, 500)\n//            })\n//    //.catch(e => )\n\n//}\n\n//const getPost = (id) => {\n//    return (dispatch) =>\n//        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n//            .then(res => {\n//                dispatch({ type: POST, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n//            .catch(e => dispatch({ type: ERROR }))\n//}\n\n//const getFullPost = (id) => {\n//    return (dispatch) =>\n//        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n//            .then(res => {\n//                dispatch({ type: FULL_POST, payload: res.data })\n//                dispatch({ type: LOADED })\n//            })\n//            .catch(e => dispatch({ type: ERROR }))\n//}\n\n\n"]},"metadata":{},"sourceType":"module"}