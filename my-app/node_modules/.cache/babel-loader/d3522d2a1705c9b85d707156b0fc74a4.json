{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/post-list-item/post-list-item.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\nimport { posts, loaded, fault } from '../../actions';\nimport Spinner from '../spinner';\nimport SimpleSnackbar from '../snackbar';\nimport Error from '../error'; //import PaginationOutlined from './pagination'\n\nimport './post-list-item.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostListItem = ({\n  Server\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  //useParams\n  const {\n    page\n  } = useParams();\n\n  function useQuery() {\n    _s();\n\n    return new URLSearchParams(useLocation().search);\n  }\n\n  _s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n    return [useLocation];\n  });\n\n  let query = useQuery();\n  let skip = query.get('skip');\n  let limit = query.get('limit'); //useSelector\n\n  const postOnPage = useSelector(state => state.postOnPage);\n  const loading = useSelector(state => state.loading);\n  const isSnackbar = useSelector(state => state.isSnackbar);\n  const error = useSelector(state => state.error); //useDispatch\n\n  const dispatch = useDispatch(); //useState\n\n  const [countBtn, setCountBtn] = useState([]);\n  const [activeNum, setActiveNum] = useState(+skip); //useHistory\n\n  const history = useHistory();\n\n  const navHistory = url => {\n    history.push(url);\n  };\n\n  useEffect(() => {\n    Server.getAllPosts(skip).then(res => {\n      dispatch(posts(res.data));\n      dispatch(loaded());\n    }).catch(er => dispatch(fault()));\n  }, [Server, dispatch, error, skip]);\n  useEffect(() => {\n    if (!loading) {\n      Server.getAllPosts(0, 0).then(res => {\n        setCountBtn(res.data.filter((item, i) => res.data[i / 10]));\n      });\n    } else {\n      return;\n    }\n  }, [Server, loading]);\n  let idx = 0;\n  const postList = postOnPage.map((postItem, i) => {\n    idx++;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-list-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"title\",\n            children: postItem.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"full-text\",\n            children: postItem.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"full-post\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"view\",\n              onClick: () => navHistory(`/post/${postItem._id}`),\n              children: \"View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  });\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      onClick: () => console.log(page),\n      children: !loading ? postList : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), postList.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-posts\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-posts-overflow\",\n        children: countBtn.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn-nav-posts ${activeNum === i * 10 ? 'active-btn' : ''}`,\n            onClick: e => {\n              setActiveNum(i * 10); //navHistory(`/list/${i * 10}`)\n\n              navHistory(`/list/page${i + 1}/?limit=10&skip=${i * 10}`);\n            },\n            children: i + 1\n          }, idx++, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SimpleSnackbar, {\n      isSnackbar: isSnackbar,\n      color: \"success\",\n      message: 'Deleted successful!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(PostListItem, \"6ClNwceC9PXCzYHj819+ODI0j/A=\", true, function () {\n  return [useParams, useSelector, useSelector, useSelector, useSelector, useDispatch, useHistory];\n});\n\n_c = PostListItem;\nexport default WithServer()(PostListItem);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostListItem\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/post-list-item/post-list-item.js"],"names":["React","useEffect","useState","useSelector","useDispatch","WithServer","useHistory","useLocation","useParams","posts","loaded","fault","Spinner","SimpleSnackbar","Error","PostListItem","Server","page","useQuery","URLSearchParams","search","query","skip","get","limit","postOnPage","state","loading","isSnackbar","error","dispatch","countBtn","setCountBtn","activeNum","setActiveNum","history","navHistory","url","push","getAllPosts","then","res","data","catch","er","filter","item","i","idx","postList","map","postItem","title","description","_id","console","log","length","e"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\nimport { posts, loaded, fault } from '../../actions';\nimport Spinner from '../spinner';\nimport SimpleSnackbar from '../snackbar';\nimport Error from '../error';\n//import PaginationOutlined from './pagination'\n\nimport './post-list-item.sass';\n\n\nconst PostListItem = ({ Server }) => {\n    //useParams\n    const { page } = useParams();\n\n    function useQuery() {\n        return new URLSearchParams(useLocation().search);\n    }\n    let query = useQuery()\n    let skip = query.get('skip')\n    let limit = query.get('limit')\n\n    //useSelector\n    const postOnPage = useSelector(state => state.postOnPage)\n    const loading = useSelector(state => state.loading)\n    const isSnackbar = useSelector(state => state.isSnackbar)\n    const error = useSelector(state => state.error)\n\n    //useDispatch\n    const dispatch = useDispatch()\n\n    //useState\n    const [countBtn, setCountBtn] = useState([]);\n    const [activeNum, setActiveNum] = useState(+skip)\n\n    //useHistory\n    const history = useHistory();\n\n    const navHistory = (url) => {\n        history.push(url)\n    }\n\n    useEffect(() => {\n        Server.getAllPosts(skip)\n            .then(res => {\n                dispatch(posts(res.data))\n                dispatch(loaded())\n            })\n            .catch(er => dispatch(fault()))\n    }, [Server, dispatch, error, skip])\n\n    useEffect(() => {\n        if (!loading) {\n            Server.getAllPosts(0, 0)\n                .then(res => {\n                    setCountBtn(res.data.filter((item, i) => res.data[i / 10]))\n                })\n        } else {\n            return\n        }\n    }, [Server, loading])\n\n\n    let idx = 0;\n\n    const postList = postOnPage.map((postItem, i) => {\n        idx++\n\n        return (\n            <div className=\"post\" key={idx}>\n                <div className=\"post-list-item\" >\n                    <div className=\"cards\">\n                        <p className=\"title\">{postItem.title}</p>\n                        <ul className=\"full-text\">{postItem.description}</ul>\n                        <div className=\"full-post\">\n                            <button\n                                className='view'\n                                onClick={() => navHistory(`/post/${postItem._id}`)}>\n                                View\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    })\n\n    if (error) {\n        return <Error />\n    }\n\n    return (\n        <>\n            <div className=\"post-list\" onClick={() => console.log(page)}>\n                {/*<p>Skip: {skip} </p>*/}\n                {\n                    !loading\n                        ? postList\n                        : <Spinner />\n                }\n            </div>\n            {postList.length !== 0 &&\n                <div className='nav-posts'>\n                    <div className='nav-posts-overflow'>\n                        {countBtn.map((item, i) => {\n                            return <button\n                                key={idx++}\n                                className={`btn-nav-posts ${activeNum === i * 10 ? 'active-btn' : ''}`}\n                                onClick={(e) => {\n                                    setActiveNum(i * 10)\n                                    //navHistory(`/list/${i * 10}`)\n                                    navHistory(`/list/page${i + 1}/?limit=10&skip=${i * 10}`)\n                                }}\n                            >{i + 1}</button>\n                        })}\n                    </div>\n                </div>\n            }\n            {/*<PaginationOutlined />*/}\n            <SimpleSnackbar isSnackbar={isSnackbar} color={\"success\"} message={'Deleted successful!'} />\n        </>\n    )\n}\n\n\nexport default WithServer()(PostListItem);\n\n"]},"metadata":{},"sourceType":"module"}