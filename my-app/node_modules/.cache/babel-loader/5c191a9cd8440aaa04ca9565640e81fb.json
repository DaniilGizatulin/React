{"ast":null,"code":"import axios from 'axios'; // Проверим в самом начале, есть ли токен в хранилище\n\nconst JWTToken = localStorage.getItem('token');\nconst BASE_URL = 'https://nodejs-test-api-blog.herokuapp.com'; // Создать инстанс axios\n\nconst api = axios.create({\n  baseURL: `${BASE_URL}/api`\n}); //function apiSetHeader(name, value) {\n//    if (value) {\n//        api.defaults.headers[name] = value;\n//    }\n//};\n\nfunction apiSetHeader(name, value) {\n  if (value) {\n    api.headers[name] = value;\n  }\n}\n\n; // Если токен есть, то добавим заголовок к запросам\n\nif (JWTToken) {\n  console.log('123');\n  apiSetHeader('Authorization', `Bearer ${JWTToken}`);\n}\n\napi.interceptors.request.use(config => {\n  console.log(config); // Если пользователь делает запрос и у него нет заголовка с токеном, то...\n\n  if (!config.headers['Authorization']) {\n    // Тут пишем редирект если не авторизован\n    console.log('Не авторизован');\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;\nexport { apiSetHeader }; // ./services/sign-in.js\n//import api, { apiSetHeader } from './api'\n//export const authorize = async (username, password) => {\n//  try {\n//    const { data } = await api.post('/clients/token/', {\n//      username,\n//      password\n//    });\n//    localStorage.setItem('jwt', data.access);\n//    apiSetHeader('Authorization', `Bearer ${data.access}`);\n//  } catch (error) {\n//    console.log(error);\n//  }\n//};","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/services/axios-header.js"],"names":["axios","JWTToken","localStorage","getItem","BASE_URL","api","create","baseURL","apiSetHeader","name","value","headers","console","log","interceptors","request","use","config","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAjB;AACA,MAAMC,QAAQ,GAAG,4CAAjB,C,CACA;;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAN,CAAa;AACrBC,EAAAA,OAAO,EAAG,GAAEH,QAAS;AADA,CAAb,CAAZ,C,CAIA;AACA;AACA;AACA;AACA;;AAEA,SAASI,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AAC/B,MAAIA,KAAJ,EAAW;AACPL,IAAAA,GAAG,CAACM,OAAJ,CAAYF,IAAZ,IAAoBC,KAApB;AACH;AACJ;;AAAA,C,CAED;;AACA,IAAIT,QAAJ,EAAc;AACVW,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAL,EAAAA,YAAY,CAAC,eAAD,EAAmB,UAASP,QAAS,EAArC,CAAZ;AACH;;AAEDI,GAAG,CAACS,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6BC,MAAM,IAAI;AACnCL,EAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ,EADmC,CAEnC;;AACA,MAAI,CAACA,MAAM,CAACN,OAAP,CAAe,eAAf,CAAL,EAAsC;AAClC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;;AAED,SAAOI,MAAP;AACH,CATD,EASGC,KAAK,IAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAXD;AAaA,eAAeb,GAAf;AAEA,SAASG,YAAT,G,CAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\n\n// Проверим в самом начале, есть ли токен в хранилище\nconst JWTToken = localStorage.getItem('token');\nconst BASE_URL = 'https://nodejs-test-api-blog.herokuapp.com';\n// Создать инстанс axios\nconst api = axios.create({\n    baseURL: `${BASE_URL}/api`\n});\n\n//function apiSetHeader(name, value) {\n//    if (value) {\n//        api.defaults.headers[name] = value;\n//    }\n//};\n\nfunction apiSetHeader(name, value) {\n    if (value) {\n        api.headers[name] = value;\n    }\n};\n\n// Если токен есть, то добавим заголовок к запросам\nif (JWTToken) {\n    console.log('123')\n    apiSetHeader('Authorization', `Bearer ${JWTToken}`);\n}\n\napi.interceptors.request.use(config => {\n    console.log(config)\n    // Если пользователь делает запрос и у него нет заголовка с токеном, то...\n    if (!config.headers['Authorization']) {\n        // Тут пишем редирект если не авторизован\n        console.log('Не авторизован')\n    }\n\n    return config;\n}, error => {\n    return Promise.reject(error);\n});\n\nexport default api;\n\nexport { apiSetHeader }\n\n// ./services/sign-in.js\n\n//import api, { apiSetHeader } from './api'\n\n//export const authorize = async (username, password) => {\n//  try {\n//    const { data } = await api.post('/clients/token/', {\n//      username,\n//      password\n//    });\n\n//    localStorage.setItem('jwt', data.access);\n//    apiSetHeader('Authorization', `Bearer ${data.access}`);\n//  } catch (error) {\n//    console.log(error);\n//  }\n//};"]},"metadata":{},"sourceType":"module"}