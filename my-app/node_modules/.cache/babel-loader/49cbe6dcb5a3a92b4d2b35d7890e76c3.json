{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/post-list-item/post-list-item.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { posts, loaded, fault } from '../../actions';\nimport Spinner from '../spinner';\nimport SimpleSnackbar from '../snackbar';\nimport Error from '../error'; //import PaginationOutlined from './pagination'\n\nimport './post-list-item.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostListItem = ({\n  Server\n}) => {\n  _s();\n\n  //useParams\n  const {\n    skip\n  } = useParams(); //useSelector\n\n  const postOnPage = useSelector(state => state.postOnPage);\n  const loading = useSelector(state => state.loading);\n  const isSnackbar = useSelector(state => state.isSnackbar);\n  const error = useSelector(state => state.error); //useDispatch\n\n  const dispatch = useDispatch(); //useState\n\n  const [countBtn, setCountBtn] = useState([]);\n  const [activeNum, setActiveNum] = useState(+skip); //useHistory\n\n  const history = useHistory();\n\n  const navHistory = url => {\n    history.push(url);\n  };\n\n  useEffect(() => {\n    Server.getAllPosts(skip).then(res => {\n      dispatch(posts(res.data));\n      dispatch(loaded());\n    }).catch(er => dispatch(fault()));\n  }, [Server, dispatch, error, skip]);\n  useEffect(() => {\n    if (!loading) {\n      Server.getAllPosts(0, 0).then(res => {\n        setCountBtn(res.data.filter((item, i) => res.data[i / 10]));\n      });\n    } else {\n      return;\n    }\n  }, [Server, loading]);\n  let idx = 0;\n  const postList = postOnPage.map((postItem, i) => {\n    idx++;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-list-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"title\",\n            children: postItem.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"full-text\",\n            children: postItem.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"full-post\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"view\",\n              onClick: () => navHistory(`/post/${postItem._id}`),\n              children: \"View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  });\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      onClick: () => console.log(skip),\n      children: !loading ? postList : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), postList.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-posts\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-posts-overflow\",\n        children: countBtn.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn-nav-posts ${activeNum === i * 10 ? 'active-btn' : ''}`,\n            onClick: e => {\n              setActiveNum(i * 10);\n              navHistory(`/list/${i * 10}`);\n              console.log(skip);\n            },\n            children: i + 1\n          }, idx++, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 36\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SimpleSnackbar, {\n      isSnackbar: isSnackbar,\n      color: \"success\",\n      message: 'Deleted successful!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PostListItem, \"5Q2pniSZyDi2MQgZ9Ctd1lTPdrE=\", false, function () {\n  return [useParams, useSelector, useSelector, useSelector, useSelector, useDispatch, useHistory];\n});\n\n_c = PostListItem;\nexport default WithServer()(PostListItem);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostListItem\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/post-list-item/post-list-item.js"],"names":["React","useEffect","useState","useSelector","useDispatch","WithServer","useHistory","useParams","posts","loaded","fault","Spinner","SimpleSnackbar","Error","PostListItem","Server","skip","postOnPage","state","loading","isSnackbar","error","dispatch","countBtn","setCountBtn","activeNum","setActiveNum","history","navHistory","url","push","getAllPosts","then","res","data","catch","er","filter","item","i","idx","postList","map","postItem","title","description","_id","console","log","length","e"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { posts, loaded, fault } from '../../actions';\nimport Spinner from '../spinner';\nimport SimpleSnackbar from '../snackbar';\nimport Error from '../error';\n//import PaginationOutlined from './pagination'\n\nimport './post-list-item.sass';\n\n\nconst PostListItem = ({ Server }) => {\n    //useParams\n    const { skip } = useParams();\n\n    //useSelector\n    const postOnPage = useSelector(state => state.postOnPage)\n    const loading = useSelector(state => state.loading)\n    const isSnackbar = useSelector(state => state.isSnackbar)\n    const error = useSelector(state => state.error)\n\n    //useDispatch\n    const dispatch = useDispatch()\n\n    //useState\n    const [countBtn, setCountBtn] = useState([]);\n    const [activeNum, setActiveNum] = useState(+skip)\n\n    //useHistory\n    const history = useHistory();\n\n    const navHistory = (url) => {\n        history.push(url)\n    }\n\n    useEffect(() => {\n        Server.getAllPosts(skip)\n            .then(res => {\n                dispatch(posts(res.data))\n                dispatch(loaded())\n            })\n            .catch(er => dispatch(fault()))\n    }, [Server, dispatch, error, skip])\n\n    useEffect(() => {\n        if (!loading) {\n            Server.getAllPosts(0, 0)\n                .then(res => {\n                    setCountBtn(res.data.filter((item, i) => res.data[i / 10]))\n                })\n        } else {\n            return\n        }\n    }, [Server, loading])\n\n\n    let idx = 0;\n\n    const postList = postOnPage.map((postItem, i) => {\n        idx++\n\n        return (\n            <div className=\"post\" key={idx}>\n                <div className=\"post-list-item\" >\n                    <div className=\"cards\">\n                        <p className=\"title\">{postItem.title}</p>\n                        <ul className=\"full-text\">{postItem.description}</ul>\n                        <div className=\"full-post\">\n                            <button\n                                className='view'\n                                onClick={() => navHistory(`/post/${postItem._id}`)}>\n                                View\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    })\n\n    if (error) {\n        return <Error />\n    }\n\n    return (\n        <>\n            <div className=\"post-list\" onClick={() => console.log(skip)}>\n                {\n                    !loading\n                        ? postList\n                        : <Spinner />\n                }\n            </div>\n            {postList.length !== 0 &&\n                <div className='nav-posts'>\n                    <div className='nav-posts-overflow'>\n                        {countBtn.map((item, i) => {\n                            return <button\n                                key={idx++}\n                                className={`btn-nav-posts ${activeNum === i * 10 ? 'active-btn' : ''}`}\n                                onClick={(e) => {\n                                    setActiveNum(i * 10)\n                                    navHistory(`/list/${i * 10}`)\n                                    console.log(skip)\n                                }}\n                            >{i + 1}</button>\n                        })}\n                    </div>\n                </div>\n            }\n            {/*<PaginationOutlined />*/}\n            <SimpleSnackbar isSnackbar={isSnackbar} color={\"success\"} message={'Deleted successful!'} />\n        </>\n    )\n}\n\n\nexport default WithServer()(PostListItem);\n\n"]},"metadata":{},"sourceType":"module"}