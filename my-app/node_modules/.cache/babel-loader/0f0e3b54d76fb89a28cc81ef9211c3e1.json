{"ast":null,"code":"import axios from 'axios';\nimport { fault } from '../actions';\nexport default class Server {\n  async loginUser(email, password) {\n    try {\n      const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n        email,\n        password\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async authorizationUser(token) {\n    try {\n      const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n\n      return _res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async createNewUser(email, password, name, history, dispatch) {\n    try {\n      await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n        email,\n        password,\n        name\n      }).then(res => history.push('/login')).catch(e => dispatch(fault()));\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getAllUsers() {\n    try {\n      const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users');\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getAllPosts(skip = 0, limit = 10) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getPost(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getUser(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`);\n      return res;\n    } catch (e) {\n      return e.response;\n    }\n  }\n\n  async setLikePost(id, token) {\n    try {\n      const res = await axios({\n        method: 'PUT',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getImage(ref, image, defaultImage, alt) {\n    await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n      if (res.statusText === 'OK') {\n        ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n      }\n    }).catch(e => {\n      if (e.status >= 400) {\n        ref.current.src = defaultImage;\n        ref.current.alt = alt;\n      }\n    });\n  }\n\n  async deletePost(id, token) {\n    try {\n      const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async deleteUser(id, token) {\n    try {\n      const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async createNewPost(title, fullText, description, token) {\n    try {\n      const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\", {\n        title,\n        fullText,\n        description\n      }, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      //console.log(e.response);\n      const error = e.response;\n      return error;\n    }\n  }\n\n  async updateUserName(id, token, name) {\n    try {\n      const res = await axios({\n        method: 'PATCH',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n        data: {\n          name\n        },\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async updateUserAvatar(id, token, avatar) {\n    try {\n      const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": ' multipart/form-data'\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async updatePost(id, token, title, description, fullText) {\n    try {\n      const res = await axios({\n        method: 'PATCH',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n        data: {\n          title,\n          description,\n          fullText\n        },\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async updatePostImage(id, token, image) {\n    try {\n      const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": ' multipart/form-data'\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/services/server.js"],"names":["axios","fault","Server","loginUser","email","password","res","post","e","console","log","response","authorizationUser","token","_res","get","headers","createNewUser","name","history","dispatch","then","push","catch","getAllUsers","getAllPosts","skip","limit","getPost","id","getUser","setLikePost","method","url","getImage","ref","image","defaultImage","alt","statusText","current","src","status","deletePost","delete","deleteUser","createNewPost","title","fullText","description","error","updateUserName","data","updateUserAvatar","avatar","put","updatePost","updatePostImage"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { fault } from '../actions';\n\nexport default class Server {\n\n    async loginUser(email, password) {\n        try {\n            const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n                email,\n                password,\n            });\n            return res\n        } catch (e) {\n            console.log(e.response);\n        }\n\n    }\n\n    async authorizationUser(token) {\n        try {\n            const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n            return _res\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    async createNewUser(email, password, name, history, dispatch) {\n        try {\n            await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n                email,\n                password,\n                name\n            })\n                .then(res => history.push('/login'))\n                .catch(e => dispatch(fault()))\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    async getAllUsers() {\n        try {\n            const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n            return res\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    async getAllPosts(skip = 0, limit = 10) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getPost(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n\n    async getUser(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n            return res\n        } catch (e) {\n            return e.response\n        }\n    }\n\n    async setLikePost(id, token) {\n        try {\n            const res = await axios({\n                method: 'PUT',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n                headers: {\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getImage(ref, image, defaultImage, alt) {\n        await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n                }\n            })\n            .catch(e => {\n                if (e.status >= 400) {\n                    ref.current.src = defaultImage;\n                    ref.current.alt = alt;\n                }\n            })\n    }\n\n    async deletePost(id, token) {\n        try {\n            const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } });\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n\n    async deleteUser(id, token) {\n        try {\n            const res = await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } });\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async createNewPost(title, fullText, description, token) {\n        try {\n            const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n                {\n                    title,\n                    fullText,\n                    description,\n                },\n                {\n                    headers:\n                        { \"Authorization\": `Bearer ${token}` }\n                });\n            return res\n        } catch (e) {\n            //console.log(e.response);\n            const error = e.response\n            return error\n        }\n    }\n\n\n    async updateUserName(id, token, name) {\n        try {\n            const res = await axios({\n                method: 'PATCH',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n                data:\n                {\n                    name,\n                },\n\n                headers:\n                    { \"Authorization\": `Bearer ${token}` }\n\n            });\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async updateUserAvatar(id, token, avatar) {\n        try {\n            const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": ' multipart/form-data'\n                }\n            }\n            )\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async updatePost(id, token, title, description, fullText) {\n        try {\n            const res = await axios({\n                method: 'PATCH',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n                data:\n                {\n                    title,\n                    description,\n                    fullText,\n                },\n\n                headers:\n                    { \"Authorization\": `Bearer ${token}` }\n\n            })\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async updatePostImage(id, token, image) {\n        try {\n            const res = await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": ' multipart/form-data'\n                }\n            }\n            )\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}