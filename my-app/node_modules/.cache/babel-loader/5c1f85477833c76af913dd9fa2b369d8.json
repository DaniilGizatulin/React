{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Daniil/FicusTest/my-app/src/components/post-list/post-list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport ModalAuthorized from './modalAuthorized';\nimport { useHistory, useParams } from 'react-router';\nimport Spinner from '../spinner';\nimport Error from '../error'; //import { loaded, fault } from '../../actions';\n\nimport { loaded, fault, getPost } from '../../redux/posts/actions';\nimport prof from './no-avatar.jpg';\nimport deletProf from './delete-user.jpg';\nimport defaultImage from './default-image.jpg';\nimport './post-list.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = ({\n  Server\n}) => {\n  _s();\n\n  const defaultAvatar = 'https://bizraise.pro/wp-content/uploads/2014/09/no-avatar-300x300.png'; //Hook\n  // useState\n\n  const [post, setPost] = useState({});\n  const [postUser, setPostUser] = useState({});\n  const [date, setDate] = useState('');\n  const [heart, setHeart] = useState('');\n  const [modal, setModal] = useState('');\n  const [showLike, setShowLike] = useState(); //useDispatch & useSelector\n\n  const dispatch = useDispatch(); //const loading = useSelector(state => state.loading)\n  //const error = useSelector(state => state.error)\n  //new\n\n  const loading = useSelector(state => state.postState.loading);\n  const error = useSelector(state => state.postState.error);\n  const postInState = useSelector(state => state.postState.post); // useHistory & useParams\n\n  const history = useHistory();\n  const {\n    id\n  } = useParams(); //Ref\n\n  const refHeart = useRef();\n  const refAvatar = useRef();\n  const refImagePost = useRef(); //local\n\n  const isAuthorized = localStorage.getItem('token');\n  const isAuthorizedUser = JSON.parse(localStorage.getItem('user')); //DateCreated\n\n  const dateСorrector = postData => {\n    let date = postData;\n    let newDate = date.replace(/[T-Z]/g, ' ');\n    setDate(newDate.replace(/\\..*/, ''));\n  }; // If an authorized user has a like on a post\n\n\n  function saveLike(likedUser, e) {\n    const idxLike = likedUser.indexOf(isAuthorizedUser._id);\n\n    if (idxLike >= 0) {\n      setShowLike(true);\n    } else {\n      setShowLike(false);\n    }\n  } // Func get post and user\n\n\n  useEffect(() => {\n    Server.getPost(id).then(res => {\n      dispatch(loaded());\n      setPost(res.data);\n      setHeart(res.data.likes.length);\n\n      if (isAuthorized) {\n        saveLike(res.data.likes, refHeart.current);\n      }\n\n      dateСorrector(res.data.dateCreated);\n      Server.getImage(refImagePost, res.data.image, defaultImage, '');\n      Server.getUser(res.data.postedBy).then(res => {\n        Server.getImage(refAvatar, res.data.avatar, defaultAvatar);\n        setPostUser(res.data);\n      });\n    }).catch(() => dispatch(fault())); //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [Server, id]); //useEffect(() => {\n  //    dispatch(getPost(id))\n  //    Server.getPost(id)\n  //        .then(res => {\n  //            dispatch(loaded())\n  //            setPost(res.data)\n  //            setHeart(res.data.likes.length)\n  //            if (isAuthorized) {\n  //                saveLike(res.data.likes, refHeart.current)\n  //            }\n  //            dateСorrector(res.data.dateCreated)\n  //            Server.getImage(refImagePost, res.data.image, defaultImage, '')\n  //            Server.getUser(res.data.postedBy)\n  //                .then(res => {\n  //                    Server.getImage(refAvatar, res.data.avatar, defaultAvatar)\n  //                    setPostUser(res.data)\n  //                })\n  //        })\n  //        .catch(() => dispatch(fault()))\n  //    //eslint-disable-next-line react-hooks/exhaustive-deps\n  //}, [Server, id])\n  // number of likes on the post\n\n  const postLike = async e => {\n    await Server.getPost(post._id).then(res => {\n      if (res.data.likes.length !== heart) {\n        setHeart(res.data.likes.length);\n        saveLike(res.data.likes, e);\n      }\n    });\n  }; // func setlike \n\n\n  async function setLike(id, token, e) {\n    await Server.setLikePost(id, token);\n    postLike(e);\n  }\n\n  if (loading || !post) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    onClick: () => console.log(postInState),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-post\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-item-list\",\n        children: [!postUser.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: prof,\n            className: \"post-user-avatar cntr\",\n            alt: \"prof\",\n            ref: refAvatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", postUser.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-user\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: deletProf,\n            className: \"post-user-avatar cntr\",\n            alt: \"prof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"delete-user\",\n            children: \" User has been deleted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 29\n            }, this), isAuthorized && post.postedBy === isAuthorizedUser._id &&\n            /*#__PURE__*/\n            //<button className='btn-update-post ' onClick={() => history.push(`/editor-posts/${id}`)}>\n            //    Edit post\n            //</button>}\n            _jsxDEV(\"button\", {\n              className: \"btn-update-post \",\n              onClick: () => history.push(`/post-page/${id}`),\n              children: \"Edit post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: defaultImage,\n            alt: post.description,\n            className: \"post-image\",\n            ref: refImagePost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: post.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"full-text\",\n            children: post.fullText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-post\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"date\",\n              children: [\"DATE CREATE : \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 66\n              }, this), date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"interaction\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"like\",\n                onClick: () => {\n                  isAuthorized ? setLike(post._id, isAuthorized, refHeart.current) : setModal('show');\n                },\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  ref: refHeart,\n                  className: `fa fa-heart ${showLike ? 'liked' : 'offLiked'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 33\n              }, this), heart]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModalAuthorized, {\n      cl: modal,\n      setModal: setModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"tNvCSOPqbeMFMieLLTrlx6QsOdk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useHistory, useParams];\n});\n\n_c = PostList;\nexport default WithServer()(PostList);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/components/post-list/post-list.js"],"names":["React","useEffect","useRef","useState","useSelector","useDispatch","WithServer","ModalAuthorized","useHistory","useParams","Spinner","Error","loaded","fault","getPost","prof","deletProf","defaultImage","PostList","Server","defaultAvatar","post","setPost","postUser","setPostUser","date","setDate","heart","setHeart","modal","setModal","showLike","setShowLike","dispatch","loading","state","postState","error","postInState","history","id","refHeart","refAvatar","refImagePost","isAuthorized","localStorage","getItem","isAuthorizedUser","JSON","parse","dateСorrector","postData","newDate","replace","saveLike","likedUser","e","idxLike","indexOf","_id","then","res","data","likes","length","current","dateCreated","getImage","image","getUser","postedBy","avatar","catch","postLike","setLike","token","setLikePost","console","log","name","title","push","description","fullText"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithServer from '../hoc';\nimport ModalAuthorized from './modalAuthorized'\nimport { useHistory, useParams } from 'react-router';\nimport Spinner from '../spinner';\nimport Error from '../error';\n//import { loaded, fault } from '../../actions';\nimport { loaded, fault, getPost } from '../../redux/posts/actions'\n\nimport prof from './no-avatar.jpg'\nimport deletProf from './delete-user.jpg'\nimport defaultImage from './default-image.jpg'\n\nimport './post-list.sass';\n\nconst PostList = ({ Server }) => {\n    const defaultAvatar = 'https://bizraise.pro/wp-content/uploads/2014/09/no-avatar-300x300.png'\n\n    //Hook\n\n    // useState\n    const [post, setPost] = useState({});\n    const [postUser, setPostUser] = useState({});\n    const [date, setDate] = useState('');\n    const [heart, setHeart] = useState('');\n    const [modal, setModal] = useState('')\n    const [showLike, setShowLike] = useState();\n\n    //useDispatch & useSelector\n    const dispatch = useDispatch()\n    //const loading = useSelector(state => state.loading)\n    //const error = useSelector(state => state.error)\n    //new\n    const loading = useSelector(state => state.postState.loading)\n    const error = useSelector(state => state.postState.error)\n    const postInState = useSelector(state => state.postState.post)\n\n    // useHistory & useParams\n    const history = useHistory()\n    const { id } = useParams()\n\n    //Ref\n    const refHeart = useRef()\n    const refAvatar = useRef()\n    const refImagePost = useRef()\n\n    //local\n    const isAuthorized = localStorage.getItem('token');\n    const isAuthorizedUser = JSON.parse(localStorage.getItem('user'))\n\n    //DateCreated\n    const dateСorrector = (postData) => {\n        let date = postData\n        let newDate = date.replace(/[T-Z]/g, ' ')\n        setDate(newDate.replace(/\\..*/, ''))\n    }\n\n    // If an authorized user has a like on a post\n\n    function saveLike(likedUser, e) {\n        const idxLike = likedUser.indexOf(isAuthorizedUser._id)\n        if (idxLike >= 0) {\n            setShowLike(true)\n        } else {\n            setShowLike(false)\n        }\n    }\n\n    // Func get post and user\n    useEffect(() => {\n        Server.getPost(id)\n            .then(res => {\n                dispatch(loaded())\n                setPost(res.data)\n                setHeart(res.data.likes.length)\n                if (isAuthorized) {\n                    saveLike(res.data.likes, refHeart.current)\n                }\n                dateСorrector(res.data.dateCreated)\n                Server.getImage(refImagePost, res.data.image, defaultImage, '')\n                Server.getUser(res.data.postedBy)\n                    .then(res => {\n                        Server.getImage(refAvatar, res.data.avatar, defaultAvatar)\n                        setPostUser(res.data)\n                    })\n            })\n            .catch(() => dispatch(fault()))\n        //eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [Server, id])\n\n    //useEffect(() => {\n    //    dispatch(getPost(id))\n    //    Server.getPost(id)\n    //        .then(res => {\n    //            dispatch(loaded())\n    //            setPost(res.data)\n    //            setHeart(res.data.likes.length)\n    //            if (isAuthorized) {\n    //                saveLike(res.data.likes, refHeart.current)\n    //            }\n    //            dateСorrector(res.data.dateCreated)\n    //            Server.getImage(refImagePost, res.data.image, defaultImage, '')\n    //            Server.getUser(res.data.postedBy)\n    //                .then(res => {\n    //                    Server.getImage(refAvatar, res.data.avatar, defaultAvatar)\n    //                    setPostUser(res.data)\n    //                })\n    //        })\n    //        .catch(() => dispatch(fault()))\n    //    //eslint-disable-next-line react-hooks/exhaustive-deps\n    //}, [Server, id])\n\n    // number of likes on the post\n    const postLike = async (e) => {\n        await Server.getPost(post._id)\n            .then(res => {\n                if (res.data.likes.length !== heart) {\n                    setHeart(res.data.likes.length)\n                    saveLike(res.data.likes, e)\n                }\n            })\n    }\n\n    // func setlike \n    async function setLike(id, token, e) {\n        await Server.setLikePost(id, token)\n        postLike(e)\n    }\n\n    if (loading || !post) {\n        return <Spinner />\n    }\n\n    if (error) {\n        return <Error />\n    }\n\n\n\n    return (\n        <div className=\"item\" onClick={() => console.log(postInState)}>\n            <div className=\"item-post\">\n                <div className=\"post-item-list\">\n                    {!postUser.error\n                        ?\n                        <div className=\"info-user\">\n                            <img src={prof} className=\"post-user-avatar cntr\" alt=\"prof\" ref={refAvatar} />\n                            <p> {postUser.name}</p>\n                        </div>\n                        :\n                        <div className=\"info-user\">\n                            <img src={deletProf} className=\"post-user-avatar cntr\" alt=\"prof\" />\n                            <p className=\"delete-user\"> User has been deleted</p>\n                        </div>}\n                    <div className=\"info-post\">\n                        <div className='header-post'>\n                            <p className=\"title\">{post.title}</p>\n\n                            {isAuthorized && post.postedBy === isAuthorizedUser._id &&\n                                //<button className='btn-update-post ' onClick={() => history.push(`/editor-posts/${id}`)}>\n                                //    Edit post\n                                //</button>}\n                                <button className='btn-update-post ' onClick={() => history.push(`/post-page/${id}`)}>\n                                    Edit post\n                            </button>}\n\n                        </div>\n                        <img src={defaultImage} alt={post.description} className=\"post-image\" ref={refImagePost} />\n                        <p>{post.description}</p>\n                        <ul className=\"full-text\">{post.fullText}</ul>\n                        <div className=\"footer-post\">\n                            <span className=\"date\">DATE CREATE : <br />{date}</span>\n                            <div className=\"interaction\">\n                                <button\n                                    className='like'\n                                    onClick={() => {\n                                        isAuthorized\n                                            ? setLike(post._id, isAuthorized, refHeart.current)\n                                            : setModal('show')\n                                    }\n                                    }><i ref={refHeart} className={`fa fa-heart ${showLike ? 'liked' : 'offLiked'}`}></i></button>{heart}\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n            <ModalAuthorized cl={modal} setModal={setModal} />\n        </div>\n    )\n}\n\n\nexport default WithServer()(PostList);\n\n"]},"metadata":{},"sourceType":"module"}