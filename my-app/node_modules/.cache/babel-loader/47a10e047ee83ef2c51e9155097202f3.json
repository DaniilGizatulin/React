{"ast":null,"code":"import axios from 'axios';\nimport { setUser } from '../redux/user/actions';\nimport api from './api'; //const JWTToken = localStorage.getItem('token');\n//if (JWTToken) {\n//    axios.defaults.headers['Authorization'] = `Bearer ${JWTToken}`\n//}\n\nexport default class Server {\n  testApi() {\n    api.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users').then(res => console.log(res)).catch(e => console.log(e.response));\n  }\n\n  testUpdateName(id, token, name, dispatch) {\n    api.patch({\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n      data: {\n        name\n      }\n    }).then(res => {\n      console.log(res);\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch(setUser(res.data));\n    });\n  } //!USER\n  //? Create user and authorization.................................................................................................\n\n\n  async getAllUsers() {\n    try {\n      const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users');\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getUser(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`);\n      return res;\n    } catch (e) {\n      return e.response;\n    }\n  } //?Update user and user avatar................................................................\n\n\n  async updateUserName(id, token, name, dispatch) {\n    await axios({\n      method: 'PATCH',\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n      data: {\n        name\n      }\n    }).then(res => {\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch(setUser(res.data));\n    });\n  }\n\n  async updateUserAvatar(id, token, avatar, dispatch) {\n    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n      headers: {\n        \"Content-Type\": ' multipart/form-data'\n      }\n    }).then(res => {\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch(setUser(res.data));\n    });\n  } //!POST\n  //?Get post(s) ...........................................................................................................................\n\n\n  async getAllPosts(skip = 0, limit = 10) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getPost(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //?Create new post........................................................................\n\n\n  async createNewPost(title, fullText, description, token, setError, history, id) {\n    try {\n      const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\", {\n        title,\n        fullText,\n        description\n      });\n\n      if (res.status === 200) {\n        setTimeout(() => history.push(`/user-posts/${id}`), 2000);\n      }\n\n      return res;\n    } catch (e) {\n      console.log(e.response); //setError({ error: true, message: e.response.data.error[0].message })\n\n      setError(e.response.data.error[0].message);\n    }\n  } //?Update post and post image................................................................\n\n\n  async updatePost(id, token, title, description, fullText, history, user, setError) {\n    await axios({\n      method: 'PATCH',\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n      data: {\n        title,\n        description,\n        fullText\n      }\n    }).then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500)).catch(e => setError(e.response.data.error[0].message));\n  }\n\n  async updatePostImage(id, token, image, refImagePost) {\n    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n      headers: {\n        \"Content-Type\": ' multipart/form-data'\n      }\n    }).then(res => {\n      this.getPost(id).then(res => this.getImage(refImagePost, res.data.image));\n    });\n  } //*Like post........................................................\n\n\n  async setLikePost(id, token) {\n    try {\n      const res = await axios({\n        method: 'PUT',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //? get Image post and avatar ...................................................................................\n\n\n  async getImage(ref, image, defaultImage, alt) {\n    await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n      if (res.statusText === 'OK') {\n        ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n      }\n    }).catch(e => {\n      if (e.status >= 400) {\n        ref.current.src = defaultImage;\n        ref.current.alt = alt;\n      }\n    });\n  } //! Если все норм работает , не забыть удалить!\n  //async loginUser(email, password) {\n  //    try {\n  //        const { data } = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n  //            email,\n  //            password,\n  //        })\n  //        localStorage.setItem('token', data.token)\n  //        //apiSetHeader('Authorization', `Bearer ${data.token}`);\n  //        axios.defaults.headers['Authorization'] = `Bearer ${data.token}`\n  //        //if (localStorage.getItem('token')) {\n  //        this.authorizationUser()\n  //            .then(res => {\n  //                let saveUser = JSON.stringify(res.data)\n  //                localStorage.setItem('user', saveUser)\n  //            })\n  //        //}\n  //        console.log(axios.defaults.headers)\n  //    } catch (error) {\n  //        console.log(error)\n  //    }\n  //}\n  //async authorizationUser(token) {\n  //    try {\n  //        const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user')\n  //        console.log(_res)\n  //        return _res\n  //    } catch (e) {\n  //        console.log(e.response);\n  //    }\n  //}\n  //async testChangeName(id, name, dispatch) {\n  //    await axios({\n  //        method: 'PATCH',\n  //        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n  //        data:\n  //        {\n  //            name,\n  //        }\n  //    })\n  //        .then(res => {\n  //            console.log(res)\n  //            localStorage.setItem('user', JSON.stringify(res.data))\n  //            dispatch(setUser(res.data))\n  //        })\n  //        .catch(e => console.log(e.response))\n  //}\n  ////async loginUser(email, password, nav, dispatch) {\n  ////    await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n  ////        email,\n  ////        password,\n  ////    })\n  ////        .then(res => {\n  ////            localStorage.setItem('token', res.data.token)\n  ////            if (localStorage.getItem('token')) {\n  ////                this.authorizationUser(localStorage.getItem('token'))\n  ////                    .then(res => {\n  ////                        dispatch(addUser(res.data))\n  ////                        let saveUser = JSON.stringify(res.data)\n  ////                        localStorage.setItem('user', saveUser)\n  ////                    })\n  ////            }\n  ////        })\n  ////        .catch(e => {\n  ////            nav('/login')\n  ////            dispatch(fault())\n  ////        })\n  ////}\n  ////async authorizationUser(token) {\n  ////    try {\n  ////        const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n  ////        return _res\n  ////    } catch (e) {\n  ////        console.log(e.response);\n  ////    }\n  ////}\n  ////async createNewUser(email, password, name, history, dispatch) {\n  ////    try {\n  ////        await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n  ////            email,\n  ////            password,\n  ////            name\n  ////        })\n  ////            .then(res => setTimeout(() => history.push('/login'), 500))\n  ////            .catch(e => dispatch(fault()))\n  ////    } catch (e) {\n  ////        console.log(e.response);\n  ////    }\n  ////}\n  ////?Get user(s) ......................................................................................................................\n  //async getAllUsers() {\n  //    try {\n  //        const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n  //        console.log(res)\n  //        return res\n  //    } catch (e) {\n  //        console.log(e.response);\n  //    }\n  //}\n  //async getUser(id) {\n  //    try {\n  //        const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n  //        return res\n  //    } catch (e) {\n  //        return e.response\n  //    }\n  //}\n  ////async deleteUser(id, token, dispatch, history) {\n  ////    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n  ////        .then(res => {\n  ////            dispatch(logout());\n  ////            dispatch(remove(true))\n  ////            localStorage.removeItem('user');\n  ////            localStorage.removeItem('token');\n  ////            setTimeout(() => {\n  ////                history.push(\"/login\")\n  ////                dispatch(remove(false))\n  ////            }, 500)\n  ////        })\n  ////}\n  ////?Update user and user avatar................................................................\n  //async updateUserName(id, token, name, dispatch) {\n  //    await axios({\n  //        method: 'PATCH',\n  //        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n  //        data:\n  //        {\n  //            name,\n  //        },\n  //        headers:\n  //            { \"Authorization\": `Bearer ${token}` }\n  //    })\n  //        .then(res => {\n  //            localStorage.setItem('user', JSON.stringify(res.data))\n  //            dispatch(setUser(res.data))\n  //        })\n  //}\n  //async updateUserAvatar(id, token, avatar, dispatch) {\n  //    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n  //        headers: {\n  //            \"Authorization\": `Bearer ${token}`,\n  //            \"Content-Type\": ' multipart/form-data'\n  //        }\n  //    }\n  //    )\n  //        .then(res => {\n  //            localStorage.setItem('user', JSON.stringify(res.data))\n  //            dispatch(setUser(res.data))\n  //        })\n  //}\n  ////!POST\n  ////?Get post(s) ...........................................................................................................................\n  //async getAllPosts(skip = 0, limit = 10) {\n  //    try {\n  //        const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n  //        return res\n  //    } catch (e) {\n  //        console.log(e.response)\n  //    }\n  //}\n  //async getPost(id) {\n  //    try {\n  //        const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n  //        return res\n  //    } catch (e) {\n  //        console.log(e.response)\n  //    }\n  //}\n  ////async deletePost(id, token, closeDeleteModal, dispatch, history) {\n  ////    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n  ////        .then(res => {\n  ////            closeDeleteModal()\n  ////            dispatch(remove(true))\n  ////            setTimeout(() => {\n  ////                history.push(`/list/page${1}/?limit=10&skip=${0}`)\n  ////                dispatch(remove(false))\n  ////            }, 500)\n  ////        })\n  ////}\n  ////?Create new post........................................................................\n  //async createNewPost(title, fullText, description, token, setError, history, id) {\n  //    try {\n  //        const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n  //            {\n  //                title,\n  //                fullText,\n  //                description,\n  //            },\n  //            {\n  //                headers:\n  //                    { \"Authorization\": `Bearer ${token}` }\n  //            });\n  //        if (res.status === 200) {\n  //            setTimeout(() => history.push(`/user-posts/${id}`), 2000)\n  //        }\n  //        return res\n  //    } catch (e) {\n  //        console.log(e.response)\n  //        //setError({ error: true, message: e.response.data.error[0].message })\n  //        setError(e.response.data.error[0].message)\n  //    }\n  //}\n  ////?Update post and post image................................................................\n  //async updatePost(id, token, title, description, fullText, history, user, setError) {\n  //    await axios({\n  //        method: 'PATCH',\n  //        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n  //        data:\n  //        {\n  //            title,\n  //            description,\n  //            fullText,\n  //        },\n  //        headers:\n  //            { \"Authorization\": `Bearer ${token}` }\n  //    })\n  //        .then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500))\n  //        .catch(e => setError(e.response.data.error[0].message))\n  //}\n  //async updatePostImage(id, token, image, refImagePost) {\n  //    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n  //        headers: {\n  //            \"Authorization\": `Bearer ${token}`,\n  //            \"Content-Type\": ' multipart/form-data'\n  //        }\n  //    }\n  //    )\n  //        .then(res => {\n  //            this.getPost(id)\n  //                .then(res => this.getImage(refImagePost, res.data.image))\n  //        })\n  //}\n  ////*Like post........................................................\n  //async setLikePost(id, token) {\n  //    try {\n  //        const res = await axios({\n  //            method: 'PUT',\n  //            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n  //            headers: {\n  //                \"Authorization\": `Bearer ${token}`\n  //            }\n  //        })\n  //        return res\n  //    } catch (e) {\n  //        console.log(e.response)\n  //    }\n  //}\n  ////? get Image post and avatar ...................................................................................\n  //async getImage(ref, image, defaultImage, alt) {\n  //    await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n  //        .then(res => {\n  //            if (res.statusText === 'OK') {\n  //                ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n  //            }\n  //        })\n  //        .catch(e => {\n  //            if (e.status >= 400) {\n  //                ref.current.src = defaultImage;\n  //                ref.current.alt = alt;\n  //            }\n  //        })\n  //}\n\n\n}","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/services/server.js"],"names":["axios","setUser","api","Server","testApi","get","then","res","console","log","catch","e","response","testUpdateName","id","token","name","dispatch","patch","url","data","localStorage","setItem","JSON","stringify","getAllUsers","getUser","updateUserName","method","updateUserAvatar","avatar","put","headers","getAllPosts","skip","limit","getPost","createNewPost","title","fullText","description","setError","history","post","status","setTimeout","push","error","message","updatePost","user","_id","updatePostImage","image","refImagePost","getImage","setLikePost","ref","defaultImage","alt","statusText","current","src"],"mappings":"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AAAA,GAAG,CAACI,OAAJ,CAAYC,GAAZ,GAAkBJ,YAAlB;AACAD,QAAAA,GAAG,CAACI,OAAJ,CAAYF,GAAZ,GAAkBA,GAAlB;AACH;AACJ,KAXC,CAAN;AAYH,GAnLuB,CAuLxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA/dwB","sourcesContent":["import axios from 'axios';\nimport { setUser } from '../redux/user/actions';\nimport api from './api';\n\n//const JWTToken = localStorage.getItem('token');\n//if (JWTToken) {\n//    axios.defaults.headers['Authorization'] = `Bearer ${JWTToken}`\n//}\nexport default class Server {\n\n    testApi() {\n        api.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n            .then(res => console.log(res))\n            .catch(e => console.log(e.response))\n    }\n\n    testUpdateName(id, token, name, dispatch) {\n        api.patch({\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n            data:\n            {\n                name,\n            },\n        })\n            .then(res => {\n                console.log(res)\n                localStorage.setItem('user', JSON.stringify(res.data))\n                dispatch(setUser(res.data))\n            })\n    }\n    //!USER\n    //? Create user and authorization.................................................................................................\n\n    async getAllUsers() {\n        try {\n            const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    async getUser(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n            return res\n        } catch (e) {\n            return e.response\n        }\n    }\n\n    //?Update user and user avatar................................................................\n\n    async updateUserName(id, token, name, dispatch) {\n        await axios({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n            data:\n            {\n                name,\n            },\n        })\n            .then(res => {\n                localStorage.setItem('user', JSON.stringify(res.data))\n                dispatch(setUser(res.data))\n            })\n    }\n\n    async updateUserAvatar(id, token, avatar, dispatch) {\n        await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n            headers: {\n                \"Content-Type\": ' multipart/form-data'\n            }\n        }\n        )\n            .then(res => {\n                localStorage.setItem('user', JSON.stringify(res.data))\n                dispatch(setUser(res.data))\n            })\n    }\n\n    //!POST\n    //?Get post(s) ...........................................................................................................................\n\n    async getAllPosts(skip = 0, limit = 10) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getPost(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //?Create new post........................................................................\n\n    async createNewPost(title, fullText, description, token, setError, history, id) {\n        try {\n            const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n                {\n                    title,\n                    fullText,\n                    description,\n                },\n            );\n            if (res.status === 200) {\n                setTimeout(() => history.push(`/user-posts/${id}`), 2000)\n            }\n            return res\n        } catch (e) {\n            console.log(e.response)\n            //setError({ error: true, message: e.response.data.error[0].message })\n            setError(e.response.data.error[0].message)\n        }\n    }\n\n\n    //?Update post and post image................................................................\n\n    async updatePost(id, token, title, description, fullText, history, user, setError) {\n        await axios({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n            data:\n            {\n                title,\n                description,\n                fullText,\n            },\n        })\n            .then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500))\n            .catch(e => setError(e.response.data.error[0].message))\n    }\n\n    async updatePostImage(id, token, image, refImagePost) {\n        await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n            headers: {\n                \"Content-Type\": ' multipart/form-data'\n            }\n        }\n        )\n            .then(res => {\n                this.getPost(id)\n                    .then(res => this.getImage(refImagePost, res.data.image))\n            })\n\n\n    }\n\n    //*Like post........................................................\n\n    async setLikePost(id, token) {\n        try {\n            const res = await axios({\n                method: 'PUT',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n            })\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //? get Image post and avatar ...................................................................................\n\n    async getImage(ref, image, defaultImage, alt) {\n        await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n                }\n            })\n            .catch(e => {\n                if (e.status >= 400) {\n                    ref.current.src = defaultImage;\n                    ref.current.alt = alt;\n                }\n            })\n    }\n\n\n\n    //! Если все норм работает , не забыть удалить!\n\n    //async loginUser(email, password) {\n    //    try {\n    //        const { data } = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n    //            email,\n    //            password,\n    //        })\n    //        localStorage.setItem('token', data.token)\n    //        //apiSetHeader('Authorization', `Bearer ${data.token}`);\n    //        axios.defaults.headers['Authorization'] = `Bearer ${data.token}`\n    //        //if (localStorage.getItem('token')) {\n    //        this.authorizationUser()\n    //            .then(res => {\n    //                let saveUser = JSON.stringify(res.data)\n    //                localStorage.setItem('user', saveUser)\n    //            })\n    //        //}\n    //        console.log(axios.defaults.headers)\n    //    } catch (error) {\n    //        console.log(error)\n    //    }\n    //}\n\n    //async authorizationUser(token) {\n    //    try {\n    //        const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user')\n    //        console.log(_res)\n    //        return _res\n    //    } catch (e) {\n    //        console.log(e.response);\n    //    }\n    //}\n\n    //async testChangeName(id, name, dispatch) {\n    //    await axios({\n    //        method: 'PATCH',\n    //        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n    //        data:\n    //        {\n    //            name,\n    //        }\n    //    })\n    //        .then(res => {\n    //            console.log(res)\n    //            localStorage.setItem('user', JSON.stringify(res.data))\n    //            dispatch(setUser(res.data))\n    //        })\n    //        .catch(e => console.log(e.response))\n    //}\n\n    ////async loginUser(email, password, nav, dispatch) {\n    ////    await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n    ////        email,\n    ////        password,\n    ////    })\n    ////        .then(res => {\n    ////            localStorage.setItem('token', res.data.token)\n    ////            if (localStorage.getItem('token')) {\n    ////                this.authorizationUser(localStorage.getItem('token'))\n    ////                    .then(res => {\n    ////                        dispatch(addUser(res.data))\n    ////                        let saveUser = JSON.stringify(res.data)\n    ////                        localStorage.setItem('user', saveUser)\n    ////                    })\n    ////            }\n    ////        })\n    ////        .catch(e => {\n    ////            nav('/login')\n    ////            dispatch(fault())\n    ////        })\n\n    ////}\n\n    ////async authorizationUser(token) {\n    ////    try {\n    ////        const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n    ////        return _res\n    ////    } catch (e) {\n    ////        console.log(e.response);\n    ////    }\n    ////}\n\n    ////async createNewUser(email, password, name, history, dispatch) {\n    ////    try {\n    ////        await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n    ////            email,\n    ////            password,\n    ////            name\n    ////        })\n    ////            .then(res => setTimeout(() => history.push('/login'), 500))\n    ////            .catch(e => dispatch(fault()))\n    ////    } catch (e) {\n    ////        console.log(e.response);\n    ////    }\n    ////}\n\n    ////?Get user(s) ......................................................................................................................\n\n    //async getAllUsers() {\n    //    try {\n    //        const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n    //        console.log(res)\n    //        return res\n    //    } catch (e) {\n    //        console.log(e.response);\n    //    }\n    //}\n\n    //async getUser(id) {\n    //    try {\n    //        const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n    //        return res\n    //    } catch (e) {\n    //        return e.response\n    //    }\n    //}\n\n\n    ////async deleteUser(id, token, dispatch, history) {\n    ////    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n    ////        .then(res => {\n    ////            dispatch(logout());\n    ////            dispatch(remove(true))\n    ////            localStorage.removeItem('user');\n    ////            localStorage.removeItem('token');\n    ////            setTimeout(() => {\n    ////                history.push(\"/login\")\n    ////                dispatch(remove(false))\n    ////            }, 500)\n    ////        })\n    ////}\n\n    ////?Update user and user avatar................................................................\n\n    //async updateUserName(id, token, name, dispatch) {\n    //    await axios({\n    //        method: 'PATCH',\n    //        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n    //        data:\n    //        {\n    //            name,\n    //        },\n\n    //        headers:\n    //            { \"Authorization\": `Bearer ${token}` }\n\n    //    })\n    //        .then(res => {\n    //            localStorage.setItem('user', JSON.stringify(res.data))\n    //            dispatch(setUser(res.data))\n    //        })\n    //}\n\n    //async updateUserAvatar(id, token, avatar, dispatch) {\n    //    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n    //        headers: {\n    //            \"Authorization\": `Bearer ${token}`,\n    //            \"Content-Type\": ' multipart/form-data'\n    //        }\n    //    }\n    //    )\n    //        .then(res => {\n    //            localStorage.setItem('user', JSON.stringify(res.data))\n    //            dispatch(setUser(res.data))\n    //        })\n    //}\n\n    ////!POST\n    ////?Get post(s) ...........................................................................................................................\n\n    //async getAllPosts(skip = 0, limit = 10) {\n    //    try {\n    //        const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n    //        return res\n    //    } catch (e) {\n    //        console.log(e.response)\n    //    }\n    //}\n\n    //async getPost(id) {\n    //    try {\n    //        const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n    //        return res\n    //    } catch (e) {\n    //        console.log(e.response)\n    //    }\n    //}\n\n    ////async deletePost(id, token, closeDeleteModal, dispatch, history) {\n    ////    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n    ////        .then(res => {\n    ////            closeDeleteModal()\n    ////            dispatch(remove(true))\n    ////            setTimeout(() => {\n    ////                history.push(`/list/page${1}/?limit=10&skip=${0}`)\n    ////                dispatch(remove(false))\n    ////            }, 500)\n    ////        })\n    ////}\n\n    ////?Create new post........................................................................\n\n    //async createNewPost(title, fullText, description, token, setError, history, id) {\n    //    try {\n    //        const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n    //            {\n    //                title,\n    //                fullText,\n    //                description,\n    //            },\n    //            {\n    //                headers:\n    //                    { \"Authorization\": `Bearer ${token}` }\n    //            });\n    //        if (res.status === 200) {\n    //            setTimeout(() => history.push(`/user-posts/${id}`), 2000)\n    //        }\n    //        return res\n    //    } catch (e) {\n    //        console.log(e.response)\n    //        //setError({ error: true, message: e.response.data.error[0].message })\n    //        setError(e.response.data.error[0].message)\n    //    }\n    //}\n\n\n    ////?Update post and post image................................................................\n\n    //async updatePost(id, token, title, description, fullText, history, user, setError) {\n    //    await axios({\n    //        method: 'PATCH',\n    //        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n    //        data:\n    //        {\n    //            title,\n    //            description,\n    //            fullText,\n    //        },\n\n    //        headers:\n    //            { \"Authorization\": `Bearer ${token}` }\n\n    //    })\n    //        .then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500))\n    //        .catch(e => setError(e.response.data.error[0].message))\n    //}\n\n    //async updatePostImage(id, token, image, refImagePost) {\n    //    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n    //        headers: {\n    //            \"Authorization\": `Bearer ${token}`,\n    //            \"Content-Type\": ' multipart/form-data'\n    //        }\n    //    }\n    //    )\n    //        .then(res => {\n    //            this.getPost(id)\n    //                .then(res => this.getImage(refImagePost, res.data.image))\n    //        })\n\n\n    //}\n\n    ////*Like post........................................................\n\n    //async setLikePost(id, token) {\n    //    try {\n    //        const res = await axios({\n    //            method: 'PUT',\n    //            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n    //            headers: {\n    //                \"Authorization\": `Bearer ${token}`\n    //            }\n    //        })\n    //        return res\n    //    } catch (e) {\n    //        console.log(e.response)\n    //    }\n    //}\n\n    ////? get Image post and avatar ...................................................................................\n\n    //async getImage(ref, image, defaultImage, alt) {\n    //    await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n    //        .then(res => {\n    //            if (res.statusText === 'OK') {\n    //                ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n    //            }\n    //        })\n    //        .catch(e => {\n    //            if (e.status >= 400) {\n    //                ref.current.src = defaultImage;\n    //                ref.current.alt = alt;\n    //            }\n    //        })\n    //}\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}