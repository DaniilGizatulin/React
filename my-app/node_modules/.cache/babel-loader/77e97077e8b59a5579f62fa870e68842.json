{"ast":null,"code":"import axios from 'axios';\nimport { setUser } from '../redux/user/actions'; //import api, { apiSetHeader } from './axios-header';\n// Проверим в самом начале, есть ли токен в хранилище\n\nconst JWTToken = localStorage.getItem('token');\naxios.defaults.baseURL = 'https://nodejs-test-api-blog.herokuapp.com/api';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nfunction apiSetHeader(name, value) {\n  //if (value) {\n  axios.headers[name] = value; //}\n}\n\n; // Если токен есть, то добавим заголовок к запросам\n\nif (JWTToken) {\n  console.log('123');\n  apiSetHeader('Authorization', `Bearer ${JWTToken}`);\n}\n\naxios.interceptors.request.use(config => {\n  console.log(config); // Если пользователь делает запрос и у него нет заголовка с токеном, то...\n\n  if (!config.headers['Authorization']) {\n    // Тут пишем редирект если не авторизован\n    console.log('Не авторизован');\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default class Server {\n  //!USER\n  //? Create user and authorization.................................................................................................\n  async loginUser(email, password) {\n    try {\n      const {\n        data\n      } = await axios.post(\"/v1/auth\", {\n        email,\n        password\n      });\n      localStorage.setItem('token', data.token);\n      apiSetHeader('Authorization', `Bearer ${data.token}`); //if (localStorage.getItem('token')) {\n\n      this.authorizationUser().then(res => {\n        let saveUser = JSON.stringify(res.data);\n        localStorage.setItem('user', saveUser);\n      }); //}\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async authorizationUser(token) {\n    try {\n      const _res = await axios.get('/v1/auth/user');\n\n      console.log(_res);\n      return _res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //async loginUser(email, password, nav, dispatch) {\n  //    await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n  //        email,\n  //        password,\n  //    })\n  //        .then(res => {\n  //            localStorage.setItem('token', res.data.token)\n  //            if (localStorage.getItem('token')) {\n  //                this.authorizationUser(localStorage.getItem('token'))\n  //                    .then(res => {\n  //                        dispatch(addUser(res.data))\n  //                        let saveUser = JSON.stringify(res.data)\n  //                        localStorage.setItem('user', saveUser)\n  //                    })\n  //            }\n  //        })\n  //        .catch(e => {\n  //            nav('/login')\n  //            dispatch(fault())\n  //        })\n  //}\n  //async authorizationUser(token) {\n  //    try {\n  //        const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n  //        return _res\n  //    } catch (e) {\n  //        console.log(e.response);\n  //    }\n  //}\n  //async createNewUser(email, password, name, history, dispatch) {\n  //    try {\n  //        await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n  //            email,\n  //            password,\n  //            name\n  //        })\n  //            .then(res => setTimeout(() => history.push('/login'), 500))\n  //            .catch(e => dispatch(fault()))\n  //    } catch (e) {\n  //        console.log(e.response);\n  //    }\n  //}\n  //?Get user(s) ......................................................................................................................\n\n\n  async getAllUsers() {\n    try {\n      const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users');\n      console.log(res);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getUser(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`);\n      return res;\n    } catch (e) {\n      return e.response;\n    }\n  } //async deleteUser(id, token, dispatch, history) {\n  //    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n  //        .then(res => {\n  //            dispatch(logout());\n  //            dispatch(remove(true))\n  //            localStorage.removeItem('user');\n  //            localStorage.removeItem('token');\n  //            setTimeout(() => {\n  //                history.push(\"/login\")\n  //                dispatch(remove(false))\n  //            }, 500)\n  //        })\n  //}\n  //?Update user and user avatar................................................................\n\n\n  async updateUserName(id, token, name, dispatch) {\n    await axios({\n      method: 'PATCH',\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n      data: {\n        name\n      },\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(res => {\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch(setUser(res.data));\n    });\n  }\n\n  async updateUserAvatar(id, token, avatar, dispatch) {\n    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": ' multipart/form-data'\n      }\n    }).then(res => {\n      localStorage.setItem('user', JSON.stringify(res.data));\n      dispatch(setUser(res.data));\n    });\n  } //!POST\n  //?Get post(s) ...........................................................................................................................\n\n\n  async getAllPosts(skip = 0, limit = 10) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  }\n\n  async getPost(id) {\n    try {\n      const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`);\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //async deletePost(id, token, closeDeleteModal, dispatch, history) {\n  //    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n  //        .then(res => {\n  //            closeDeleteModal()\n  //            dispatch(remove(true))\n  //            setTimeout(() => {\n  //                history.push(`/list/page${1}/?limit=10&skip=${0}`)\n  //                dispatch(remove(false))\n  //            }, 500)\n  //        })\n  //}\n  //?Create new post........................................................................\n\n\n  async createNewPost(title, fullText, description, token, setError, history, id) {\n    try {\n      const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\", {\n        title,\n        fullText,\n        description\n      }, {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n\n      if (res.status === 200) {\n        setTimeout(() => history.push(`/user-posts/${id}`), 2000);\n      }\n\n      return res;\n    } catch (e) {\n      console.log(e.response); //setError({ error: true, message: e.response.data.error[0].message })\n\n      setError(e.response.data.error[0].message);\n    }\n  } //?Update post and post image................................................................\n\n\n  async updatePost(id, token, title, description, fullText, history, user, setError) {\n    await axios({\n      method: 'PATCH',\n      url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n      data: {\n        title,\n        description,\n        fullText\n      },\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500)).catch(e => setError(e.response.data.error[0].message));\n  }\n\n  async updatePostImage(id, token, image, refImagePost) {\n    await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": ' multipart/form-data'\n      }\n    }).then(res => {\n      this.getPost(id).then(res => this.getImage(refImagePost, res.data.image));\n    });\n  } //*Like post........................................................\n\n\n  async setLikePost(id, token) {\n    try {\n      const res = await axios({\n        method: 'PUT',\n        url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n      return res;\n    } catch (e) {\n      console.log(e.response);\n    }\n  } //? get Image post and avatar ...................................................................................\n\n\n  async getImage(ref, image, defaultImage, alt) {\n    await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`).then(res => {\n      if (res.statusText === 'OK') {\n        ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`;\n      }\n    }).catch(e => {\n      if (e.status >= 400) {\n        ref.current.src = defaultImage;\n        ref.current.alt = alt;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/services/server.js"],"names":["axios","setUser","JWTToken","localStorage","getItem","defaults","baseURL","headers","post","apiSetHeader","name","value","console","log","interceptors","request","use","config","error","Promise","reject","Server","loginUser","email","password","data","setItem","token","authorizationUser","then","res","saveUser","JSON","stringify","_res","get","e","response","getAllUsers","getUser","id","updateUserName","dispatch","method","url","updateUserAvatar","avatar","put","getAllPosts","skip","limit","getPost","createNewPost","title","fullText","description","setError","history","status","setTimeout","push","message","updatePost","user","_id","catch","updatePostImage","image","refImagePost","getImage","setLikePost","ref","defaultImage","alt","statusText","current","src"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setUser } from '../redux/user/actions';\n\n//import api, { apiSetHeader } from './axios-header';\n\n// Проверим в самом начале, есть ли токен в хранилище\nconst JWTToken = localStorage.getItem('token');\naxios.defaults.baseURL = 'https://nodejs-test-api-blog.herokuapp.com/api';\naxios.defaults.headers.post['Content-Type'] = 'application/json'\nfunction apiSetHeader(name, value) {\n    //if (value) {\n    axios.headers[name] = value;\n    //}\n};\n\n// Если токен есть, то добавим заголовок к запросам\nif (JWTToken) {\n    console.log('123')\n    apiSetHeader('Authorization', `Bearer ${JWTToken}`);\n}\n\naxios.interceptors.request.use(config => {\n    console.log(config)\n    // Если пользователь делает запрос и у него нет заголовка с токеном, то...\n    if (!config.headers['Authorization']) {\n        // Тут пишем редирект если не авторизован\n        console.log('Не авторизован')\n    }\n\n    return config;\n}, error => {\n    return Promise.reject(error);\n});\n\n\nexport default class Server {\n\n    //!USER\n    //? Create user and authorization.................................................................................................\n\n    async loginUser(email, password) {\n        try {\n            const { data } = await axios.post(\"/v1/auth\", {\n                email,\n                password,\n            })\n            localStorage.setItem('token', data.token)\n            apiSetHeader('Authorization', `Bearer ${data.token}`);\n            //if (localStorage.getItem('token')) {\n            this.authorizationUser()\n                .then(res => {\n                    let saveUser = JSON.stringify(res.data)\n                    localStorage.setItem('user', saveUser)\n                })\n            //}\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    async authorizationUser(token) {\n        try {\n            const _res = await axios.get('/v1/auth/user')\n            console.log(_res)\n            return _res\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    //async loginUser(email, password, nav, dispatch) {\n    //    await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/auth\", {\n    //        email,\n    //        password,\n    //    })\n    //        .then(res => {\n    //            localStorage.setItem('token', res.data.token)\n    //            if (localStorage.getItem('token')) {\n    //                this.authorizationUser(localStorage.getItem('token'))\n    //                    .then(res => {\n    //                        dispatch(addUser(res.data))\n    //                        let saveUser = JSON.stringify(res.data)\n    //                        localStorage.setItem('user', saveUser)\n    //                    })\n    //            }\n    //        })\n    //        .catch(e => {\n    //            nav('/login')\n    //            dispatch(fault())\n    //        })\n\n    //}\n\n    //async authorizationUser(token) {\n    //    try {\n    //        const _res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/auth/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n    //        return _res\n    //    } catch (e) {\n    //        console.log(e.response);\n    //    }\n    //}\n\n    //async createNewUser(email, password, name, history, dispatch) {\n    //    try {\n    //        await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/users\", {\n    //            email,\n    //            password,\n    //            name\n    //        })\n    //            .then(res => setTimeout(() => history.push('/login'), 500))\n    //            .catch(e => dispatch(fault()))\n    //    } catch (e) {\n    //        console.log(e.response);\n    //    }\n    //}\n\n    //?Get user(s) ......................................................................................................................\n\n    async getAllUsers() {\n        try {\n            const res = await axios.get('https://nodejs-test-api-blog.herokuapp.com/api/v1/users')\n            console.log(res)\n            return res\n        } catch (e) {\n            console.log(e.response);\n        }\n    }\n\n    async getUser(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`)\n            return res\n        } catch (e) {\n            return e.response\n        }\n    }\n\n\n    //async deleteUser(id, token, dispatch, history) {\n    //    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n    //        .then(res => {\n    //            dispatch(logout());\n    //            dispatch(remove(true))\n    //            localStorage.removeItem('user');\n    //            localStorage.removeItem('token');\n    //            setTimeout(() => {\n    //                history.push(\"/login\")\n    //                dispatch(remove(false))\n    //            }, 500)\n    //        })\n    //}\n\n    //?Update user and user avatar................................................................\n\n    async updateUserName(id, token, name, dispatch) {\n        await axios({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/users/${id}`,\n            data:\n            {\n                name,\n            },\n\n            headers:\n                { \"Authorization\": `Bearer ${token}` }\n\n        })\n            .then(res => {\n                localStorage.setItem('user', JSON.stringify(res.data))\n                dispatch(setUser(res.data))\n            })\n    }\n\n    async updateUserAvatar(id, token, avatar, dispatch) {\n        await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/users/upload/${id}`, avatar, {\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": ' multipart/form-data'\n            }\n        }\n        )\n            .then(res => {\n                localStorage.setItem('user', JSON.stringify(res.data))\n                dispatch(setUser(res.data))\n            })\n    }\n\n    //!POST\n    //?Get post(s) ...........................................................................................................................\n\n    async getAllPosts(skip = 0, limit = 10) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getPost(id) {\n        try {\n            const res = await axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //async deletePost(id, token, closeDeleteModal, dispatch, history) {\n    //    await axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n    //        .then(res => {\n    //            closeDeleteModal()\n    //            dispatch(remove(true))\n    //            setTimeout(() => {\n    //                history.push(`/list/page${1}/?limit=10&skip=${0}`)\n    //                dispatch(remove(false))\n    //            }, 500)\n    //        })\n    //}\n\n    //?Create new post........................................................................\n\n    async createNewPost(title, fullText, description, token, setError, history, id) {\n        try {\n            const res = await axios.post(\"https://nodejs-test-api-blog.herokuapp.com/api/v1/posts\",\n                {\n                    title,\n                    fullText,\n                    description,\n                },\n                {\n                    headers:\n                        { \"Authorization\": `Bearer ${token}` }\n                });\n            if (res.status === 200) {\n                setTimeout(() => history.push(`/user-posts/${id}`), 2000)\n            }\n            return res\n        } catch (e) {\n            console.log(e.response)\n            //setError({ error: true, message: e.response.data.error[0].message })\n            setError(e.response.data.error[0].message)\n        }\n    }\n\n\n    //?Update post and post image................................................................\n\n    async updatePost(id, token, title, description, fullText, history, user, setError) {\n        await axios({\n            method: 'PATCH',\n            url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`,\n            data:\n            {\n                title,\n                description,\n                fullText,\n            },\n\n            headers:\n                { \"Authorization\": `Bearer ${token}` }\n\n        })\n            .then(res => setTimeout(() => history.push(`/user-posts/${user._id}`), 1500))\n            .catch(e => setError(e.response.data.error[0].message))\n    }\n\n    async updatePostImage(id, token, image, refImagePost) {\n        await axios.put(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/upload/${id}`, image, {\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": ' multipart/form-data'\n            }\n        }\n        )\n            .then(res => {\n                this.getPost(id)\n                    .then(res => this.getImage(refImagePost, res.data.image))\n            })\n\n\n    }\n\n    //*Like post........................................................\n\n    async setLikePost(id, token) {\n        try {\n            const res = await axios({\n                method: 'PUT',\n                url: `https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/like/${id}`,\n                headers: {\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n            return res\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    //? get Image post and avatar ...................................................................................\n\n    async getImage(ref, image, defaultImage, alt) {\n        await axios.get(`https://nodejs-test-api-blog.herokuapp.com${image}`)\n            .then(res => {\n                if (res.statusText === 'OK') {\n                    ref.current.src = `https://nodejs-test-api-blog.herokuapp.com${image}`\n                }\n            })\n            .catch(e => {\n                if (e.status >= 400) {\n                    ref.current.src = defaultImage;\n                    ref.current.alt = alt;\n                }\n            })\n    }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}