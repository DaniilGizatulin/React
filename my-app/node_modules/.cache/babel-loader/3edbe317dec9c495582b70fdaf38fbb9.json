{"ast":null,"code":"import axios from 'axios';\nimport { POSTS, LOADED, ERROR, DELETED, POST, ALL_POSTS, FULL_POST } from './types'; //import { getUsers } from '../../api';\n\nconst setPosts = posts => {\n  return dispatch => dispatch({\n    type: POSTS,\n    payload: posts\n  });\n};\n\nconst getPosts = (skip = 0, limit = 10) => {\n  return dispatch => axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`).then(res => {\n    dispatch({\n      type: POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nconst getAllPosts = (skip = 0, limit = 10) => {\n  return dispatch => axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`).then(res => {\n    dispatch({\n      type: ALL_POSTS,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  });\n};\n\nconst loaded = () => {\n  return dispatch => dispatch({\n    type: LOADED\n  });\n};\n\nconst fault = () => {\n  return dispatch => dispatch({\n    type: ERROR\n  });\n};\n\nconst deletePost = (id, token, history) => {\n  return dispatch => axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, {\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(res => {\n    dispatch({\n      type: DELETED,\n      payload: true\n    });\n    setTimeout(() => {\n      history.push(`/list/page${1}/?limit=10&skip=${0}`);\n      dispatch({\n        type: DELETED,\n        payload: false\n      });\n    }, 500);\n  });\n};\n\nconst getPost = id => {\n  return dispatch => axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: POST,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR,\n    payload: false\n  }));\n}; //const getAllUsers = () => {\n//    getUsers()\n//        .then(res => console.log(res))\n//}\n\n\nconst getFullPost = id => {\n  return dispatch => axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`).then(res => {\n    dispatch({\n      type: FULL_POST,\n      payload: res.data\n    });\n    dispatch({\n      type: LOADED\n    });\n  }).catch(e => dispatch({\n    type: ERROR\n  }));\n};\n\nexport { getPosts, setPosts, loaded, fault, deletePost, getPost, getAllPosts, getFullPost };","map":{"version":3,"sources":["/home/ubuntu/Рабочий стол/Daniil/FicusTest/my-app/src/redux/posts/actions.js"],"names":["axios","POSTS","LOADED","ERROR","DELETED","POST","ALL_POSTS","FULL_POST","setPosts","posts","dispatch","type","payload","getPosts","skip","limit","get","then","res","data","catch","e","getAllPosts","loaded","fault","deletePost","id","token","history","delete","headers","setTimeout","push","getPost","getFullPost"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { POSTS, LOADED, ERROR, DELETED, POST, ALL_POSTS, FULL_POST } from './types'\n\n//import { getUsers } from '../../api';\n\nconst setPosts = (posts) => {\n    return (dispatch) =>\n        dispatch({ type: POSTS, payload: posts })\n}\n\nconst getPosts = (skip = 0, limit = 10) => {\n    return (dispatch) =>\n        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            .then(res => {\n                dispatch({ type: POSTS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n\n}\n\nconst getAllPosts = (skip = 0, limit = 10) => {\n    return (dispatch) =>\n        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts?limit=${limit}&skip=${skip}`)\n            .then(res => {\n                dispatch({ type: ALL_POSTS, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n}\n\nconst loaded = () => {\n    return (dispatch) =>\n        dispatch({ type: LOADED })\n}\n\nconst fault = () => {\n    return (dispatch) =>\n        dispatch({ type: ERROR })\n}\n\nconst deletePost = (id, token, history) => {\n    return (dispatch) =>\n        axios.delete(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`, { headers: { \"Authorization\": `Bearer ${token}` } })\n            .then(res => {\n                dispatch({ type: DELETED, payload: true })\n                setTimeout(() => {\n                    history.push(`/list/page${1}/?limit=10&skip=${0}`)\n                    dispatch({ type: DELETED, payload: false })\n                }, 500)\n            })\n\n}\n\nconst getPost = (id) => {\n    return (dispatch) =>\n        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: POST, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR, payload: false }))\n}\n\n//const getAllUsers = () => {\n//    getUsers()\n//        .then(res => console.log(res))\n//}\n\nconst getFullPost = (id) => {\n    return (dispatch) =>\n        axios.get(`https://nodejs-test-api-blog.herokuapp.com/api/v1/posts/${id}`)\n            .then(res => {\n                dispatch({ type: FULL_POST, payload: res.data })\n                dispatch({ type: LOADED })\n            })\n            .catch(e => dispatch({ type: ERROR }))\n}\n\n\nexport { getPosts, setPosts, loaded, fault, deletePost, getPost, getAllPosts, getFullPost }"]},"metadata":{},"sourceType":"module"}